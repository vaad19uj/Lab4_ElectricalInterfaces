
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040bc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004268  08004268  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004270  08004270  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004270  08004270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004274  08004274  00014274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08004284  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08004284  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c75c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000197e  00000000  00000000  0002c798  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e18  00000000  00000000  0002e118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d78  00000000  00000000  0002ef30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015928  00000000  00000000  0002fca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009517  00000000  00000000  000455d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a46f  00000000  00000000  0004eae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8f56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c88  00000000  00000000  000d8fd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004238 	.word	0x08004238

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004238 	.word	0x08004238

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <levelBubbleLED>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void levelBubbleLED(){
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

	if(xDegree < 1){
 80004d8:	4b29      	ldr	r3, [pc, #164]	; (8000580 <levelBubbleLED+0xac>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	dc08      	bgt.n	80004f2 <levelBubbleLED+0x1e>
		// x LED Pin low
		pwm=0;
 80004e0:	4b28      	ldr	r3, [pc, #160]	; (8000584 <levelBubbleLED+0xb0>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 80004e6:	4b28      	ldr	r3, [pc, #160]	; (8000588 <levelBubbleLED+0xb4>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a26      	ldr	r2, [pc, #152]	; (8000584 <levelBubbleLED+0xb0>)
 80004ec:	6812      	ldr	r2, [r2, #0]
 80004ee:	635a      	str	r2, [r3, #52]	; 0x34
 80004f0:	e019      	b.n	8000526 <levelBubbleLED+0x52>
	}
	else if(xDegree >= 1 && xDegree <= 5){
 80004f2:	4b23      	ldr	r3, [pc, #140]	; (8000580 <levelBubbleLED+0xac>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	dd0c      	ble.n	8000514 <levelBubbleLED+0x40>
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <levelBubbleLED+0xac>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b05      	cmp	r3, #5
 8000500:	dc08      	bgt.n	8000514 <levelBubbleLED+0x40>
		// PWM 50% duty cycle x LED
		pwm=99;
 8000502:	4b20      	ldr	r3, [pc, #128]	; (8000584 <levelBubbleLED+0xb0>)
 8000504:	2263      	movs	r2, #99	; 0x63
 8000506:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 8000508:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <levelBubbleLED+0xb4>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a1d      	ldr	r2, [pc, #116]	; (8000584 <levelBubbleLED+0xb0>)
 800050e:	6812      	ldr	r2, [r2, #0]
 8000510:	635a      	str	r2, [r3, #52]	; 0x34
 8000512:	e008      	b.n	8000526 <levelBubbleLED+0x52>

	}
	else{	// >5
		// x LED Pin high
		pwm=999;
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <levelBubbleLED+0xb0>)
 8000516:	f240 32e7 	movw	r2, #999	; 0x3e7
 800051a:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <levelBubbleLED+0xb4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a18      	ldr	r2, [pc, #96]	; (8000584 <levelBubbleLED+0xb0>)
 8000522:	6812      	ldr	r2, [r2, #0]
 8000524:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if(yDegree < 1){
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <levelBubbleLED+0xb8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	dc08      	bgt.n	8000540 <levelBubbleLED+0x6c>
		// y LED Pin low
		pwm=0;
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <levelBubbleLED+0xb0>)
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm);
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <levelBubbleLED+0xb4>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a12      	ldr	r2, [pc, #72]	; (8000584 <levelBubbleLED+0xb0>)
 800053a:	6812      	ldr	r2, [r2, #0]
 800053c:	639a      	str	r2, [r3, #56]	; 0x38
	else{	// >5
		// y LED Pin high
		pwm=999;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm);
	}
}
 800053e:	e019      	b.n	8000574 <levelBubbleLED+0xa0>
	else if(yDegree >= 1 && yDegree <= 5){
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <levelBubbleLED+0xb8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	dd0c      	ble.n	8000562 <levelBubbleLED+0x8e>
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <levelBubbleLED+0xb8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b05      	cmp	r3, #5
 800054e:	dc08      	bgt.n	8000562 <levelBubbleLED+0x8e>
		pwm=99;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <levelBubbleLED+0xb0>)
 8000552:	2263      	movs	r2, #99	; 0x63
 8000554:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm);
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <levelBubbleLED+0xb4>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <levelBubbleLED+0xb0>)
 800055c:	6812      	ldr	r2, [r2, #0]
 800055e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000560:	e008      	b.n	8000574 <levelBubbleLED+0xa0>
		pwm=999;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <levelBubbleLED+0xb0>)
 8000564:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000568:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm);
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <levelBubbleLED+0xb4>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a05      	ldr	r2, [pc, #20]	; (8000584 <levelBubbleLED+0xb0>)
 8000570:	6812      	ldr	r2, [r2, #0]
 8000572:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	2000002c 	.word	0x2000002c
 8000584:	20000034 	.word	0x20000034
 8000588:	20000090 	.word	0x20000090
 800058c:	20000030 	.word	0x20000030

08000590 <ADXL345_Write>:

void ADXL345_Write(uint8_t reg, uint8_t value){
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af02      	add	r7, sp, #8
 8000596:	4603      	mov	r3, r0
 8000598:	460a      	mov	r2, r1
 800059a:	71fb      	strb	r3, [r7, #7]
 800059c:	4613      	mov	r3, r2
 800059e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, adxl_address, data, 2, 10);
 80005a8:	f107 020c 	add.w	r2, r7, #12
 80005ac:	230a      	movs	r3, #10
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2302      	movs	r3, #2
 80005b2:	21a6      	movs	r1, #166	; 0xa6
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <ADXL345_Write+0x34>)
 80005b6:	f001 f8d3 	bl	8001760 <HAL_I2C_Master_Transmit>
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	2000003c 	.word	0x2000003c

080005c8 <ADXL345_Read>:

void ADXL345_Read(uint8_t reg, uint8_t numberOfBytes){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af04      	add	r7, sp, #16
 80005ce:	4603      	mov	r3, r0
 80005d0:	460a      	mov	r2, r1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	4613      	mov	r3, r2
 80005d6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, adxl_address, reg, 1, data_rec, numberOfBytes, 100);
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	b299      	uxth	r1, r3
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	b29b      	uxth	r3, r3
 80005e0:	2264      	movs	r2, #100	; 0x64
 80005e2:	9202      	str	r2, [sp, #8]
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <ADXL345_Read+0x38>)
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	460a      	mov	r2, r1
 80005ee:	21a6      	movs	r1, #166	; 0xa6
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <ADXL345_Read+0x3c>)
 80005f2:	f001 f9b3 	bl	800195c <HAL_I2C_Mem_Read>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000154 	.word	0x20000154
 8000604:	2000003c 	.word	0x2000003c

08000608 <ADXL345_Init>:

void ADXL345_Init(){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	ADXL345_Read(0x00, 1);	//0xE5
 800060c:	2101      	movs	r1, #1
 800060e:	2000      	movs	r0, #0
 8000610:	f7ff ffda 	bl	80005c8 <ADXL345_Read>

	ADXL345_Write(0x2d, 0);		// reset all bits
 8000614:	2100      	movs	r1, #0
 8000616:	202d      	movs	r0, #45	; 0x2d
 8000618:	f7ff ffba 	bl	8000590 <ADXL345_Write>
	ADXL345_Write(0x2d, 0x08);
 800061c:	2108      	movs	r1, #8
 800061e:	202d      	movs	r0, #45	; 0x2d
 8000620:	f7ff ffb6 	bl	8000590 <ADXL345_Write>
	ADXL345_Write(0x31, 0x01);
 8000624:	2101      	movs	r1, #1
 8000626:	2031      	movs	r0, #49	; 0x31
 8000628:	f7ff ffb2 	bl	8000590 <ADXL345_Write>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}

08000630 <calcXDegree>:

void calcXDegree(){
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
	xDegree = 0;
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <calcXDegree+0x14>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	2000002c 	.word	0x2000002c

08000648 <calcYDegree>:

void calcYDegree(){
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	yDegree = 2;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <calcYDegree+0x14>)
 800064e:	2202      	movs	r2, #2
 8000650:	601a      	str	r2, [r3, #0]
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	20000030 	.word	0x20000030

08000660 <readValues>:

void readValues(){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	if(updateReady==1){
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <readValues+0x24>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d108      	bne.n	800067e <readValues+0x1e>
		// read ADXL x and y value from register

		// calculate raw values to degrees
		calcXDegree();
 800066c:	f7ff ffe0 	bl	8000630 <calcXDegree>
		calcYDegree();
 8000670:	f7ff ffea 	bl	8000648 <calcYDegree>

		// display result with LEDs
		levelBubbleLED();
 8000674:	f7ff ff2e 	bl	80004d4 <levelBubbleLED>

		// reset
		updateReady = 0;
 8000678:	4b02      	ldr	r3, [pc, #8]	; (8000684 <readValues+0x24>)
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
	}
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000028 	.word	0x20000028

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fbf8 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f81e 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 f996 	bl	80009c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000698:	f000 f96a 	bl	8000970 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800069c:	f000 f884 	bl	80007a8 <MX_I2C1_Init>
  MX_TIM1_Init();
 80006a0:	f000 f8b0 	bl	8000804 <MX_TIM1_Init>
  MX_TIM3_Init();
 80006a4:	f000 f900 	bl	80008a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	ADXL345_Init();
 80006a8:	f7ff ffae 	bl	8000608 <ADXL345_Init>
	HAL_TIM_Base_Start_IT(&htim1);	// start timer for 5 Hz interrupt
 80006ac:	4806      	ldr	r0, [pc, #24]	; (80006c8 <main+0x40>)
 80006ae:	f002 fb50 	bl	8002d52 <HAL_TIM_Base_Start_IT>

	// PWM for x and y LED
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006b2:	2100      	movs	r1, #0
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <main+0x44>)
 80006b6:	f002 fb9b 	bl	8002df0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006ba:	2104      	movs	r1, #4
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <main+0x44>)
 80006be:	f002 fb97 	bl	8002df0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		readValues();
 80006c2:	f7ff ffcd 	bl	8000660 <readValues>
 80006c6:	e7fc      	b.n	80006c2 <main+0x3a>
 80006c8:	200000d0 	.word	0x200000d0
 80006cc:	20000090 	.word	0x20000090

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	; 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fda2 	bl	8004228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <SystemClock_Config+0xd0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a28      	ldr	r2, [pc, #160]	; (80007a0 <SystemClock_Config+0xd0>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <SystemClock_Config+0xd0>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <SystemClock_Config+0xd4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemClock_Config+0xd4>)
 800071e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0xd4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000744:	2310      	movs	r3, #16
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000748:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800074e:	2304      	movs	r3, #4
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000752:	2307      	movs	r3, #7
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fe6c 	bl	8002438 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000766:	f000 f9cf 	bl	8000b08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2102      	movs	r1, #2
 8000786:	4618      	mov	r0, r3
 8000788:	f002 f8c6 	bl	8002918 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000792:	f000 f9b9 	bl	8000b08 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ae:	4a13      	ldr	r2, [pc, #76]	; (80007fc <MX_I2C1_Init+0x54>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_I2C1_Init+0x58>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e6:	f000 fe83 	bl	80014f0 <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f98a 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000003c 	.word	0x2000003c
 80007fc:	40005400 	.word	0x40005400
 8000800:	000186a0 	.word	0x000186a0

08000804 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000818:	463b      	mov	r3, r7
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_TIM1_Init+0x9c>)
 8000822:	4a20      	ldr	r2, [pc, #128]	; (80008a4 <MX_TIM1_Init+0xa0>)
 8000824:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8399;
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_TIM1_Init+0x9c>)
 8000828:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800082c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_TIM1_Init+0x9c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_TIM1_Init+0x9c>)
 8000836:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800083a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_TIM1_Init+0x9c>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_TIM1_Init+0x9c>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_TIM1_Init+0x9c>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800084e:	4814      	ldr	r0, [pc, #80]	; (80008a0 <MX_TIM1_Init+0x9c>)
 8000850:	f002 fa54 	bl	8002cfc <HAL_TIM_Base_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800085a:	f000 f955 	bl	8000b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000862:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	4619      	mov	r1, r3
 800086a:	480d      	ldr	r0, [pc, #52]	; (80008a0 <MX_TIM1_Init+0x9c>)
 800086c:	f002 fcc0 	bl	80031f0 <HAL_TIM_ConfigClockSource>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000876:	f000 f947 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	; (80008a0 <MX_TIM1_Init+0x9c>)
 8000888:	f003 f85e 	bl	8003948 <HAL_TIMEx_MasterConfigSynchronization>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000892:	f000 f939 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000d0 	.word	0x200000d0
 80008a4:	40010000 	.word	0x40010000

080008a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ae:	f107 0320 	add.w	r3, r7, #32
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
 80008c6:	615a      	str	r2, [r3, #20]
 80008c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MX_TIM3_Init+0xc0>)
 80008cc:	4a27      	ldr	r2, [pc, #156]	; (800096c <MX_TIM3_Init+0xc4>)
 80008ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80008d0:	4b25      	ldr	r3, [pc, #148]	; (8000968 <MX_TIM3_Init+0xc0>)
 80008d2:	2253      	movs	r2, #83	; 0x53
 80008d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d6:	4b24      	ldr	r3, [pc, #144]	; (8000968 <MX_TIM3_Init+0xc0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80008dc:	4b22      	ldr	r3, [pc, #136]	; (8000968 <MX_TIM3_Init+0xc0>)
 80008de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e4:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_TIM3_Init+0xc0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_TIM3_Init+0xc0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008f0:	481d      	ldr	r0, [pc, #116]	; (8000968 <MX_TIM3_Init+0xc0>)
 80008f2:	f002 fa52 	bl	8002d9a <HAL_TIM_PWM_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80008fc:	f000 f904 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	4619      	mov	r1, r3
 800090e:	4816      	ldr	r0, [pc, #88]	; (8000968 <MX_TIM3_Init+0xc0>)
 8000910:	f003 f81a 	bl	8003948 <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800091a:	f000 f8f5 	bl	8000b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091e:	2360      	movs	r3, #96	; 0x60
 8000920:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2200      	movs	r2, #0
 8000932:	4619      	mov	r1, r3
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <MX_TIM3_Init+0xc0>)
 8000936:	f002 fb95 	bl	8003064 <HAL_TIM_PWM_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000940:	f000 f8e2 	bl	8000b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2204      	movs	r2, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <MX_TIM3_Init+0xc0>)
 800094c:	f002 fb8a 	bl	8003064 <HAL_TIM_PWM_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000956:	f000 f8d7 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800095a:	4803      	ldr	r0, [pc, #12]	; (8000968 <MX_TIM3_Init+0xc0>)
 800095c:	f000 f992 	bl	8000c84 <HAL_TIM_MspPostInit>

}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	; 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000090 	.word	0x20000090
 800096c:	40000400 	.word	0x40000400

08000970 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <MX_USART2_UART_Init+0x50>)
 8000978:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 80009a8:	f003 f850 	bl	8003a4c <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b2:	f000 f8a9 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000114 	.word	0x20000114
 80009c0:	40004400 	.word	0x40004400

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a30      	ldr	r2, [pc, #192]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a29      	ldr	r2, [pc, #164]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a22      	ldr	r2, [pc, #136]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	4816      	ldr	r0, [pc, #88]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a50:	f000 fd1c 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_GPIO_Init+0xe8>)
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	4811      	ldr	r0, [pc, #68]	; (8000ab0 <MX_GPIO_Init+0xec>)
 8000a6a:	f000 fb8d 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a6e:	2320      	movs	r3, #32
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a86:	f000 fb7f 	bl	8001188 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2028      	movs	r0, #40	; 0x28
 8000a90:	f000 fb43 	bl	800111a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a94:	2028      	movs	r0, #40	; 0x28
 8000a96:	f000 fb5c 	bl	8001152 <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	10210000 	.word	0x10210000
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// 5Hz update
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d102      	bne.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x18>
		updateReady = 1;
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	601a      	str	r2, [r3, #0]
	}
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	40010000 	.word	0x40010000
 8000adc:	20000028 	.word	0x20000028

08000ae0 <HAL_GPIO_EXTI_Callback>:

// calibrate button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin){
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000af0:	d104      	bne.n	8000afc <HAL_GPIO_EXTI_Callback+0x1c>
		// compensate for offset

		//test interrupt
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2120      	movs	r1, #32
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <HAL_GPIO_EXTI_Callback+0x24>)
 8000af8:	f000 fcc8 	bl	800148c <HAL_GPIO_WritePin>

	}
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40020000 	.word	0x40020000

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b0e:	e7fe      	b.n	8000b0e <Error_Handler+0x6>

08000b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b24:	6453      	str	r3, [r2, #68]	; 0x44
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b4e:	2007      	movs	r0, #7
 8000b50:	f000 fad8 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <HAL_I2C_MspInit+0x84>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d12b      	bne.n	8000bda <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b9e:	23c0      	movs	r3, #192	; 0xc0
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba2:	2312      	movs	r3, #18
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <HAL_I2C_MspInit+0x8c>)
 8000bba:	f000 fae5 	bl	8001188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000bc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	; 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40005400 	.word	0x40005400
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020400 	.word	0x40020400

08000bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <HAL_TIM_Base_MspInit+0x48>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d115      	bne.n	8000c2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_TIM_Base_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <HAL_TIM_Base_MspInit+0x4c>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_TIM_Base_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2019      	movs	r0, #25
 8000c24:	f000 fa79 	bl	800111a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c28:	2019      	movs	r0, #25
 8000c2a:	f000 fa92 	bl	8001152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40010000 	.word	0x40010000
 8000c3c:	40023800 	.word	0x40023800

08000c40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <HAL_TIM_PWM_MspInit+0x3c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d10d      	bne.n	8000c6e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_TIM_PWM_MspInit+0x40>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <HAL_TIM_PWM_MspInit+0x40>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <HAL_TIM_PWM_MspInit+0x40>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40000400 	.word	0x40000400
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a12      	ldr	r2, [pc, #72]	; (8000cec <HAL_TIM_MspPostInit+0x68>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d11d      	bne.n	8000ce2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_TIM_MspPostInit+0x6c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <HAL_TIM_MspPostInit+0x6c>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_TIM_MspPostInit+0x6c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = xLED_Pin|yLED_Pin;
 8000cc2:	23c0      	movs	r3, #192	; 0xc0
 8000cc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_TIM_MspPostInit+0x70>)
 8000cde:	f000 fa53 	bl	8001188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3720      	adds	r7, #32
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40000400 	.word	0x40000400
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <HAL_UART_MspInit+0x84>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d12b      	bne.n	8000d72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d52:	230c      	movs	r3, #12
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d62:	2307      	movs	r3, #7
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <HAL_UART_MspInit+0x8c>)
 8000d6e:	f000 fa0b 	bl	8001188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	; 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40004400 	.word	0x40004400
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd4:	f000 f8a6 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000de2:	f002 f837 	bl	8002e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000d0 	.word	0x200000d0

08000df0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000df4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000df8:	f000 fb62 	bl	80014c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <SystemInit+0x28>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <SystemInit+0x28>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <SystemInit+0x28>)
 8000e16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e32:	e003      	b.n	8000e3c <LoopCopyDataInit>

08000e34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e3a:	3104      	adds	r1, #4

08000e3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e3c:	480b      	ldr	r0, [pc, #44]	; (8000e6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e44:	d3f6      	bcc.n	8000e34 <CopyDataInit>
  ldr  r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e48:	e002      	b.n	8000e50 <LoopFillZerobss>

08000e4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e4c:	f842 3b04 	str.w	r3, [r2], #4

08000e50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e54:	d3f9      	bcc.n	8000e4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e56:	f7ff ffd3 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f003 f9c1 	bl	80041e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fc13 	bl	8000688 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e64:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000e68:	08004278 	.word	0x08004278
  ldr  r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e70:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000e74:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000e78:	20000160 	.word	0x20000160

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 f92b 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fe2c 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f943 	bl	800116e <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 f90b 	bl	800111a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	2000015c 	.word	0x2000015c

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	2000015c 	.word	0x2000015c

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4907      	ldr	r1, [pc, #28]	; (8001000 <__NVIC_EnableIRQ+0x38>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f7ff ff8e 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff29 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff3e 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff8e 	bl	8001058 <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5d 	bl	8001004 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff31 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffa2 	bl	80010c0 <SysTick_Config>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	e159      	b.n	8001458 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a4:	2201      	movs	r2, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	429a      	cmp	r2, r3
 80011be:	f040 8148 	bne.w	8001452 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d00b      	beq.n	80011e2 <HAL_GPIO_Init+0x5a>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d007      	beq.n	80011e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d6:	2b11      	cmp	r3, #17
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b12      	cmp	r3, #18
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0xfc>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b12      	cmp	r3, #18
 8001282:	d123      	bne.n	80012cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	08da      	lsrs	r2, r3, #3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3208      	adds	r2, #8
 800128c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	220f      	movs	r2, #15
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	69b9      	ldr	r1, [r7, #24]
 80012c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0203 	and.w	r2, r3, #3
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80a2 	beq.w	8001452 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b56      	ldr	r3, [pc, #344]	; (800146c <HAL_GPIO_Init+0x2e4>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a55      	ldr	r2, [pc, #340]	; (800146c <HAL_GPIO_Init+0x2e4>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b53      	ldr	r3, [pc, #332]	; (800146c <HAL_GPIO_Init+0x2e4>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132a:	4a51      	ldr	r2, [pc, #324]	; (8001470 <HAL_GPIO_Init+0x2e8>)
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3302      	adds	r3, #2
 8001332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	220f      	movs	r2, #15
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a48      	ldr	r2, [pc, #288]	; (8001474 <HAL_GPIO_Init+0x2ec>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d019      	beq.n	800138a <HAL_GPIO_Init+0x202>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a47      	ldr	r2, [pc, #284]	; (8001478 <HAL_GPIO_Init+0x2f0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d013      	beq.n	8001386 <HAL_GPIO_Init+0x1fe>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a46      	ldr	r2, [pc, #280]	; (800147c <HAL_GPIO_Init+0x2f4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d00d      	beq.n	8001382 <HAL_GPIO_Init+0x1fa>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a45      	ldr	r2, [pc, #276]	; (8001480 <HAL_GPIO_Init+0x2f8>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d007      	beq.n	800137e <HAL_GPIO_Init+0x1f6>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a44      	ldr	r2, [pc, #272]	; (8001484 <HAL_GPIO_Init+0x2fc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_GPIO_Init+0x1f2>
 8001376:	2304      	movs	r3, #4
 8001378:	e008      	b.n	800138c <HAL_GPIO_Init+0x204>
 800137a:	2307      	movs	r3, #7
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x204>
 800137e:	2303      	movs	r3, #3
 8001380:	e004      	b.n	800138c <HAL_GPIO_Init+0x204>
 8001382:	2302      	movs	r3, #2
 8001384:	e002      	b.n	800138c <HAL_GPIO_Init+0x204>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <HAL_GPIO_Init+0x204>
 800138a:	2300      	movs	r3, #0
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	f002 0203 	and.w	r2, r2, #3
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	4093      	lsls	r3, r2
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800139c:	4934      	ldr	r1, [pc, #208]	; (8001470 <HAL_GPIO_Init+0x2e8>)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013aa:	4b37      	ldr	r3, [pc, #220]	; (8001488 <HAL_GPIO_Init+0x300>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ce:	4a2e      	ldr	r2, [pc, #184]	; (8001488 <HAL_GPIO_Init+0x300>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013d4:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <HAL_GPIO_Init+0x300>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f8:	4a23      	ldr	r2, [pc, #140]	; (8001488 <HAL_GPIO_Init+0x300>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <HAL_GPIO_Init+0x300>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001422:	4a19      	ldr	r2, [pc, #100]	; (8001488 <HAL_GPIO_Init+0x300>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_GPIO_Init+0x300>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800144c:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <HAL_GPIO_Init+0x300>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3301      	adds	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	2b0f      	cmp	r3, #15
 800145c:	f67f aea2 	bls.w	80011a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001460:	bf00      	nop
 8001462:	3724      	adds	r7, #36	; 0x24
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40023800 	.word	0x40023800
 8001470:	40013800 	.word	0x40013800
 8001474:	40020000 	.word	0x40020000
 8001478:	40020400 	.word	0x40020400
 800147c:	40020800 	.word	0x40020800
 8001480:	40020c00 	.word	0x40020c00
 8001484:	40021000 	.word	0x40021000
 8001488:	40013c00 	.word	0x40013c00

0800148c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
 8001498:	4613      	mov	r3, r2
 800149a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800149c:	787b      	ldrb	r3, [r7, #1]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a8:	e003      	b.n	80014b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	041a      	lsls	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	619a      	str	r2, [r3, #24]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fafe 	bl	8000ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40013c00 	.word	0x40013c00

080014f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e11f      	b.n	8001742 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d106      	bne.n	800151c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fb22 	bl	8000b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2224      	movs	r2, #36	; 0x24
 8001520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001542:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001552:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001554:	f001 fbaa 	bl	8002cac <HAL_RCC_GetPCLK1Freq>
 8001558:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4a7b      	ldr	r2, [pc, #492]	; (800174c <HAL_I2C_Init+0x25c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d807      	bhi.n	8001574 <HAL_I2C_Init+0x84>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4a7a      	ldr	r2, [pc, #488]	; (8001750 <HAL_I2C_Init+0x260>)
 8001568:	4293      	cmp	r3, r2
 800156a:	bf94      	ite	ls
 800156c:	2301      	movls	r3, #1
 800156e:	2300      	movhi	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	e006      	b.n	8001582 <HAL_I2C_Init+0x92>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4a77      	ldr	r2, [pc, #476]	; (8001754 <HAL_I2C_Init+0x264>)
 8001578:	4293      	cmp	r3, r2
 800157a:	bf94      	ite	ls
 800157c:	2301      	movls	r3, #1
 800157e:	2300      	movhi	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0db      	b.n	8001742 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4a72      	ldr	r2, [pc, #456]	; (8001758 <HAL_I2C_Init+0x268>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0c9b      	lsrs	r3, r3, #18
 8001594:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a64      	ldr	r2, [pc, #400]	; (800174c <HAL_I2C_Init+0x25c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d802      	bhi.n	80015c4 <HAL_I2C_Init+0xd4>
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3301      	adds	r3, #1
 80015c2:	e009      	b.n	80015d8 <HAL_I2C_Init+0xe8>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	4a63      	ldr	r2, [pc, #396]	; (800175c <HAL_I2C_Init+0x26c>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	3301      	adds	r3, #1
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	430b      	orrs	r3, r1
 80015de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4956      	ldr	r1, [pc, #344]	; (800174c <HAL_I2C_Init+0x25c>)
 80015f4:	428b      	cmp	r3, r1
 80015f6:	d80d      	bhi.n	8001614 <HAL_I2C_Init+0x124>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1e59      	subs	r1, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fbb1 f3f3 	udiv	r3, r1, r3
 8001606:	3301      	adds	r3, #1
 8001608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160c:	2b04      	cmp	r3, #4
 800160e:	bf38      	it	cc
 8001610:	2304      	movcc	r3, #4
 8001612:	e04f      	b.n	80016b4 <HAL_I2C_Init+0x1c4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d111      	bne.n	8001640 <HAL_I2C_Init+0x150>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e58      	subs	r0, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	440b      	add	r3, r1
 800162a:	fbb0 f3f3 	udiv	r3, r0, r3
 800162e:	3301      	adds	r3, #1
 8001630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf0c      	ite	eq
 8001638:	2301      	moveq	r3, #1
 800163a:	2300      	movne	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	e012      	b.n	8001666 <HAL_I2C_Init+0x176>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e58      	subs	r0, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	0099      	lsls	r1, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	fbb0 f3f3 	udiv	r3, r0, r3
 8001656:	3301      	adds	r3, #1
 8001658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf0c      	ite	eq
 8001660:	2301      	moveq	r3, #1
 8001662:	2300      	movne	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_I2C_Init+0x17e>
 800166a:	2301      	movs	r3, #1
 800166c:	e022      	b.n	80016b4 <HAL_I2C_Init+0x1c4>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10e      	bne.n	8001694 <HAL_I2C_Init+0x1a4>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1e58      	subs	r0, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6859      	ldr	r1, [r3, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	440b      	add	r3, r1
 8001684:	fbb0 f3f3 	udiv	r3, r0, r3
 8001688:	3301      	adds	r3, #1
 800168a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001692:	e00f      	b.n	80016b4 <HAL_I2C_Init+0x1c4>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1e58      	subs	r0, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	0099      	lsls	r1, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016aa:	3301      	adds	r3, #1
 80016ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	6809      	ldr	r1, [r1, #0]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6911      	ldr	r1, [r2, #16]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68d2      	ldr	r2, [r2, #12]
 80016ee:	4311      	orrs	r1, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	430b      	orrs	r3, r1
 80016f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2220      	movs	r2, #32
 800172e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	000186a0 	.word	0x000186a0
 8001750:	001e847f 	.word	0x001e847f
 8001754:	003d08ff 	.word	0x003d08ff
 8001758:	431bde83 	.word	0x431bde83
 800175c:	10624dd3 	.word	0x10624dd3

08001760 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af02      	add	r7, sp, #8
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	461a      	mov	r2, r3
 800176c:	460b      	mov	r3, r1
 800176e:	817b      	strh	r3, [r7, #10]
 8001770:	4613      	mov	r3, r2
 8001772:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff fbea 	bl	8000f4c <HAL_GetTick>
 8001778:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b20      	cmp	r3, #32
 8001784:	f040 80e0 	bne.w	8001948 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2319      	movs	r3, #25
 800178e:	2201      	movs	r2, #1
 8001790:	4970      	ldr	r1, [pc, #448]	; (8001954 <HAL_I2C_Master_Transmit+0x1f4>)
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 fc72 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800179e:	2302      	movs	r3, #2
 80017a0:	e0d3      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <HAL_I2C_Master_Transmit+0x50>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e0cc      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d007      	beq.n	80017d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0201 	orr.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2221      	movs	r2, #33	; 0x21
 80017ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2210      	movs	r2, #16
 80017f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	893a      	ldrh	r2, [r7, #8]
 8001806:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4a50      	ldr	r2, [pc, #320]	; (8001958 <HAL_I2C_Master_Transmit+0x1f8>)
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001818:	8979      	ldrh	r1, [r7, #10]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	6a3a      	ldr	r2, [r7, #32]
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 fac2 	bl	8001da8 <I2C_MasterRequestWrite>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e08d      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001844:	e066      	b.n	8001914 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	6a39      	ldr	r1, [r7, #32]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 fcec 	bl	8002228 <I2C_WaitOnTXEFlagUntilTimeout>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00d      	beq.n	8001872 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	2b04      	cmp	r3, #4
 800185c:	d107      	bne.n	800186e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800186c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e06b      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	781a      	ldrb	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188c:	b29b      	uxth	r3, r3
 800188e:	3b01      	subs	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189a:	3b01      	subs	r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d11b      	bne.n	80018e8 <HAL_I2C_Master_Transmit+0x188>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d017      	beq.n	80018e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	781a      	ldrb	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e0:	3b01      	subs	r3, #1
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	6a39      	ldr	r1, [r7, #32]
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 fcdc 	bl	80022aa <I2C_WaitOnBTFFlagUntilTimeout>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00d      	beq.n	8001914 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d107      	bne.n	8001910 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800190e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e01a      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001918:	2b00      	cmp	r3, #0
 800191a:	d194      	bne.n	8001846 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2220      	movs	r2, #32
 8001930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	e000      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001948:	2302      	movs	r3, #2
  }
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	00100002 	.word	0x00100002
 8001958:	ffff0000 	.word	0xffff0000

0800195c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08c      	sub	sp, #48	; 0x30
 8001960:	af02      	add	r7, sp, #8
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	4608      	mov	r0, r1
 8001966:	4611      	mov	r1, r2
 8001968:	461a      	mov	r2, r3
 800196a:	4603      	mov	r3, r0
 800196c:	817b      	strh	r3, [r7, #10]
 800196e:	460b      	mov	r3, r1
 8001970:	813b      	strh	r3, [r7, #8]
 8001972:	4613      	mov	r3, r2
 8001974:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001976:	f7ff fae9 	bl	8000f4c <HAL_GetTick>
 800197a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b20      	cmp	r3, #32
 8001986:	f040 8208 	bne.w	8001d9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2319      	movs	r3, #25
 8001990:	2201      	movs	r2, #1
 8001992:	497b      	ldr	r1, [pc, #492]	; (8001b80 <HAL_I2C_Mem_Read+0x224>)
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 fb71 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80019a0:	2302      	movs	r3, #2
 80019a2:	e1fb      	b.n	8001d9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_I2C_Mem_Read+0x56>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e1f4      	b.n	8001d9c <HAL_I2C_Mem_Read+0x440>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d007      	beq.n	80019d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2222      	movs	r2, #34	; 0x22
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2240      	movs	r2, #64	; 0x40
 80019f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4a5b      	ldr	r2, [pc, #364]	; (8001b84 <HAL_I2C_Mem_Read+0x228>)
 8001a18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a1a:	88f8      	ldrh	r0, [r7, #6]
 8001a1c:	893a      	ldrh	r2, [r7, #8]
 8001a1e:	8979      	ldrh	r1, [r7, #10]
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	4603      	mov	r3, r0
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 fa3e 	bl	8001eac <I2C_RequestMemoryRead>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e1b0      	b.n	8001d9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d113      	bne.n	8001a6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	623b      	str	r3, [r7, #32]
 8001a56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e184      	b.n	8001d74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d11b      	bne.n	8001aaa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e164      	b.n	8001d74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d11b      	bne.n	8001aea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ac0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ad0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	61bb      	str	r3, [r7, #24]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	e144      	b.n	8001d74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b00:	e138      	b.n	8001d74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	f200 80f1 	bhi.w	8001cee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d123      	bne.n	8001b5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 fc07 	bl	800232c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e139      	b.n	8001d9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b5a:	e10b      	b.n	8001d74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d14e      	bne.n	8001c02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	4906      	ldr	r1, [pc, #24]	; (8001b88 <HAL_I2C_Mem_Read+0x22c>)
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fa84 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d008      	beq.n	8001b8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e10e      	b.n	8001d9c <HAL_I2C_Mem_Read+0x440>
 8001b7e:	bf00      	nop
 8001b80:	00100002 	.word	0x00100002
 8001b84:	ffff0000 	.word	0xffff0000
 8001b88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c00:	e0b8      	b.n	8001d74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4966      	ldr	r1, [pc, #408]	; (8001da4 <HAL_I2C_Mem_Read+0x448>)
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 fa35 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0bf      	b.n	8001d9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c64:	2200      	movs	r2, #0
 8001c66:	494f      	ldr	r1, [pc, #316]	; (8001da4 <HAL_I2C_Mem_Read+0x448>)
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 fa07 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e091      	b.n	8001d9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cec:	e042      	b.n	8001d74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 fb1a 	bl	800232c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e04c      	b.n	8001d9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d118      	bne.n	8001d74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f47f aec2 	bne.w	8001b02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2220      	movs	r2, #32
 8001d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d9a:	2302      	movs	r3, #2
  }
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3728      	adds	r7, #40	; 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	00010004 	.word	0x00010004

08001da8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	460b      	mov	r3, r1
 8001db6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d006      	beq.n	8001dd2 <I2C_MasterRequestWrite+0x2a>
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d003      	beq.n	8001dd2 <I2C_MasterRequestWrite+0x2a>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dd0:	d108      	bne.n	8001de4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e00b      	b.n	8001dfc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	2b12      	cmp	r3, #18
 8001dea:	d107      	bne.n	8001dfc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 f937 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00d      	beq.n	8001e30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e22:	d103      	bne.n	8001e2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e035      	b.n	8001e9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e38:	d108      	bne.n	8001e4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e3a:	897b      	ldrh	r3, [r7, #10]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e48:	611a      	str	r2, [r3, #16]
 8001e4a:	e01b      	b.n	8001e84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e4c:	897b      	ldrh	r3, [r7, #10]
 8001e4e:	11db      	asrs	r3, r3, #7
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f003 0306 	and.w	r3, r3, #6
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f063 030f 	orn	r3, r3, #15
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <I2C_MasterRequestWrite+0xfc>)
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f95d 	bl	800212a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e010      	b.n	8001e9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e7a:	897b      	ldrh	r3, [r7, #10]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4907      	ldr	r1, [pc, #28]	; (8001ea8 <I2C_MasterRequestWrite+0x100>)
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 f94d 	bl	800212a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	00010008 	.word	0x00010008
 8001ea8:	00010002 	.word	0x00010002

08001eac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	4608      	mov	r0, r1
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4603      	mov	r3, r0
 8001ebc:	817b      	strh	r3, [r7, #10]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	813b      	strh	r3, [r7, #8]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 f8c2 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f0c:	d103      	bne.n	8001f16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e0aa      	b.n	8002070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	6a3a      	ldr	r2, [r7, #32]
 8001f2e:	4952      	ldr	r1, [pc, #328]	; (8002078 <I2C_RequestMemoryRead+0x1cc>)
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 f8fa 	bl	800212a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e097      	b.n	8002070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	6a39      	ldr	r1, [r7, #32]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f964 	bl	8002228 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00d      	beq.n	8001f82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d107      	bne.n	8001f7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e076      	b.n	8002070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f88:	893b      	ldrh	r3, [r7, #8]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	611a      	str	r2, [r3, #16]
 8001f92:	e021      	b.n	8001fd8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f94:	893b      	ldrh	r3, [r7, #8]
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa4:	6a39      	ldr	r1, [r7, #32]
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f93e 	bl	8002228 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00d      	beq.n	8001fce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d107      	bne.n	8001fca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e050      	b.n	8002070 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fce:	893b      	ldrh	r3, [r7, #8]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fda:	6a39      	ldr	r1, [r7, #32]
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 f923 	bl	8002228 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00d      	beq.n	8002004 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d107      	bne.n	8002000 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e035      	b.n	8002070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002012:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	2200      	movs	r2, #0
 800201c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 f82b 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00d      	beq.n	8002048 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203a:	d103      	bne.n	8002044 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e013      	b.n	8002070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002048:	897b      	ldrh	r3, [r7, #10]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	b2da      	uxtb	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	6a3a      	ldr	r2, [r7, #32]
 800205c:	4906      	ldr	r1, [pc, #24]	; (8002078 <I2C_RequestMemoryRead+0x1cc>)
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f863 	bl	800212a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	00010002 	.word	0x00010002

0800207c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800208c:	e025      	b.n	80020da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d021      	beq.n	80020da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002096:	f7fe ff59 	bl	8000f4c <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d302      	bcc.n	80020ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d116      	bne.n	80020da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f043 0220 	orr.w	r2, r3, #32
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e023      	b.n	8002122 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d10d      	bne.n	8002100 <I2C_WaitOnFlagUntilTimeout+0x84>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4013      	ands	r3, r2
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bf0c      	ite	eq
 80020f6:	2301      	moveq	r3, #1
 80020f8:	2300      	movne	r3, #0
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	461a      	mov	r2, r3
 80020fe:	e00c      	b.n	800211a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	43da      	mvns	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4013      	ands	r3, r2
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	bf0c      	ite	eq
 8002112:	2301      	moveq	r3, #1
 8002114:	2300      	movne	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	429a      	cmp	r2, r3
 800211e:	d0b6      	beq.n	800208e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002138:	e051      	b.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002148:	d123      	bne.n	8002192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002158:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002162:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f043 0204 	orr.w	r2, r3, #4
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e046      	b.n	8002220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d021      	beq.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800219a:	f7fe fed7 	bl	8000f4c <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d302      	bcc.n	80021b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d116      	bne.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f043 0220 	orr.w	r2, r3, #32
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e020      	b.n	8002220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d10c      	bne.n	8002202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4013      	ands	r3, r2
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	e00b      	b.n	800221a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	43da      	mvns	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	4013      	ands	r3, r2
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d18d      	bne.n	800213a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002234:	e02d      	b.n	8002292 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f8ce 	bl	80023d8 <I2C_IsAcknowledgeFailed>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e02d      	b.n	80022a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d021      	beq.n	8002292 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224e:	f7fe fe7d 	bl	8000f4c <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	429a      	cmp	r2, r3
 800225c:	d302      	bcc.n	8002264 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d116      	bne.n	8002292 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f043 0220 	orr.w	r2, r3, #32
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e007      	b.n	80022a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229c:	2b80      	cmp	r3, #128	; 0x80
 800229e:	d1ca      	bne.n	8002236 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022b6:	e02d      	b.n	8002314 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f88d 	bl	80023d8 <I2C_IsAcknowledgeFailed>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e02d      	b.n	8002324 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ce:	d021      	beq.n	8002314 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d0:	f7fe fe3c 	bl	8000f4c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d302      	bcc.n	80022e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d116      	bne.n	8002314 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f043 0220 	orr.w	r2, r3, #32
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e007      	b.n	8002324 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b04      	cmp	r3, #4
 8002320:	d1ca      	bne.n	80022b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002338:	e042      	b.n	80023c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b10      	cmp	r3, #16
 8002346:	d119      	bne.n	800237c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0210 	mvn.w	r2, #16
 8002350:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e029      	b.n	80023d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237c:	f7fe fde6 	bl	8000f4c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	429a      	cmp	r2, r3
 800238a:	d302      	bcc.n	8002392 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d116      	bne.n	80023c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f043 0220 	orr.w	r2, r3, #32
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e007      	b.n	80023d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ca:	2b40      	cmp	r3, #64	; 0x40
 80023cc:	d1b5      	bne.n	800233a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ee:	d11b      	bne.n	8002428 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f043 0204 	orr.w	r2, r3, #4
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e25b      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d075      	beq.n	8002542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002456:	4ba3      	ldr	r3, [pc, #652]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b04      	cmp	r3, #4
 8002460:	d00c      	beq.n	800247c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002462:	4ba0      	ldr	r3, [pc, #640]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800246a:	2b08      	cmp	r3, #8
 800246c:	d112      	bne.n	8002494 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246e:	4b9d      	ldr	r3, [pc, #628]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800247a:	d10b      	bne.n	8002494 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	4b99      	ldr	r3, [pc, #612]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d05b      	beq.n	8002540 <HAL_RCC_OscConfig+0x108>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d157      	bne.n	8002540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e236      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249c:	d106      	bne.n	80024ac <HAL_RCC_OscConfig+0x74>
 800249e:	4b91      	ldr	r3, [pc, #580]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a90      	ldr	r2, [pc, #576]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e01d      	b.n	80024e8 <HAL_RCC_OscConfig+0xb0>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x98>
 80024b6:	4b8b      	ldr	r3, [pc, #556]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a8a      	ldr	r2, [pc, #552]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4b88      	ldr	r3, [pc, #544]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a87      	ldr	r2, [pc, #540]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e00b      	b.n	80024e8 <HAL_RCC_OscConfig+0xb0>
 80024d0:	4b84      	ldr	r3, [pc, #528]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a83      	ldr	r2, [pc, #524]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b81      	ldr	r3, [pc, #516]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a80      	ldr	r2, [pc, #512]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d013      	beq.n	8002518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd2c 	bl	8000f4c <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f8:	f7fe fd28 	bl	8000f4c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e1fb      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	4b76      	ldr	r3, [pc, #472]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0xc0>
 8002516:	e014      	b.n	8002542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe fd18 	bl	8000f4c <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002520:	f7fe fd14 	bl	8000f4c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1e7      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	4b6c      	ldr	r3, [pc, #432]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0xe8>
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d063      	beq.n	8002616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800254e:	4b65      	ldr	r3, [pc, #404]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255a:	4b62      	ldr	r3, [pc, #392]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002562:	2b08      	cmp	r3, #8
 8002564:	d11c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002566:	4b5f      	ldr	r3, [pc, #380]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d116      	bne.n	80025a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002572:	4b5c      	ldr	r3, [pc, #368]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_RCC_OscConfig+0x152>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e1bb      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258a:	4b56      	ldr	r3, [pc, #344]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4952      	ldr	r1, [pc, #328]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	e03a      	b.n	8002616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a8:	4b4f      	ldr	r3, [pc, #316]	; (80026e8 <HAL_RCC_OscConfig+0x2b0>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7fe fccd 	bl	8000f4c <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b6:	f7fe fcc9 	bl	8000f4c <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e19c      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c8:	4b46      	ldr	r3, [pc, #280]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d4:	4b43      	ldr	r3, [pc, #268]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4940      	ldr	r1, [pc, #256]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]
 80025e8:	e015      	b.n	8002616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ea:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <HAL_RCC_OscConfig+0x2b0>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe fcac 	bl	8000f4c <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f8:	f7fe fca8 	bl	8000f4c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e17b      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260a:	4b36      	ldr	r3, [pc, #216]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d030      	beq.n	8002684 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262a:	4b30      	ldr	r3, [pc, #192]	; (80026ec <HAL_RCC_OscConfig+0x2b4>)
 800262c:	2201      	movs	r2, #1
 800262e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002630:	f7fe fc8c 	bl	8000f4c <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002638:	f7fe fc88 	bl	8000f4c <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e15b      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264a:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x200>
 8002656:	e015      	b.n	8002684 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002658:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_OscConfig+0x2b4>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265e:	f7fe fc75 	bl	8000f4c <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002666:	f7fe fc71 	bl	8000f4c <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e144      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800267a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a0 	beq.w	80027d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10f      	bne.n	80026c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026be:	2301      	movs	r3, #1
 80026c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_OscConfig+0x2b8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d121      	bne.n	8002712 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <HAL_RCC_OscConfig+0x2b8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <HAL_RCC_OscConfig+0x2b8>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026da:	f7fe fc37 	bl	8000f4c <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	e011      	b.n	8002706 <HAL_RCC_OscConfig+0x2ce>
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	42470000 	.word	0x42470000
 80026ec:	42470e80 	.word	0x42470e80
 80026f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f4:	f7fe fc2a 	bl	8000f4c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e0fd      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	4b81      	ldr	r3, [pc, #516]	; (800290c <HAL_RCC_OscConfig+0x4d4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x2f0>
 800271a:	4b7d      	ldr	r3, [pc, #500]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a7c      	ldr	r2, [pc, #496]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6713      	str	r3, [r2, #112]	; 0x70
 8002726:	e01c      	b.n	8002762 <HAL_RCC_OscConfig+0x32a>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d10c      	bne.n	800274a <HAL_RCC_OscConfig+0x312>
 8002730:	4b77      	ldr	r3, [pc, #476]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	4a76      	ldr	r2, [pc, #472]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	6713      	str	r3, [r2, #112]	; 0x70
 800273c:	4b74      	ldr	r3, [pc, #464]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	4a73      	ldr	r2, [pc, #460]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6713      	str	r3, [r2, #112]	; 0x70
 8002748:	e00b      	b.n	8002762 <HAL_RCC_OscConfig+0x32a>
 800274a:	4b71      	ldr	r3, [pc, #452]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	4a70      	ldr	r2, [pc, #448]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6713      	str	r3, [r2, #112]	; 0x70
 8002756:	4b6e      	ldr	r3, [pc, #440]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	4a6d      	ldr	r2, [pc, #436]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d015      	beq.n	8002796 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276a:	f7fe fbef 	bl	8000f4c <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7fe fbeb 	bl	8000f4c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0bc      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	4b61      	ldr	r3, [pc, #388]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ee      	beq.n	8002772 <HAL_RCC_OscConfig+0x33a>
 8002794:	e014      	b.n	80027c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7fe fbd9 	bl	8000f4c <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fe fbd5 	bl	8000f4c <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e0a6      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b4:	4b56      	ldr	r3, [pc, #344]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ee      	bne.n	800279e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4b52      	ldr	r3, [pc, #328]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	4a51      	ldr	r2, [pc, #324]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8092 	beq.w	8002900 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027dc:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d05c      	beq.n	80028a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d141      	bne.n	8002874 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f0:	4b48      	ldr	r3, [pc, #288]	; (8002914 <HAL_RCC_OscConfig+0x4dc>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe fba9 	bl	8000f4c <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe fba5 	bl	8000f4c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e078      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002810:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69da      	ldr	r2, [r3, #28]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	019b      	lsls	r3, r3, #6
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	3b01      	subs	r3, #1
 8002836:	041b      	lsls	r3, r3, #16
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	061b      	lsls	r3, r3, #24
 8002840:	4933      	ldr	r1, [pc, #204]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002846:	4b33      	ldr	r3, [pc, #204]	; (8002914 <HAL_RCC_OscConfig+0x4dc>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe fb7e 	bl	8000f4c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fb7a 	bl	8000f4c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e04d      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002866:	4b2a      	ldr	r3, [pc, #168]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x41c>
 8002872:	e045      	b.n	8002900 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <HAL_RCC_OscConfig+0x4dc>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe fb67 	bl	8000f4c <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002882:	f7fe fb63 	bl	8000f4c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e036      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002894:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x44a>
 80028a0:	e02e      	b.n	8002900 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e029      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <HAL_RCC_OscConfig+0x4d8>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d11c      	bne.n	80028fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d115      	bne.n	80028fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d6:	4013      	ands	r3, r2
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028dc:	4293      	cmp	r3, r2
 80028de:	d10d      	bne.n	80028fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d106      	bne.n	80028fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40007000 	.word	0x40007000
 8002910:	40023800 	.word	0x40023800
 8002914:	42470060 	.word	0x42470060

08002918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0cc      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800292c:	4b68      	ldr	r3, [pc, #416]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d90c      	bls.n	8002954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b65      	ldr	r3, [pc, #404]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b63      	ldr	r3, [pc, #396]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0b8      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002984:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800298e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	494d      	ldr	r1, [pc, #308]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d044      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d119      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e07f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d6:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e06f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e6:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e067      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f6:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f023 0203 	bic.w	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4934      	ldr	r1, [pc, #208]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a08:	f7fe faa0 	bl	8000f4c <HAL_GetTick>
 8002a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a10:	f7fe fa9c 	bl	8000f4c <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e04f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 020c 	and.w	r2, r3, #12
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d1eb      	bne.n	8002a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a38:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d20c      	bcs.n	8002a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e032      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4916      	ldr	r1, [pc, #88]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a9e:	f000 f821 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	5cd3      	ldrb	r3, [r2, r3]
 8002ab2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ab6:	4a09      	ldr	r2, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fa00 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023c00 	.word	0x40023c00
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	08004250 	.word	0x08004250
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	20000004 	.word	0x20000004

08002ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	2300      	movs	r3, #0
 8002af4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002afa:	4b63      	ldr	r3, [pc, #396]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d007      	beq.n	8002b16 <HAL_RCC_GetSysClockFreq+0x32>
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d008      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x38>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 80b4 	bne.w	8002c78 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b10:	4b5e      	ldr	r3, [pc, #376]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b12:	60bb      	str	r3, [r7, #8]
       break;
 8002b14:	e0b3      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b16:	4b5e      	ldr	r3, [pc, #376]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b18:	60bb      	str	r3, [r7, #8]
      break;
 8002b1a:	e0b0      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b1c:	4b5a      	ldr	r3, [pc, #360]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b26:	4b58      	ldr	r3, [pc, #352]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d04a      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b32:	4b55      	ldr	r3, [pc, #340]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	099b      	lsrs	r3, r3, #6
 8002b38:	f04f 0400 	mov.w	r4, #0
 8002b3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	ea03 0501 	and.w	r5, r3, r1
 8002b48:	ea04 0602 	and.w	r6, r4, r2
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	4632      	mov	r2, r6
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	f04f 0400 	mov.w	r4, #0
 8002b58:	0154      	lsls	r4, r2, #5
 8002b5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b5e:	014b      	lsls	r3, r1, #5
 8002b60:	4619      	mov	r1, r3
 8002b62:	4622      	mov	r2, r4
 8002b64:	1b49      	subs	r1, r1, r5
 8002b66:	eb62 0206 	sbc.w	r2, r2, r6
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	f04f 0400 	mov.w	r4, #0
 8002b72:	0194      	lsls	r4, r2, #6
 8002b74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b78:	018b      	lsls	r3, r1, #6
 8002b7a:	1a5b      	subs	r3, r3, r1
 8002b7c:	eb64 0402 	sbc.w	r4, r4, r2
 8002b80:	f04f 0100 	mov.w	r1, #0
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	00e2      	lsls	r2, r4, #3
 8002b8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b8e:	00d9      	lsls	r1, r3, #3
 8002b90:	460b      	mov	r3, r1
 8002b92:	4614      	mov	r4, r2
 8002b94:	195b      	adds	r3, r3, r5
 8002b96:	eb44 0406 	adc.w	r4, r4, r6
 8002b9a:	f04f 0100 	mov.w	r1, #0
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	0262      	lsls	r2, r4, #9
 8002ba4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002ba8:	0259      	lsls	r1, r3, #9
 8002baa:	460b      	mov	r3, r1
 8002bac:	4614      	mov	r4, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f04f 0400 	mov.w	r4, #0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4623      	mov	r3, r4
 8002bbc:	f7fd fb0a 	bl	80001d4 <__aeabi_uldivmod>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	460c      	mov	r4, r1
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	e049      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc8:	4b2f      	ldr	r3, [pc, #188]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	099b      	lsrs	r3, r3, #6
 8002bce:	f04f 0400 	mov.w	r4, #0
 8002bd2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	ea03 0501 	and.w	r5, r3, r1
 8002bde:	ea04 0602 	and.w	r6, r4, r2
 8002be2:	4629      	mov	r1, r5
 8002be4:	4632      	mov	r2, r6
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	f04f 0400 	mov.w	r4, #0
 8002bee:	0154      	lsls	r4, r2, #5
 8002bf0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bf4:	014b      	lsls	r3, r1, #5
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4622      	mov	r2, r4
 8002bfa:	1b49      	subs	r1, r1, r5
 8002bfc:	eb62 0206 	sbc.w	r2, r2, r6
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	f04f 0400 	mov.w	r4, #0
 8002c08:	0194      	lsls	r4, r2, #6
 8002c0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c0e:	018b      	lsls	r3, r1, #6
 8002c10:	1a5b      	subs	r3, r3, r1
 8002c12:	eb64 0402 	sbc.w	r4, r4, r2
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	00e2      	lsls	r2, r4, #3
 8002c20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c24:	00d9      	lsls	r1, r3, #3
 8002c26:	460b      	mov	r3, r1
 8002c28:	4614      	mov	r4, r2
 8002c2a:	195b      	adds	r3, r3, r5
 8002c2c:	eb44 0406 	adc.w	r4, r4, r6
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	02a2      	lsls	r2, r4, #10
 8002c3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c3e:	0299      	lsls	r1, r3, #10
 8002c40:	460b      	mov	r3, r1
 8002c42:	4614      	mov	r4, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	4621      	mov	r1, r4
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f04f 0400 	mov.w	r4, #0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4623      	mov	r3, r4
 8002c52:	f7fd fabf 	bl	80001d4 <__aeabi_uldivmod>
 8002c56:	4603      	mov	r3, r0
 8002c58:	460c      	mov	r4, r1
 8002c5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	0c1b      	lsrs	r3, r3, #16
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	3301      	adds	r3, #1
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	60bb      	str	r3, [r7, #8]
      break;
 8002c76:	e002      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c7a:	60bb      	str	r3, [r7, #8]
      break;
 8002c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	00f42400 	.word	0x00f42400
 8002c90:	007a1200 	.word	0x007a1200

08002c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c98:	4b03      	ldr	r3, [pc, #12]	; (8002ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000000 	.word	0x20000000

08002cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cb0:	f7ff fff0 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cb4:	4601      	mov	r1, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	0a9b      	lsrs	r3, r3, #10
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4a03      	ldr	r2, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc2:	5cd3      	ldrb	r3, [r2, r3]
 8002cc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	08004260 	.word	0x08004260

08002cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cd8:	f7ff ffdc 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cdc:	4601      	mov	r1, r0
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	0b5b      	lsrs	r3, r3, #13
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4a03      	ldr	r2, [pc, #12]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cea:	5cd3      	ldrb	r3, [r2, r3]
 8002cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	08004260 	.word	0x08004260

08002cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e01d      	b.n	8002d4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd ff64 	bl	8000bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 fb38 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 0201 	orr.w	r2, r2, #1
 8002d68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b06      	cmp	r3, #6
 8002d7a:	d007      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e01d      	b.n	8002de8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d106      	bne.n	8002dc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7fd ff3d 	bl	8000c40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	f000 fae9 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	6839      	ldr	r1, [r7, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fd7a 	bl	80038fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a10      	ldr	r2, [pc, #64]	; (8002e50 <HAL_TIM_PWM_Start+0x60>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d107      	bne.n	8002e22 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b06      	cmp	r3, #6
 8002e32:	d007      	beq.n	8002e44 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40010000 	.word	0x40010000

08002e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d122      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d11b      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0202 	mvn.w	r2, #2
 8002e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa6b 	bl	8003372 <HAL_TIM_IC_CaptureCallback>
 8002e9c:	e005      	b.n	8002eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fa5d 	bl	800335e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fa6e 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d122      	bne.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d11b      	bne.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0204 	mvn.w	r2, #4
 8002ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa41 	bl	8003372 <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fa33 	bl	800335e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa44 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d122      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d11b      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0208 	mvn.w	r2, #8
 8002f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fa17 	bl	8003372 <HAL_TIM_IC_CaptureCallback>
 8002f44:	e005      	b.n	8002f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa09 	bl	800335e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fa1a 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d122      	bne.n	8002fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d11b      	bne.n	8002fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0210 	mvn.w	r2, #16
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2208      	movs	r2, #8
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f9ed 	bl	8003372 <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f9df 	bl	800335e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f9f0 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0201 	mvn.w	r2, #1
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fd fd6e 	bl	8000ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b80      	cmp	r3, #128	; 0x80
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff0:	2b80      	cmp	r3, #128	; 0x80
 8002ff2:	d107      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fd1a 	bl	8003a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f9b5 	bl	800339a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b20      	cmp	r3, #32
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b20      	cmp	r3, #32
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0220 	mvn.w	r2, #32
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fce4 	bl	8003a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800307a:	2302      	movs	r3, #2
 800307c:	e0b4      	b.n	80031e8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b0c      	cmp	r3, #12
 8003092:	f200 809f 	bhi.w	80031d4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003096:	a201      	add	r2, pc, #4	; (adr r2, 800309c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309c:	080030d1 	.word	0x080030d1
 80030a0:	080031d5 	.word	0x080031d5
 80030a4:	080031d5 	.word	0x080031d5
 80030a8:	080031d5 	.word	0x080031d5
 80030ac:	08003111 	.word	0x08003111
 80030b0:	080031d5 	.word	0x080031d5
 80030b4:	080031d5 	.word	0x080031d5
 80030b8:	080031d5 	.word	0x080031d5
 80030bc:	08003153 	.word	0x08003153
 80030c0:	080031d5 	.word	0x080031d5
 80030c4:	080031d5 	.word	0x080031d5
 80030c8:	080031d5 	.word	0x080031d5
 80030cc:	08003193 	.word	0x08003193
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f9ea 	bl	80034b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0208 	orr.w	r2, r2, #8
 80030ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0204 	bic.w	r2, r2, #4
 80030fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6999      	ldr	r1, [r3, #24]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	619a      	str	r2, [r3, #24]
      break;
 800310e:	e062      	b.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fa30 	bl	800357c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800312a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800313a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6999      	ldr	r1, [r3, #24]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	021a      	lsls	r2, r3, #8
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	619a      	str	r2, [r3, #24]
      break;
 8003150:	e041      	b.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fa7b 	bl	8003654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0208 	orr.w	r2, r2, #8
 800316c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69da      	ldr	r2, [r3, #28]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0204 	bic.w	r2, r2, #4
 800317c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69d9      	ldr	r1, [r3, #28]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	61da      	str	r2, [r3, #28]
      break;
 8003190:	e021      	b.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fac5 	bl	8003728 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69d9      	ldr	r1, [r3, #28]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	021a      	lsls	r2, r3, #8
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	61da      	str	r2, [r3, #28]
      break;
 80031d2:	e000      	b.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80031d4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_TIM_ConfigClockSource+0x18>
 8003204:	2302      	movs	r3, #2
 8003206:	e0a6      	b.n	8003356 <HAL_TIM_ConfigClockSource+0x166>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800322e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	d067      	beq.n	8003310 <HAL_TIM_ConfigClockSource+0x120>
 8003240:	2b40      	cmp	r3, #64	; 0x40
 8003242:	d80b      	bhi.n	800325c <HAL_TIM_ConfigClockSource+0x6c>
 8003244:	2b10      	cmp	r3, #16
 8003246:	d073      	beq.n	8003330 <HAL_TIM_ConfigClockSource+0x140>
 8003248:	2b10      	cmp	r3, #16
 800324a:	d802      	bhi.n	8003252 <HAL_TIM_ConfigClockSource+0x62>
 800324c:	2b00      	cmp	r3, #0
 800324e:	d06f      	beq.n	8003330 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003250:	e078      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003252:	2b20      	cmp	r3, #32
 8003254:	d06c      	beq.n	8003330 <HAL_TIM_ConfigClockSource+0x140>
 8003256:	2b30      	cmp	r3, #48	; 0x30
 8003258:	d06a      	beq.n	8003330 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800325a:	e073      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800325c:	2b70      	cmp	r3, #112	; 0x70
 800325e:	d00d      	beq.n	800327c <HAL_TIM_ConfigClockSource+0x8c>
 8003260:	2b70      	cmp	r3, #112	; 0x70
 8003262:	d804      	bhi.n	800326e <HAL_TIM_ConfigClockSource+0x7e>
 8003264:	2b50      	cmp	r3, #80	; 0x50
 8003266:	d033      	beq.n	80032d0 <HAL_TIM_ConfigClockSource+0xe0>
 8003268:	2b60      	cmp	r3, #96	; 0x60
 800326a:	d041      	beq.n	80032f0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800326c:	e06a      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800326e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003272:	d066      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x152>
 8003274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003278:	d017      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800327a:	e063      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6899      	ldr	r1, [r3, #8]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f000 fb16 	bl	80038bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800329e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	609a      	str	r2, [r3, #8]
      break;
 80032a8:	e04c      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6899      	ldr	r1, [r3, #8]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f000 faff 	bl	80038bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032cc:	609a      	str	r2, [r3, #8]
      break;
 80032ce:	e039      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	461a      	mov	r2, r3
 80032de:	f000 fa73 	bl	80037c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2150      	movs	r1, #80	; 0x50
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 facc 	bl	8003886 <TIM_ITRx_SetConfig>
      break;
 80032ee:	e029      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	6859      	ldr	r1, [r3, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	461a      	mov	r2, r3
 80032fe:	f000 fa92 	bl	8003826 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2160      	movs	r1, #96	; 0x60
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fabc 	bl	8003886 <TIM_ITRx_SetConfig>
      break;
 800330e:	e019      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	461a      	mov	r2, r3
 800331e:	f000 fa53 	bl	80037c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2140      	movs	r1, #64	; 0x40
 8003328:	4618      	mov	r0, r3
 800332a:	f000 faac 	bl	8003886 <TIM_ITRx_SetConfig>
      break;
 800332e:	e009      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f000 faa3 	bl	8003886 <TIM_ITRx_SetConfig>
      break;
 8003340:	e000      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003342:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a34      	ldr	r2, [pc, #208]	; (8003494 <TIM_Base_SetConfig+0xe4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00f      	beq.n	80033e8 <TIM_Base_SetConfig+0x38>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d00b      	beq.n	80033e8 <TIM_Base_SetConfig+0x38>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a31      	ldr	r2, [pc, #196]	; (8003498 <TIM_Base_SetConfig+0xe8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d007      	beq.n	80033e8 <TIM_Base_SetConfig+0x38>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a30      	ldr	r2, [pc, #192]	; (800349c <TIM_Base_SetConfig+0xec>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <TIM_Base_SetConfig+0x38>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a2f      	ldr	r2, [pc, #188]	; (80034a0 <TIM_Base_SetConfig+0xf0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d108      	bne.n	80033fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a25      	ldr	r2, [pc, #148]	; (8003494 <TIM_Base_SetConfig+0xe4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d01b      	beq.n	800343a <TIM_Base_SetConfig+0x8a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003408:	d017      	beq.n	800343a <TIM_Base_SetConfig+0x8a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a22      	ldr	r2, [pc, #136]	; (8003498 <TIM_Base_SetConfig+0xe8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d013      	beq.n	800343a <TIM_Base_SetConfig+0x8a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a21      	ldr	r2, [pc, #132]	; (800349c <TIM_Base_SetConfig+0xec>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00f      	beq.n	800343a <TIM_Base_SetConfig+0x8a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a20      	ldr	r2, [pc, #128]	; (80034a0 <TIM_Base_SetConfig+0xf0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00b      	beq.n	800343a <TIM_Base_SetConfig+0x8a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a1f      	ldr	r2, [pc, #124]	; (80034a4 <TIM_Base_SetConfig+0xf4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d007      	beq.n	800343a <TIM_Base_SetConfig+0x8a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a1e      	ldr	r2, [pc, #120]	; (80034a8 <TIM_Base_SetConfig+0xf8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d003      	beq.n	800343a <TIM_Base_SetConfig+0x8a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a1d      	ldr	r2, [pc, #116]	; (80034ac <TIM_Base_SetConfig+0xfc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d108      	bne.n	800344c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a08      	ldr	r2, [pc, #32]	; (8003494 <TIM_Base_SetConfig+0xe4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d103      	bne.n	8003480 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	615a      	str	r2, [r3, #20]
}
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40010000 	.word	0x40010000
 8003498:	40000400 	.word	0x40000400
 800349c:	40000800 	.word	0x40000800
 80034a0:	40000c00 	.word	0x40000c00
 80034a4:	40014000 	.word	0x40014000
 80034a8:	40014400 	.word	0x40014400
 80034ac:	40014800 	.word	0x40014800

080034b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f023 0201 	bic.w	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0303 	bic.w	r3, r3, #3
 80034e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f023 0302 	bic.w	r3, r3, #2
 80034f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a1c      	ldr	r2, [pc, #112]	; (8003578 <TIM_OC1_SetConfig+0xc8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d10c      	bne.n	8003526 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f023 0308 	bic.w	r3, r3, #8
 8003512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f023 0304 	bic.w	r3, r3, #4
 8003524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a13      	ldr	r2, [pc, #76]	; (8003578 <TIM_OC1_SetConfig+0xc8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d111      	bne.n	8003552 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800353c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	621a      	str	r2, [r3, #32]
}
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40010000 	.word	0x40010000

0800357c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f023 0210 	bic.w	r2, r3, #16
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f023 0320 	bic.w	r3, r3, #32
 80035c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a1e      	ldr	r2, [pc, #120]	; (8003650 <TIM_OC2_SetConfig+0xd4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d10d      	bne.n	80035f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a15      	ldr	r2, [pc, #84]	; (8003650 <TIM_OC2_SetConfig+0xd4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d113      	bne.n	8003628 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003606:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800360e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	621a      	str	r2, [r3, #32]
}
 8003642:	bf00      	nop
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40010000 	.word	0x40010000

08003654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800369c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	021b      	lsls	r3, r3, #8
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a1d      	ldr	r2, [pc, #116]	; (8003724 <TIM_OC3_SetConfig+0xd0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10d      	bne.n	80036ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a14      	ldr	r2, [pc, #80]	; (8003724 <TIM_OC3_SetConfig+0xd0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d113      	bne.n	80036fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	621a      	str	r2, [r3, #32]
}
 8003718:	bf00      	nop
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40010000 	.word	0x40010000

08003728 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	031b      	lsls	r3, r3, #12
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a10      	ldr	r2, [pc, #64]	; (80037c4 <TIM_OC4_SetConfig+0x9c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d109      	bne.n	800379c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800378e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	019b      	lsls	r3, r3, #6
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	621a      	str	r2, [r3, #32]
}
 80037b6:	bf00      	nop
 80037b8:	371c      	adds	r7, #28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40010000 	.word	0x40010000

080037c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f023 0201 	bic.w	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f023 030a 	bic.w	r3, r3, #10
 8003804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003826:	b480      	push	{r7}
 8003828:	b087      	sub	sp, #28
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f023 0210 	bic.w	r2, r3, #16
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003850:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	031b      	lsls	r3, r3, #12
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003862:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	621a      	str	r2, [r3, #32]
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f043 0307 	orr.w	r3, r3, #7
 80038a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	609a      	str	r2, [r3, #8]
}
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	021a      	lsls	r2, r3, #8
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	431a      	orrs	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	609a      	str	r2, [r3, #8]
}
 80038f0:	bf00      	nop
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	2201      	movs	r2, #1
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a1a      	ldr	r2, [r3, #32]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	43db      	mvns	r3, r3
 800391e:	401a      	ands	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a1a      	ldr	r2, [r3, #32]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	431a      	orrs	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
	...

08003948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800395c:	2302      	movs	r3, #2
 800395e:	e050      	b.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d018      	beq.n	80039d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ac:	d013      	beq.n	80039d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00e      	beq.n	80039d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d009      	beq.n	80039d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d004      	beq.n	80039d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a13      	ldr	r2, [pc, #76]	; (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d10c      	bne.n	80039f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40010000 	.word	0x40010000
 8003a14:	40000400 	.word	0x40000400
 8003a18:	40000800 	.word	0x40000800
 8003a1c:	40000c00 	.word	0x40000c00
 8003a20:	40014000 	.word	0x40014000

08003a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e03f      	b.n	8003ade <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd f940 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	; 0x24
 8003a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f829 	bl	8003ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aec:	b085      	sub	sp, #20
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b2a:	f023 030c 	bic.w	r3, r3, #12
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	68f9      	ldr	r1, [r7, #12]
 8003b34:	430b      	orrs	r3, r1
 8003b36:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b56:	f040 818b 	bne.w	8003e70 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4ac1      	ldr	r2, [pc, #772]	; (8003e64 <UART_SetConfig+0x37c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d005      	beq.n	8003b70 <UART_SetConfig+0x88>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4abf      	ldr	r2, [pc, #764]	; (8003e68 <UART_SetConfig+0x380>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	f040 80bd 	bne.w	8003cea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b70:	f7ff f8b0 	bl	8002cd4 <HAL_RCC_GetPCLK2Freq>
 8003b74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	461d      	mov	r5, r3
 8003b7a:	f04f 0600 	mov.w	r6, #0
 8003b7e:	46a8      	mov	r8, r5
 8003b80:	46b1      	mov	r9, r6
 8003b82:	eb18 0308 	adds.w	r3, r8, r8
 8003b86:	eb49 0409 	adc.w	r4, r9, r9
 8003b8a:	4698      	mov	r8, r3
 8003b8c:	46a1      	mov	r9, r4
 8003b8e:	eb18 0805 	adds.w	r8, r8, r5
 8003b92:	eb49 0906 	adc.w	r9, r9, r6
 8003b96:	f04f 0100 	mov.w	r1, #0
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ba2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ba6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003baa:	4688      	mov	r8, r1
 8003bac:	4691      	mov	r9, r2
 8003bae:	eb18 0005 	adds.w	r0, r8, r5
 8003bb2:	eb49 0106 	adc.w	r1, r9, r6
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	461d      	mov	r5, r3
 8003bbc:	f04f 0600 	mov.w	r6, #0
 8003bc0:	196b      	adds	r3, r5, r5
 8003bc2:	eb46 0406 	adc.w	r4, r6, r6
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4623      	mov	r3, r4
 8003bca:	f7fc fb03 	bl	80001d4 <__aeabi_uldivmod>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	460c      	mov	r4, r1
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4ba5      	ldr	r3, [pc, #660]	; (8003e6c <UART_SetConfig+0x384>)
 8003bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	461d      	mov	r5, r3
 8003be4:	f04f 0600 	mov.w	r6, #0
 8003be8:	46a9      	mov	r9, r5
 8003bea:	46b2      	mov	sl, r6
 8003bec:	eb19 0309 	adds.w	r3, r9, r9
 8003bf0:	eb4a 040a 	adc.w	r4, sl, sl
 8003bf4:	4699      	mov	r9, r3
 8003bf6:	46a2      	mov	sl, r4
 8003bf8:	eb19 0905 	adds.w	r9, r9, r5
 8003bfc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c14:	4689      	mov	r9, r1
 8003c16:	4692      	mov	sl, r2
 8003c18:	eb19 0005 	adds.w	r0, r9, r5
 8003c1c:	eb4a 0106 	adc.w	r1, sl, r6
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	461d      	mov	r5, r3
 8003c26:	f04f 0600 	mov.w	r6, #0
 8003c2a:	196b      	adds	r3, r5, r5
 8003c2c:	eb46 0406 	adc.w	r4, r6, r6
 8003c30:	461a      	mov	r2, r3
 8003c32:	4623      	mov	r3, r4
 8003c34:	f7fc face 	bl	80001d4 <__aeabi_uldivmod>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4b8b      	ldr	r3, [pc, #556]	; (8003e6c <UART_SetConfig+0x384>)
 8003c40:	fba3 1302 	umull	r1, r3, r3, r2
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	2164      	movs	r1, #100	; 0x64
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	3332      	adds	r3, #50	; 0x32
 8003c52:	4a86      	ldr	r2, [pc, #536]	; (8003e6c <UART_SetConfig+0x384>)
 8003c54:	fba2 2303 	umull	r2, r3, r2, r3
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c60:	4498      	add	r8, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	461d      	mov	r5, r3
 8003c66:	f04f 0600 	mov.w	r6, #0
 8003c6a:	46a9      	mov	r9, r5
 8003c6c:	46b2      	mov	sl, r6
 8003c6e:	eb19 0309 	adds.w	r3, r9, r9
 8003c72:	eb4a 040a 	adc.w	r4, sl, sl
 8003c76:	4699      	mov	r9, r3
 8003c78:	46a2      	mov	sl, r4
 8003c7a:	eb19 0905 	adds.w	r9, r9, r5
 8003c7e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c82:	f04f 0100 	mov.w	r1, #0
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c96:	4689      	mov	r9, r1
 8003c98:	4692      	mov	sl, r2
 8003c9a:	eb19 0005 	adds.w	r0, r9, r5
 8003c9e:	eb4a 0106 	adc.w	r1, sl, r6
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	461d      	mov	r5, r3
 8003ca8:	f04f 0600 	mov.w	r6, #0
 8003cac:	196b      	adds	r3, r5, r5
 8003cae:	eb46 0406 	adc.w	r4, r6, r6
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4623      	mov	r3, r4
 8003cb6:	f7fc fa8d 	bl	80001d4 <__aeabi_uldivmod>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4b6a      	ldr	r3, [pc, #424]	; (8003e6c <UART_SetConfig+0x384>)
 8003cc2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	2164      	movs	r1, #100	; 0x64
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	3332      	adds	r3, #50	; 0x32
 8003cd4:	4a65      	ldr	r2, [pc, #404]	; (8003e6c <UART_SetConfig+0x384>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	f003 0207 	and.w	r2, r3, #7
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4442      	add	r2, r8
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	e26f      	b.n	80041ca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cea:	f7fe ffdf 	bl	8002cac <HAL_RCC_GetPCLK1Freq>
 8003cee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	461d      	mov	r5, r3
 8003cf4:	f04f 0600 	mov.w	r6, #0
 8003cf8:	46a8      	mov	r8, r5
 8003cfa:	46b1      	mov	r9, r6
 8003cfc:	eb18 0308 	adds.w	r3, r8, r8
 8003d00:	eb49 0409 	adc.w	r4, r9, r9
 8003d04:	4698      	mov	r8, r3
 8003d06:	46a1      	mov	r9, r4
 8003d08:	eb18 0805 	adds.w	r8, r8, r5
 8003d0c:	eb49 0906 	adc.w	r9, r9, r6
 8003d10:	f04f 0100 	mov.w	r1, #0
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d24:	4688      	mov	r8, r1
 8003d26:	4691      	mov	r9, r2
 8003d28:	eb18 0005 	adds.w	r0, r8, r5
 8003d2c:	eb49 0106 	adc.w	r1, r9, r6
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	461d      	mov	r5, r3
 8003d36:	f04f 0600 	mov.w	r6, #0
 8003d3a:	196b      	adds	r3, r5, r5
 8003d3c:	eb46 0406 	adc.w	r4, r6, r6
 8003d40:	461a      	mov	r2, r3
 8003d42:	4623      	mov	r3, r4
 8003d44:	f7fc fa46 	bl	80001d4 <__aeabi_uldivmod>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <UART_SetConfig+0x384>)
 8003d50:	fba3 2302 	umull	r2, r3, r3, r2
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	461d      	mov	r5, r3
 8003d5e:	f04f 0600 	mov.w	r6, #0
 8003d62:	46a9      	mov	r9, r5
 8003d64:	46b2      	mov	sl, r6
 8003d66:	eb19 0309 	adds.w	r3, r9, r9
 8003d6a:	eb4a 040a 	adc.w	r4, sl, sl
 8003d6e:	4699      	mov	r9, r3
 8003d70:	46a2      	mov	sl, r4
 8003d72:	eb19 0905 	adds.w	r9, r9, r5
 8003d76:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d8e:	4689      	mov	r9, r1
 8003d90:	4692      	mov	sl, r2
 8003d92:	eb19 0005 	adds.w	r0, r9, r5
 8003d96:	eb4a 0106 	adc.w	r1, sl, r6
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	461d      	mov	r5, r3
 8003da0:	f04f 0600 	mov.w	r6, #0
 8003da4:	196b      	adds	r3, r5, r5
 8003da6:	eb46 0406 	adc.w	r4, r6, r6
 8003daa:	461a      	mov	r2, r3
 8003dac:	4623      	mov	r3, r4
 8003dae:	f7fc fa11 	bl	80001d4 <__aeabi_uldivmod>
 8003db2:	4603      	mov	r3, r0
 8003db4:	460c      	mov	r4, r1
 8003db6:	461a      	mov	r2, r3
 8003db8:	4b2c      	ldr	r3, [pc, #176]	; (8003e6c <UART_SetConfig+0x384>)
 8003dba:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	2164      	movs	r1, #100	; 0x64
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	3332      	adds	r3, #50	; 0x32
 8003dcc:	4a27      	ldr	r2, [pc, #156]	; (8003e6c <UART_SetConfig+0x384>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dda:	4498      	add	r8, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	461d      	mov	r5, r3
 8003de0:	f04f 0600 	mov.w	r6, #0
 8003de4:	46a9      	mov	r9, r5
 8003de6:	46b2      	mov	sl, r6
 8003de8:	eb19 0309 	adds.w	r3, r9, r9
 8003dec:	eb4a 040a 	adc.w	r4, sl, sl
 8003df0:	4699      	mov	r9, r3
 8003df2:	46a2      	mov	sl, r4
 8003df4:	eb19 0905 	adds.w	r9, r9, r5
 8003df8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dfc:	f04f 0100 	mov.w	r1, #0
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e10:	4689      	mov	r9, r1
 8003e12:	4692      	mov	sl, r2
 8003e14:	eb19 0005 	adds.w	r0, r9, r5
 8003e18:	eb4a 0106 	adc.w	r1, sl, r6
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	461d      	mov	r5, r3
 8003e22:	f04f 0600 	mov.w	r6, #0
 8003e26:	196b      	adds	r3, r5, r5
 8003e28:	eb46 0406 	adc.w	r4, r6, r6
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4623      	mov	r3, r4
 8003e30:	f7fc f9d0 	bl	80001d4 <__aeabi_uldivmod>
 8003e34:	4603      	mov	r3, r0
 8003e36:	460c      	mov	r4, r1
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <UART_SetConfig+0x384>)
 8003e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	2164      	movs	r1, #100	; 0x64
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	3332      	adds	r3, #50	; 0x32
 8003e4e:	4a07      	ldr	r2, [pc, #28]	; (8003e6c <UART_SetConfig+0x384>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	f003 0207 	and.w	r2, r3, #7
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4442      	add	r2, r8
 8003e60:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e62:	e1b2      	b.n	80041ca <UART_SetConfig+0x6e2>
 8003e64:	40011000 	.word	0x40011000
 8003e68:	40011400 	.word	0x40011400
 8003e6c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4ad7      	ldr	r2, [pc, #860]	; (80041d4 <UART_SetConfig+0x6ec>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d005      	beq.n	8003e86 <UART_SetConfig+0x39e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4ad6      	ldr	r2, [pc, #856]	; (80041d8 <UART_SetConfig+0x6f0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	f040 80d1 	bne.w	8004028 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e86:	f7fe ff25 	bl	8002cd4 <HAL_RCC_GetPCLK2Freq>
 8003e8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	469a      	mov	sl, r3
 8003e90:	f04f 0b00 	mov.w	fp, #0
 8003e94:	46d0      	mov	r8, sl
 8003e96:	46d9      	mov	r9, fp
 8003e98:	eb18 0308 	adds.w	r3, r8, r8
 8003e9c:	eb49 0409 	adc.w	r4, r9, r9
 8003ea0:	4698      	mov	r8, r3
 8003ea2:	46a1      	mov	r9, r4
 8003ea4:	eb18 080a 	adds.w	r8, r8, sl
 8003ea8:	eb49 090b 	adc.w	r9, r9, fp
 8003eac:	f04f 0100 	mov.w	r1, #0
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003eb8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ebc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ec0:	4688      	mov	r8, r1
 8003ec2:	4691      	mov	r9, r2
 8003ec4:	eb1a 0508 	adds.w	r5, sl, r8
 8003ec8:	eb4b 0609 	adc.w	r6, fp, r9
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	f04f 0400 	mov.w	r4, #0
 8003ede:	0094      	lsls	r4, r2, #2
 8003ee0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ee4:	008b      	lsls	r3, r1, #2
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4623      	mov	r3, r4
 8003eea:	4628      	mov	r0, r5
 8003eec:	4631      	mov	r1, r6
 8003eee:	f7fc f971 	bl	80001d4 <__aeabi_uldivmod>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4bb8      	ldr	r3, [pc, #736]	; (80041dc <UART_SetConfig+0x6f4>)
 8003efa:	fba3 2302 	umull	r2, r3, r3, r2
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	469b      	mov	fp, r3
 8003f08:	f04f 0c00 	mov.w	ip, #0
 8003f0c:	46d9      	mov	r9, fp
 8003f0e:	46e2      	mov	sl, ip
 8003f10:	eb19 0309 	adds.w	r3, r9, r9
 8003f14:	eb4a 040a 	adc.w	r4, sl, sl
 8003f18:	4699      	mov	r9, r3
 8003f1a:	46a2      	mov	sl, r4
 8003f1c:	eb19 090b 	adds.w	r9, r9, fp
 8003f20:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f24:	f04f 0100 	mov.w	r1, #0
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f38:	4689      	mov	r9, r1
 8003f3a:	4692      	mov	sl, r2
 8003f3c:	eb1b 0509 	adds.w	r5, fp, r9
 8003f40:	eb4c 060a 	adc.w	r6, ip, sl
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	f04f 0400 	mov.w	r4, #0
 8003f56:	0094      	lsls	r4, r2, #2
 8003f58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f5c:	008b      	lsls	r3, r1, #2
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4623      	mov	r3, r4
 8003f62:	4628      	mov	r0, r5
 8003f64:	4631      	mov	r1, r6
 8003f66:	f7fc f935 	bl	80001d4 <__aeabi_uldivmod>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4b9a      	ldr	r3, [pc, #616]	; (80041dc <UART_SetConfig+0x6f4>)
 8003f72:	fba3 1302 	umull	r1, r3, r3, r2
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	2164      	movs	r1, #100	; 0x64
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	3332      	adds	r3, #50	; 0x32
 8003f84:	4a95      	ldr	r2, [pc, #596]	; (80041dc <UART_SetConfig+0x6f4>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f90:	4498      	add	r8, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	469b      	mov	fp, r3
 8003f96:	f04f 0c00 	mov.w	ip, #0
 8003f9a:	46d9      	mov	r9, fp
 8003f9c:	46e2      	mov	sl, ip
 8003f9e:	eb19 0309 	adds.w	r3, r9, r9
 8003fa2:	eb4a 040a 	adc.w	r4, sl, sl
 8003fa6:	4699      	mov	r9, r3
 8003fa8:	46a2      	mov	sl, r4
 8003faa:	eb19 090b 	adds.w	r9, r9, fp
 8003fae:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fb2:	f04f 0100 	mov.w	r1, #0
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fc6:	4689      	mov	r9, r1
 8003fc8:	4692      	mov	sl, r2
 8003fca:	eb1b 0509 	adds.w	r5, fp, r9
 8003fce:	eb4c 060a 	adc.w	r6, ip, sl
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	f04f 0400 	mov.w	r4, #0
 8003fe4:	0094      	lsls	r4, r2, #2
 8003fe6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fea:	008b      	lsls	r3, r1, #2
 8003fec:	461a      	mov	r2, r3
 8003fee:	4623      	mov	r3, r4
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	f7fc f8ee 	bl	80001d4 <__aeabi_uldivmod>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b77      	ldr	r3, [pc, #476]	; (80041dc <UART_SetConfig+0x6f4>)
 8004000:	fba3 1302 	umull	r1, r3, r3, r2
 8004004:	095b      	lsrs	r3, r3, #5
 8004006:	2164      	movs	r1, #100	; 0x64
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	3332      	adds	r3, #50	; 0x32
 8004012:	4a72      	ldr	r2, [pc, #456]	; (80041dc <UART_SetConfig+0x6f4>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	f003 020f 	and.w	r2, r3, #15
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4442      	add	r2, r8
 8004024:	609a      	str	r2, [r3, #8]
 8004026:	e0d0      	b.n	80041ca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7fe fe40 	bl	8002cac <HAL_RCC_GetPCLK1Freq>
 800402c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	469a      	mov	sl, r3
 8004032:	f04f 0b00 	mov.w	fp, #0
 8004036:	46d0      	mov	r8, sl
 8004038:	46d9      	mov	r9, fp
 800403a:	eb18 0308 	adds.w	r3, r8, r8
 800403e:	eb49 0409 	adc.w	r4, r9, r9
 8004042:	4698      	mov	r8, r3
 8004044:	46a1      	mov	r9, r4
 8004046:	eb18 080a 	adds.w	r8, r8, sl
 800404a:	eb49 090b 	adc.w	r9, r9, fp
 800404e:	f04f 0100 	mov.w	r1, #0
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800405a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800405e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004062:	4688      	mov	r8, r1
 8004064:	4691      	mov	r9, r2
 8004066:	eb1a 0508 	adds.w	r5, sl, r8
 800406a:	eb4b 0609 	adc.w	r6, fp, r9
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4619      	mov	r1, r3
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	f04f 0400 	mov.w	r4, #0
 8004080:	0094      	lsls	r4, r2, #2
 8004082:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004086:	008b      	lsls	r3, r1, #2
 8004088:	461a      	mov	r2, r3
 800408a:	4623      	mov	r3, r4
 800408c:	4628      	mov	r0, r5
 800408e:	4631      	mov	r1, r6
 8004090:	f7fc f8a0 	bl	80001d4 <__aeabi_uldivmod>
 8004094:	4603      	mov	r3, r0
 8004096:	460c      	mov	r4, r1
 8004098:	461a      	mov	r2, r3
 800409a:	4b50      	ldr	r3, [pc, #320]	; (80041dc <UART_SetConfig+0x6f4>)
 800409c:	fba3 2302 	umull	r2, r3, r3, r2
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	469b      	mov	fp, r3
 80040aa:	f04f 0c00 	mov.w	ip, #0
 80040ae:	46d9      	mov	r9, fp
 80040b0:	46e2      	mov	sl, ip
 80040b2:	eb19 0309 	adds.w	r3, r9, r9
 80040b6:	eb4a 040a 	adc.w	r4, sl, sl
 80040ba:	4699      	mov	r9, r3
 80040bc:	46a2      	mov	sl, r4
 80040be:	eb19 090b 	adds.w	r9, r9, fp
 80040c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040da:	4689      	mov	r9, r1
 80040dc:	4692      	mov	sl, r2
 80040de:	eb1b 0509 	adds.w	r5, fp, r9
 80040e2:	eb4c 060a 	adc.w	r6, ip, sl
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4619      	mov	r1, r3
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	f04f 0400 	mov.w	r4, #0
 80040f8:	0094      	lsls	r4, r2, #2
 80040fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040fe:	008b      	lsls	r3, r1, #2
 8004100:	461a      	mov	r2, r3
 8004102:	4623      	mov	r3, r4
 8004104:	4628      	mov	r0, r5
 8004106:	4631      	mov	r1, r6
 8004108:	f7fc f864 	bl	80001d4 <__aeabi_uldivmod>
 800410c:	4603      	mov	r3, r0
 800410e:	460c      	mov	r4, r1
 8004110:	461a      	mov	r2, r3
 8004112:	4b32      	ldr	r3, [pc, #200]	; (80041dc <UART_SetConfig+0x6f4>)
 8004114:	fba3 1302 	umull	r1, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	2164      	movs	r1, #100	; 0x64
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	3332      	adds	r3, #50	; 0x32
 8004126:	4a2d      	ldr	r2, [pc, #180]	; (80041dc <UART_SetConfig+0x6f4>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004132:	4498      	add	r8, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	469b      	mov	fp, r3
 8004138:	f04f 0c00 	mov.w	ip, #0
 800413c:	46d9      	mov	r9, fp
 800413e:	46e2      	mov	sl, ip
 8004140:	eb19 0309 	adds.w	r3, r9, r9
 8004144:	eb4a 040a 	adc.w	r4, sl, sl
 8004148:	4699      	mov	r9, r3
 800414a:	46a2      	mov	sl, r4
 800414c:	eb19 090b 	adds.w	r9, r9, fp
 8004150:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004154:	f04f 0100 	mov.w	r1, #0
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004160:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004164:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004168:	4689      	mov	r9, r1
 800416a:	4692      	mov	sl, r2
 800416c:	eb1b 0509 	adds.w	r5, fp, r9
 8004170:	eb4c 060a 	adc.w	r6, ip, sl
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4619      	mov	r1, r3
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	f04f 0300 	mov.w	r3, #0
 8004182:	f04f 0400 	mov.w	r4, #0
 8004186:	0094      	lsls	r4, r2, #2
 8004188:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800418c:	008b      	lsls	r3, r1, #2
 800418e:	461a      	mov	r2, r3
 8004190:	4623      	mov	r3, r4
 8004192:	4628      	mov	r0, r5
 8004194:	4631      	mov	r1, r6
 8004196:	f7fc f81d 	bl	80001d4 <__aeabi_uldivmod>
 800419a:	4603      	mov	r3, r0
 800419c:	460c      	mov	r4, r1
 800419e:	461a      	mov	r2, r3
 80041a0:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <UART_SetConfig+0x6f4>)
 80041a2:	fba3 1302 	umull	r1, r3, r3, r2
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	2164      	movs	r1, #100	; 0x64
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	3332      	adds	r3, #50	; 0x32
 80041b4:	4a09      	ldr	r2, [pc, #36]	; (80041dc <UART_SetConfig+0x6f4>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	f003 020f 	and.w	r2, r3, #15
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4442      	add	r2, r8
 80041c6:	609a      	str	r2, [r3, #8]
}
 80041c8:	e7ff      	b.n	80041ca <UART_SetConfig+0x6e2>
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d4:	40011000 	.word	0x40011000
 80041d8:	40011400 	.word	0x40011400
 80041dc:	51eb851f 	.word	0x51eb851f

080041e0 <__libc_init_array>:
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	4e0d      	ldr	r6, [pc, #52]	; (8004218 <__libc_init_array+0x38>)
 80041e4:	4c0d      	ldr	r4, [pc, #52]	; (800421c <__libc_init_array+0x3c>)
 80041e6:	1ba4      	subs	r4, r4, r6
 80041e8:	10a4      	asrs	r4, r4, #2
 80041ea:	2500      	movs	r5, #0
 80041ec:	42a5      	cmp	r5, r4
 80041ee:	d109      	bne.n	8004204 <__libc_init_array+0x24>
 80041f0:	4e0b      	ldr	r6, [pc, #44]	; (8004220 <__libc_init_array+0x40>)
 80041f2:	4c0c      	ldr	r4, [pc, #48]	; (8004224 <__libc_init_array+0x44>)
 80041f4:	f000 f820 	bl	8004238 <_init>
 80041f8:	1ba4      	subs	r4, r4, r6
 80041fa:	10a4      	asrs	r4, r4, #2
 80041fc:	2500      	movs	r5, #0
 80041fe:	42a5      	cmp	r5, r4
 8004200:	d105      	bne.n	800420e <__libc_init_array+0x2e>
 8004202:	bd70      	pop	{r4, r5, r6, pc}
 8004204:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004208:	4798      	blx	r3
 800420a:	3501      	adds	r5, #1
 800420c:	e7ee      	b.n	80041ec <__libc_init_array+0xc>
 800420e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004212:	4798      	blx	r3
 8004214:	3501      	adds	r5, #1
 8004216:	e7f2      	b.n	80041fe <__libc_init_array+0x1e>
 8004218:	08004270 	.word	0x08004270
 800421c:	08004270 	.word	0x08004270
 8004220:	08004270 	.word	0x08004270
 8004224:	08004274 	.word	0x08004274

08004228 <memset>:
 8004228:	4402      	add	r2, r0
 800422a:	4603      	mov	r3, r0
 800422c:	4293      	cmp	r3, r2
 800422e:	d100      	bne.n	8004232 <memset+0xa>
 8004230:	4770      	bx	lr
 8004232:	f803 1b01 	strb.w	r1, [r3], #1
 8004236:	e7f9      	b.n	800422c <memset+0x4>

08004238 <_init>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	bf00      	nop
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr

08004244 <_fini>:
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004246:	bf00      	nop
 8004248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424a:	bc08      	pop	{r3}
 800424c:	469e      	mov	lr, r3
 800424e:	4770      	bx	lr


Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004088  08004088  00014088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a0  080040a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040a8  080040a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  080040bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080040bc  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6c2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001989  00000000  00000000  0002c6fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e00  00000000  00000000  0002e088  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d60  00000000  00000000  0002ee88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015910  00000000  00000000  0002fbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094b7  00000000  00000000  000454f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a3dc  00000000  00000000  0004e9af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8d8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c30  00000000  00000000  000d8e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004070 	.word	0x08004070

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004070 	.word	0x08004070

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ADXL345_Write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ADXL345_Write(uint8_t reg, uint8_t value){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af02      	add	r7, sp, #8
 80004da:	4603      	mov	r3, r0
 80004dc:	460a      	mov	r2, r1
 80004de:	71fb      	strb	r3, [r7, #7]
 80004e0:	4613      	mov	r3, r2
 80004e2:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 80004e8:	79bb      	ldrb	r3, [r7, #6]
 80004ea:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, adxl_address, data, 2, 10);
 80004ec:	f107 020c 	add.w	r2, r7, #12
 80004f0:	230a      	movs	r3, #10
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2302      	movs	r3, #2
 80004f6:	21a6      	movs	r1, #166	; 0xa6
 80004f8:	4803      	ldr	r0, [pc, #12]	; (8000508 <ADXL345_Write+0x34>)
 80004fa:	f001 f8a5 	bl	8001648 <HAL_I2C_Master_Transmit>
}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000030 	.word	0x20000030

0800050c <ADXL345_Read>:

void ADXL345_Read(uint8_t reg, uint8_t numberOfBytes){
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af04      	add	r7, sp, #16
 8000512:	4603      	mov	r3, r0
 8000514:	460a      	mov	r2, r1
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	4613      	mov	r3, r2
 800051a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, adxl_address, reg, 1, data_rec, numberOfBytes, 100);
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	b299      	uxth	r1, r3
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	b29b      	uxth	r3, r3
 8000524:	2264      	movs	r2, #100	; 0x64
 8000526:	9202      	str	r2, [sp, #8]
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <ADXL345_Read+0x38>)
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2301      	movs	r3, #1
 8000530:	460a      	mov	r2, r1
 8000532:	21a6      	movs	r1, #166	; 0xa6
 8000534:	4804      	ldr	r0, [pc, #16]	; (8000548 <ADXL345_Read+0x3c>)
 8000536:	f001 f985 	bl	8001844 <HAL_I2C_Mem_Read>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000148 	.word	0x20000148
 8000548:	20000030 	.word	0x20000030

0800054c <ADXL345_Init>:

void ADXL345_Init(){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	ADXL345_Read(0x00, 1);	//0xE5
 8000550:	2101      	movs	r1, #1
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ffda 	bl	800050c <ADXL345_Read>

	ADXL345_Write(0x2d, 0);		// reset all bits
 8000558:	2100      	movs	r1, #0
 800055a:	202d      	movs	r0, #45	; 0x2d
 800055c:	f7ff ffba 	bl	80004d4 <ADXL345_Write>
	ADXL345_Write(0x2d, 0x08);
 8000560:	2108      	movs	r1, #8
 8000562:	202d      	movs	r0, #45	; 0x2d
 8000564:	f7ff ffb6 	bl	80004d4 <ADXL345_Write>
	ADXL345_Write(0x31, 0x01);
 8000568:	2101      	movs	r1, #1
 800056a:	2031      	movs	r0, #49	; 0x31
 800056c:	f7ff ffb2 	bl	80004d4 <ADXL345_Write>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <readValues>:


void readValues(){
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	if(updateReady==1){
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <readValues+0x1c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d102      	bne.n	8000586 <readValues+0x12>
		// read ADXL x and y value


		// reset
		updateReady = 0;
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <readValues+0x1c>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
	}
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	20000028 	.word	0x20000028

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fbe6 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f814 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f98c 	bl	80008bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 f960 	bl	8000868 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005a8:	f000 f87a 	bl	80006a0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80005ac:	f000 f8a6 	bl	80006fc <MX_TIM1_Init>
  MX_TIM3_Init();
 80005b0:	f000 f8f6 	bl	80007a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  ADXL345_Init();
 80005b4:	f7ff ffca 	bl	800054c <ADXL345_Init>
  HAL_TIM_Base_Start_IT(&htim1);	// start 5 Hz interrupt
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <main+0x30>)
 80005ba:	f002 fb3e 	bl	8002c3a <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  readValues();
 80005be:	f7ff ffd9 	bl	8000574 <readValues>
 80005c2:	e7fc      	b.n	80005be <main+0x2a>
 80005c4:	200000c4 	.word	0x200000c4

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fd42 	bl	8004060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b29      	ldr	r3, [pc, #164]	; (8000698 <SystemClock_Config+0xd0>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a28      	ldr	r2, [pc, #160]	; (8000698 <SystemClock_Config+0xd0>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b26      	ldr	r3, [pc, #152]	; (8000698 <SystemClock_Config+0xd0>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <SystemClock_Config+0xd4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <SystemClock_Config+0xd4>)
 8000616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800063c:	2310      	movs	r3, #16
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000640:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000646:	2304      	movs	r3, #4
 8000648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800064a:	2307      	movs	r3, #7
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fe64 	bl	8002320 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800065e:	f000 f9c6 	bl	80009ee <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2102      	movs	r1, #2
 800067e:	4618      	mov	r0, r3
 8000680:	f002 f8be 	bl	8002800 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800068a:	f000 f9b0 	bl	80009ee <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	; 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <MX_I2C1_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_I2C1_Init+0x58>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006de:	f000 fe7b 	bl	80013d8 <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 f981 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000030 	.word	0x20000030
 80006f4:	40005400 	.word	0x40005400
 80006f8:	000186a0 	.word	0x000186a0

080006fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_TIM1_Init+0x9c>)
 800071a:	4a20      	ldr	r2, [pc, #128]	; (800079c <MX_TIM1_Init+0xa0>)
 800071c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8399;
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_TIM1_Init+0x9c>)
 8000720:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000724:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_TIM1_Init+0x9c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_TIM1_Init+0x9c>)
 800072e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000732:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_TIM1_Init+0x9c>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_TIM1_Init+0x9c>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_TIM1_Init+0x9c>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000746:	4814      	ldr	r0, [pc, #80]	; (8000798 <MX_TIM1_Init+0x9c>)
 8000748:	f002 fa4c 	bl	8002be4 <HAL_TIM_Base_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000752:	f000 f94c 	bl	80009ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	4619      	mov	r1, r3
 8000762:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_TIM1_Init+0x9c>)
 8000764:	f002 fc86 	bl	8003074 <HAL_TIM_ConfigClockSource>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800076e:	f000 f93e 	bl	80009ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <MX_TIM1_Init+0x9c>)
 8000780:	f002 fffe 	bl	8003780 <HAL_TIMEx_MasterConfigSynchronization>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800078a:	f000 f930 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000c4 	.word	0x200000c4
 800079c:	40010000 	.word	0x40010000

080007a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <MX_TIM3_Init+0xc0>)
 80007c4:	4a27      	ldr	r2, [pc, #156]	; (8000864 <MX_TIM3_Init+0xc4>)
 80007c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <MX_TIM3_Init+0xc0>)
 80007ca:	2253      	movs	r2, #83	; 0x53
 80007cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <MX_TIM3_Init+0xc0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_TIM3_Init+0xc0>)
 80007d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <MX_TIM3_Init+0xc0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_TIM3_Init+0xc0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007e8:	481d      	ldr	r0, [pc, #116]	; (8000860 <MX_TIM3_Init+0xc0>)
 80007ea:	f002 fa4a 	bl	8002c82 <HAL_TIM_PWM_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80007f4:	f000 f8fb 	bl	80009ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4619      	mov	r1, r3
 8000806:	4816      	ldr	r0, [pc, #88]	; (8000860 <MX_TIM3_Init+0xc0>)
 8000808:	f002 ffba 	bl	8003780 <HAL_TIMEx_MasterConfigSynchronization>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000812:	f000 f8ec 	bl	80009ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000816:	2360      	movs	r3, #96	; 0x60
 8000818:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	4619      	mov	r1, r3
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_TIM3_Init+0xc0>)
 800082e:	f002 fb5b 	bl	8002ee8 <HAL_TIM_PWM_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000838:	f000 f8d9 	bl	80009ee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2204      	movs	r2, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <MX_TIM3_Init+0xc0>)
 8000844:	f002 fb50 	bl	8002ee8 <HAL_TIM_PWM_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800084e:	f000 f8ce 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000852:	4803      	ldr	r0, [pc, #12]	; (8000860 <MX_TIM3_Init+0xc0>)
 8000854:	f000 f98a 	bl	8000b6c <HAL_TIM_MspPostInit>

}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000084 	.word	0x20000084
 8000864:	40000400 	.word	0x40000400

08000868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_USART2_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f002 fff0 	bl	8003884 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f000 f8a0 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000108 	.word	0x20000108
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b31      	ldr	r3, [pc, #196]	; (800099c <MX_GPIO_Init+0xe0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a30      	ldr	r2, [pc, #192]	; (800099c <MX_GPIO_Init+0xe0>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b2e      	ldr	r3, [pc, #184]	; (800099c <MX_GPIO_Init+0xe0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <MX_GPIO_Init+0xe0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a29      	ldr	r2, [pc, #164]	; (800099c <MX_GPIO_Init+0xe0>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <MX_GPIO_Init+0xe0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <MX_GPIO_Init+0xe0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a22      	ldr	r2, [pc, #136]	; (800099c <MX_GPIO_Init+0xe0>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <MX_GPIO_Init+0xe0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_GPIO_Init+0xe0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a1b      	ldr	r2, [pc, #108]	; (800099c <MX_GPIO_Init+0xe0>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_GPIO_Init+0xe0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2120      	movs	r1, #32
 8000946:	4816      	ldr	r0, [pc, #88]	; (80009a0 <MX_GPIO_Init+0xe4>)
 8000948:	f000 fd14 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_GPIO_Init+0xe8>)
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4811      	ldr	r0, [pc, #68]	; (80009a8 <MX_GPIO_Init+0xec>)
 8000962:	f000 fb85 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000966:	2320      	movs	r3, #32
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4808      	ldr	r0, [pc, #32]	; (80009a0 <MX_GPIO_Init+0xe4>)
 800097e:	f000 fb77 	bl	8001070 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2028      	movs	r0, #40	; 0x28
 8000988:	f000 fb3b 	bl	8001002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800098c:	2028      	movs	r0, #40	; 0x28
 800098e:	f000 fb54 	bl	800103a <HAL_NVIC_EnableIRQ>

}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000
 80009a4:	10210000 	.word	0x10210000
 80009a8:	40020800 	.word	0x40020800

080009ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// 5Hz update
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d102      	bne.n	80009c4 <HAL_TIM_PeriodElapsedCallback+0x18>
		updateReady = 1;
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
	}
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	40010000 	.word	0x40010000
 80009d4:	20000028 	.word	0x20000028

080009d8 <HAL_GPIO_EXTI_Callback>:

// calibrate button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin){
		//
	}
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f2:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x6>
	...

080009f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a36:	2007      	movs	r0, #7
 8000a38:	f000 fad8 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_I2C_MspInit+0x84>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12b      	bne.n	8000ac2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a86:	23c0      	movs	r3, #192	; 0xc0
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8a:	2312      	movs	r3, #18
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a96:	2304      	movs	r3, #4
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <HAL_I2C_MspInit+0x8c>)
 8000aa2:	f000 fae5 	bl	8001070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_TIM_Base_MspInit+0x48>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d115      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_TIM_Base_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a0c      	ldr	r2, [pc, #48]	; (8000b24 <HAL_TIM_Base_MspInit+0x4c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_TIM_Base_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2019      	movs	r0, #25
 8000b0c:	f000 fa79 	bl	8001002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b10:	2019      	movs	r0, #25
 8000b12:	f000 fa92 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40010000 	.word	0x40010000
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d10d      	bne.n	8000b56 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_TIM_PWM_MspInit+0x40>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a09      	ldr	r2, [pc, #36]	; (8000b68 <HAL_TIM_PWM_MspInit+0x40>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <HAL_TIM_PWM_MspInit+0x40>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40000400 	.word	0x40000400
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <HAL_TIM_MspPostInit+0x68>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d11d      	bne.n	8000bca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_TIM_MspPostInit+0x6c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <HAL_TIM_MspPostInit+0x6c>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_TIM_MspPostInit+0x6c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000baa:	23c0      	movs	r3, #192	; 0xc0
 8000bac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <HAL_TIM_MspPostInit+0x70>)
 8000bc6:	f000 fa53 	bl	8001070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3720      	adds	r7, #32
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40000400 	.word	0x40000400
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000

08000be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_UART_MspInit+0x84>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12b      	bne.n	8000c5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_UART_MspInit+0x8c>)
 8000c56:	f000 fa0b 	bl	8001070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	; 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40004400 	.word	0x40004400
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f8a6 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cca:	f002 f805 	bl	8002cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000c4 	.word	0x200000c4

08000cd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ce0:	f000 fb62 	bl	80013a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <SystemInit+0x28>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf2:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <SystemInit+0x28>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <SystemInit+0x28>)
 8000cfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d02:	609a      	str	r2, [r3, #8]
#endif
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d1a:	e003      	b.n	8000d24 <LoopCopyDataInit>

08000d1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d22:	3104      	adds	r1, #4

08000d24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d2c:	d3f6      	bcc.n	8000d1c <CopyDataInit>
  ldr  r2, =_sbss
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d30:	e002      	b.n	8000d38 <LoopFillZerobss>

08000d32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d34:	f842 3b04 	str.w	r3, [r2], #4

08000d38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d3c:	d3f9      	bcc.n	8000d32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d3e:	f7ff ffd3 	bl	8000ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d42:	f003 f969 	bl	8004018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d46:	f7ff fc25 	bl	8000594 <main>
  bx  lr    
 8000d4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d4c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000d50:	080040b0 	.word	0x080040b0
  ldr  r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d58:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000d5c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000d60:	20000154 	.word	0x20000154

08000d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <HAL_Init+0x40>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_Init+0x40>)
 8000d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_Init+0x40>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f92b 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 f808 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff fe2c 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f943 	bl	8001056 <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00e      	b.n	8000df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d80a      	bhi.n	8000df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f000 f90b 	bl	8001002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <HAL_InitTick+0x5c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000150 	.word	0x20000150

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000150 	.word	0x20000150

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0b      	blt.n	8000eda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4907      	ldr	r1, [pc, #28]	; (8000ee8 <__NVIC_EnableIRQ+0x38>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f7ff ff8e 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff29 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff3e 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff8e 	bl	8000f40 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5d 	bl	8000eec <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff31 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffa2 	bl	8000fa8 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	e159      	b.n	8001340 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	f040 8148 	bne.w	800133a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d00b      	beq.n	80010ca <HAL_GPIO_Init+0x5a>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010be:	2b11      	cmp	r3, #17
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b12      	cmp	r3, #18
 80010c8:	d130      	bne.n	800112c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0xfc>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b12      	cmp	r3, #18
 800116a:	d123      	bne.n	80011b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	08da      	lsrs	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3208      	adds	r2, #8
 8001174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	08da      	lsrs	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3208      	adds	r2, #8
 80011ae:	69b9      	ldr	r1, [r7, #24]
 80011b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0203 	and.w	r2, r3, #3
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80a2 	beq.w	800133a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b56      	ldr	r3, [pc, #344]	; (8001354 <HAL_GPIO_Init+0x2e4>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a55      	ldr	r2, [pc, #340]	; (8001354 <HAL_GPIO_Init+0x2e4>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b53      	ldr	r3, [pc, #332]	; (8001354 <HAL_GPIO_Init+0x2e4>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001212:	4a51      	ldr	r2, [pc, #324]	; (8001358 <HAL_GPIO_Init+0x2e8>)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a48      	ldr	r2, [pc, #288]	; (800135c <HAL_GPIO_Init+0x2ec>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d019      	beq.n	8001272 <HAL_GPIO_Init+0x202>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a47      	ldr	r2, [pc, #284]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0x1fe>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a46      	ldr	r2, [pc, #280]	; (8001364 <HAL_GPIO_Init+0x2f4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00d      	beq.n	800126a <HAL_GPIO_Init+0x1fa>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a45      	ldr	r2, [pc, #276]	; (8001368 <HAL_GPIO_Init+0x2f8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x1f6>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a44      	ldr	r2, [pc, #272]	; (800136c <HAL_GPIO_Init+0x2fc>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_GPIO_Init+0x1f2>
 800125e:	2304      	movs	r3, #4
 8001260:	e008      	b.n	8001274 <HAL_GPIO_Init+0x204>
 8001262:	2307      	movs	r3, #7
 8001264:	e006      	b.n	8001274 <HAL_GPIO_Init+0x204>
 8001266:	2303      	movs	r3, #3
 8001268:	e004      	b.n	8001274 <HAL_GPIO_Init+0x204>
 800126a:	2302      	movs	r3, #2
 800126c:	e002      	b.n	8001274 <HAL_GPIO_Init+0x204>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <HAL_GPIO_Init+0x204>
 8001272:	2300      	movs	r3, #0
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	f002 0203 	and.w	r2, r2, #3
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	4093      	lsls	r3, r2
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001284:	4934      	ldr	r1, [pc, #208]	; (8001358 <HAL_GPIO_Init+0x2e8>)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001292:	4b37      	ldr	r3, [pc, #220]	; (8001370 <HAL_GPIO_Init+0x300>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b6:	4a2e      	ldr	r2, [pc, #184]	; (8001370 <HAL_GPIO_Init+0x300>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012bc:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <HAL_GPIO_Init+0x300>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e0:	4a23      	ldr	r2, [pc, #140]	; (8001370 <HAL_GPIO_Init+0x300>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e6:	4b22      	ldr	r3, [pc, #136]	; (8001370 <HAL_GPIO_Init+0x300>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130a:	4a19      	ldr	r2, [pc, #100]	; (8001370 <HAL_GPIO_Init+0x300>)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <HAL_GPIO_Init+0x300>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <HAL_GPIO_Init+0x300>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	2b0f      	cmp	r3, #15
 8001344:	f67f aea2 	bls.w	800108c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001348:	bf00      	nop
 800134a:	3724      	adds	r7, #36	; 0x24
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40023800 	.word	0x40023800
 8001358:	40013800 	.word	0x40013800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40020800 	.word	0x40020800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40021000 	.word	0x40021000
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001390:	e003      	b.n	800139a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	041a      	lsls	r2, r3, #16
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b4:	695a      	ldr	r2, [r3, #20]
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d006      	beq.n	80013cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fb06 	bl	80009d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40013c00 	.word	0x40013c00

080013d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e11f      	b.n	800162a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d106      	bne.n	8001404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fb22 	bl	8000a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2224      	movs	r2, #36	; 0x24
 8001408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0201 	bic.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800142a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800143a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800143c:	f001 fbaa 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8001440:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4a7b      	ldr	r2, [pc, #492]	; (8001634 <HAL_I2C_Init+0x25c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d807      	bhi.n	800145c <HAL_I2C_Init+0x84>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4a7a      	ldr	r2, [pc, #488]	; (8001638 <HAL_I2C_Init+0x260>)
 8001450:	4293      	cmp	r3, r2
 8001452:	bf94      	ite	ls
 8001454:	2301      	movls	r3, #1
 8001456:	2300      	movhi	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	e006      	b.n	800146a <HAL_I2C_Init+0x92>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4a77      	ldr	r2, [pc, #476]	; (800163c <HAL_I2C_Init+0x264>)
 8001460:	4293      	cmp	r3, r2
 8001462:	bf94      	ite	ls
 8001464:	2301      	movls	r3, #1
 8001466:	2300      	movhi	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e0db      	b.n	800162a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4a72      	ldr	r2, [pc, #456]	; (8001640 <HAL_I2C_Init+0x268>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	0c9b      	lsrs	r3, r3, #18
 800147c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	430a      	orrs	r2, r1
 8001490:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a64      	ldr	r2, [pc, #400]	; (8001634 <HAL_I2C_Init+0x25c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d802      	bhi.n	80014ac <HAL_I2C_Init+0xd4>
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	3301      	adds	r3, #1
 80014aa:	e009      	b.n	80014c0 <HAL_I2C_Init+0xe8>
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	4a63      	ldr	r2, [pc, #396]	; (8001644 <HAL_I2C_Init+0x26c>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	099b      	lsrs	r3, r3, #6
 80014be:	3301      	adds	r3, #1
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	430b      	orrs	r3, r1
 80014c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4956      	ldr	r1, [pc, #344]	; (8001634 <HAL_I2C_Init+0x25c>)
 80014dc:	428b      	cmp	r3, r1
 80014de:	d80d      	bhi.n	80014fc <HAL_I2C_Init+0x124>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	1e59      	subs	r1, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ee:	3301      	adds	r3, #1
 80014f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	bf38      	it	cc
 80014f8:	2304      	movcc	r3, #4
 80014fa:	e04f      	b.n	800159c <HAL_I2C_Init+0x1c4>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d111      	bne.n	8001528 <HAL_I2C_Init+0x150>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1e58      	subs	r0, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6859      	ldr	r1, [r3, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	440b      	add	r3, r1
 8001512:	fbb0 f3f3 	udiv	r3, r0, r3
 8001516:	3301      	adds	r3, #1
 8001518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151c:	2b00      	cmp	r3, #0
 800151e:	bf0c      	ite	eq
 8001520:	2301      	moveq	r3, #1
 8001522:	2300      	movne	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	e012      	b.n	800154e <HAL_I2C_Init+0x176>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1e58      	subs	r0, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	0099      	lsls	r1, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	fbb0 f3f3 	udiv	r3, r0, r3
 800153e:	3301      	adds	r3, #1
 8001540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_I2C_Init+0x17e>
 8001552:	2301      	movs	r3, #1
 8001554:	e022      	b.n	800159c <HAL_I2C_Init+0x1c4>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10e      	bne.n	800157c <HAL_I2C_Init+0x1a4>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1e58      	subs	r0, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6859      	ldr	r1, [r3, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	440b      	add	r3, r1
 800156c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001570:	3301      	adds	r3, #1
 8001572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800157a:	e00f      	b.n	800159c <HAL_I2C_Init+0x1c4>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1e58      	subs	r0, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	0099      	lsls	r1, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001592:	3301      	adds	r3, #1
 8001594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001598:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	6809      	ldr	r1, [r1, #0]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69da      	ldr	r2, [r3, #28]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6911      	ldr	r1, [r2, #16]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68d2      	ldr	r2, [r2, #12]
 80015d6:	4311      	orrs	r1, r2
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	430b      	orrs	r3, r1
 80015de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0201 	orr.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2220      	movs	r2, #32
 8001616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	000186a0 	.word	0x000186a0
 8001638:	001e847f 	.word	0x001e847f
 800163c:	003d08ff 	.word	0x003d08ff
 8001640:	431bde83 	.word	0x431bde83
 8001644:	10624dd3 	.word	0x10624dd3

08001648 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af02      	add	r7, sp, #8
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	461a      	mov	r2, r3
 8001654:	460b      	mov	r3, r1
 8001656:	817b      	strh	r3, [r7, #10]
 8001658:	4613      	mov	r3, r2
 800165a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff fbea 	bl	8000e34 <HAL_GetTick>
 8001660:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b20      	cmp	r3, #32
 800166c:	f040 80e0 	bne.w	8001830 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2319      	movs	r3, #25
 8001676:	2201      	movs	r2, #1
 8001678:	4970      	ldr	r1, [pc, #448]	; (800183c <HAL_I2C_Master_Transmit+0x1f4>)
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 fc72 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001686:	2302      	movs	r3, #2
 8001688:	e0d3      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_I2C_Master_Transmit+0x50>
 8001694:	2302      	movs	r3, #2
 8001696:	e0cc      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1ea>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d007      	beq.n	80016be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0201 	orr.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2221      	movs	r2, #33	; 0x21
 80016d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2210      	movs	r2, #16
 80016da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	893a      	ldrh	r2, [r7, #8]
 80016ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4a50      	ldr	r2, [pc, #320]	; (8001840 <HAL_I2C_Master_Transmit+0x1f8>)
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001700:	8979      	ldrh	r1, [r7, #10]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	6a3a      	ldr	r2, [r7, #32]
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 fac2 	bl	8001c90 <I2C_MasterRequestWrite>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e08d      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800172c:	e066      	b.n	80017fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	6a39      	ldr	r1, [r7, #32]
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 fcec 	bl	8002110 <I2C_WaitOnTXEFlagUntilTimeout>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00d      	beq.n	800175a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	2b04      	cmp	r3, #4
 8001744:	d107      	bne.n	8001756 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001754:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e06b      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	781a      	ldrb	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001774:	b29b      	uxth	r3, r3
 8001776:	3b01      	subs	r3, #1
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001782:	3b01      	subs	r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b04      	cmp	r3, #4
 8001796:	d11b      	bne.n	80017d0 <HAL_I2C_Master_Transmit+0x188>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179c:	2b00      	cmp	r3, #0
 800179e:	d017      	beq.n	80017d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	6a39      	ldr	r1, [r7, #32]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 fcdc 	bl	8002192 <I2C_WaitOnBTFFlagUntilTimeout>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00d      	beq.n	80017fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d107      	bne.n	80017f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e01a      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001800:	2b00      	cmp	r3, #0
 8001802:	d194      	bne.n	800172e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2220      	movs	r2, #32
 8001818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	e000      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001830:	2302      	movs	r3, #2
  }
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	00100002 	.word	0x00100002
 8001840:	ffff0000 	.word	0xffff0000

08001844 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08c      	sub	sp, #48	; 0x30
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	4608      	mov	r0, r1
 800184e:	4611      	mov	r1, r2
 8001850:	461a      	mov	r2, r3
 8001852:	4603      	mov	r3, r0
 8001854:	817b      	strh	r3, [r7, #10]
 8001856:	460b      	mov	r3, r1
 8001858:	813b      	strh	r3, [r7, #8]
 800185a:	4613      	mov	r3, r2
 800185c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800185e:	f7ff fae9 	bl	8000e34 <HAL_GetTick>
 8001862:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b20      	cmp	r3, #32
 800186e:	f040 8208 	bne.w	8001c82 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2319      	movs	r3, #25
 8001878:	2201      	movs	r2, #1
 800187a:	497b      	ldr	r1, [pc, #492]	; (8001a68 <HAL_I2C_Mem_Read+0x224>)
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 fb71 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001888:	2302      	movs	r3, #2
 800188a:	e1fb      	b.n	8001c84 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_I2C_Mem_Read+0x56>
 8001896:	2302      	movs	r3, #2
 8001898:	e1f4      	b.n	8001c84 <HAL_I2C_Mem_Read+0x440>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d007      	beq.n	80018c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0201 	orr.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2222      	movs	r2, #34	; 0x22
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2240      	movs	r2, #64	; 0x40
 80018dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80018f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4a5b      	ldr	r2, [pc, #364]	; (8001a6c <HAL_I2C_Mem_Read+0x228>)
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001902:	88f8      	ldrh	r0, [r7, #6]
 8001904:	893a      	ldrh	r2, [r7, #8]
 8001906:	8979      	ldrh	r1, [r7, #10]
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	4603      	mov	r3, r0
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 fa3e 	bl	8001d94 <I2C_RequestMemoryRead>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e1b0      	b.n	8001c84 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001926:	2b00      	cmp	r3, #0
 8001928:	d113      	bne.n	8001952 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	623b      	str	r3, [r7, #32]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	623b      	str	r3, [r7, #32]
 800193e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	e184      	b.n	8001c5c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001956:	2b01      	cmp	r3, #1
 8001958:	d11b      	bne.n	8001992 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001968:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	e164      	b.n	8001c5c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001996:	2b02      	cmp	r3, #2
 8001998:	d11b      	bne.n	80019d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	e144      	b.n	8001c5c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80019e8:	e138      	b.n	8001c5c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	f200 80f1 	bhi.w	8001bd6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d123      	bne.n	8001a44 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 fc07 	bl	8002214 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e139      	b.n	8001c84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a42:	e10b      	b.n	8001c5c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d14e      	bne.n	8001aea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a52:	2200      	movs	r2, #0
 8001a54:	4906      	ldr	r1, [pc, #24]	; (8001a70 <HAL_I2C_Mem_Read+0x22c>)
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 fa84 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e10e      	b.n	8001c84 <HAL_I2C_Mem_Read+0x440>
 8001a66:	bf00      	nop
 8001a68:	00100002 	.word	0x00100002
 8001a6c:	ffff0000 	.word	0xffff0000
 8001a70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ae8:	e0b8      	b.n	8001c5c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af0:	2200      	movs	r2, #0
 8001af2:	4966      	ldr	r1, [pc, #408]	; (8001c8c <HAL_I2C_Mem_Read+0x448>)
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 fa35 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0bf      	b.n	8001c84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	494f      	ldr	r1, [pc, #316]	; (8001c8c <HAL_I2C_Mem_Read+0x448>)
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 fa07 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e091      	b.n	8001c84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bd4:	e042      	b.n	8001c5c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 fb1a 	bl	8002214 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e04c      	b.n	8001c84 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d118      	bne.n	8001c5c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f47f aec2 	bne.w	80019ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c82:	2302      	movs	r3, #2
  }
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3728      	adds	r7, #40	; 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	00010004 	.word	0x00010004

08001c90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d006      	beq.n	8001cba <I2C_MasterRequestWrite+0x2a>
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d003      	beq.n	8001cba <I2C_MasterRequestWrite+0x2a>
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cb8:	d108      	bne.n	8001ccc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e00b      	b.n	8001ce4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	2b12      	cmp	r3, #18
 8001cd2:	d107      	bne.n	8001ce4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ce2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f937 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00d      	beq.n	8001d18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d0a:	d103      	bne.n	8001d14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e035      	b.n	8001d84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d20:	d108      	bne.n	8001d34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d22:	897b      	ldrh	r3, [r7, #10]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d30:	611a      	str	r2, [r3, #16]
 8001d32:	e01b      	b.n	8001d6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d34:	897b      	ldrh	r3, [r7, #10]
 8001d36:	11db      	asrs	r3, r3, #7
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	f003 0306 	and.w	r3, r3, #6
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f063 030f 	orn	r3, r3, #15
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	490e      	ldr	r1, [pc, #56]	; (8001d8c <I2C_MasterRequestWrite+0xfc>)
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f95d 	bl	8002012 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e010      	b.n	8001d84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d62:	897b      	ldrh	r3, [r7, #10]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4907      	ldr	r1, [pc, #28]	; (8001d90 <I2C_MasterRequestWrite+0x100>)
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f94d 	bl	8002012 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	00010008 	.word	0x00010008
 8001d90:	00010002 	.word	0x00010002

08001d94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	4608      	mov	r0, r1
 8001d9e:	4611      	mov	r1, r2
 8001da0:	461a      	mov	r2, r3
 8001da2:	4603      	mov	r3, r0
 8001da4:	817b      	strh	r3, [r7, #10]
 8001da6:	460b      	mov	r3, r1
 8001da8:	813b      	strh	r3, [r7, #8]
 8001daa:	4613      	mov	r3, r2
 8001dac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f8c2 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00d      	beq.n	8001e02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001df4:	d103      	bne.n	8001dfe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e0aa      	b.n	8001f58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e02:	897b      	ldrh	r3, [r7, #10]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	6a3a      	ldr	r2, [r7, #32]
 8001e16:	4952      	ldr	r1, [pc, #328]	; (8001f60 <I2C_RequestMemoryRead+0x1cc>)
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f8fa 	bl	8002012 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e097      	b.n	8001f58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e40:	6a39      	ldr	r1, [r7, #32]
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f964 	bl	8002110 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00d      	beq.n	8001e6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d107      	bne.n	8001e66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e076      	b.n	8001f58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e70:	893b      	ldrh	r3, [r7, #8]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	611a      	str	r2, [r3, #16]
 8001e7a:	e021      	b.n	8001ec0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e7c:	893b      	ldrh	r3, [r7, #8]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8c:	6a39      	ldr	r1, [r7, #32]
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 f93e 	bl	8002110 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00d      	beq.n	8001eb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d107      	bne.n	8001eb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e050      	b.n	8001f58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001eb6:	893b      	ldrh	r3, [r7, #8]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec2:	6a39      	ldr	r1, [r7, #32]
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f923 	bl	8002110 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d107      	bne.n	8001ee8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e035      	b.n	8001f58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001efa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f82b 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00d      	beq.n	8001f30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f22:	d103      	bne.n	8001f2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e013      	b.n	8001f58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f30:	897b      	ldrh	r3, [r7, #10]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	6a3a      	ldr	r2, [r7, #32]
 8001f44:	4906      	ldr	r1, [pc, #24]	; (8001f60 <I2C_RequestMemoryRead+0x1cc>)
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f863 	bl	8002012 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	00010002 	.word	0x00010002

08001f64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f74:	e025      	b.n	8001fc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d021      	beq.n	8001fc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7e:	f7fe ff59 	bl	8000e34 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d302      	bcc.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d116      	bne.n	8001fc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f043 0220 	orr.w	r2, r3, #32
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e023      	b.n	800200a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	0c1b      	lsrs	r3, r3, #16
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d10d      	bne.n	8001fe8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bf0c      	ite	eq
 8001fde:	2301      	moveq	r3, #1
 8001fe0:	2300      	movne	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	e00c      	b.n	8002002 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bf0c      	ite	eq
 8001ffa:	2301      	moveq	r3, #1
 8001ffc:	2300      	movne	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	429a      	cmp	r2, r3
 8002006:	d0b6      	beq.n	8001f76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002020:	e051      	b.n	80020c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002030:	d123      	bne.n	800207a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002040:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800204a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2220      	movs	r2, #32
 8002056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f043 0204 	orr.w	r2, r3, #4
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e046      	b.n	8002108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d021      	beq.n	80020c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002082:	f7fe fed7 	bl	8000e34 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	429a      	cmp	r2, r3
 8002090:	d302      	bcc.n	8002098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d116      	bne.n	80020c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f043 0220 	orr.w	r2, r3, #32
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e020      	b.n	8002108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	0c1b      	lsrs	r3, r3, #16
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d10c      	bne.n	80020ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4013      	ands	r3, r2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	e00b      	b.n	8002102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	43da      	mvns	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	4013      	ands	r3, r2
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf14      	ite	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	2300      	moveq	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d18d      	bne.n	8002022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800211c:	e02d      	b.n	800217a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f8ce 	bl	80022c0 <I2C_IsAcknowledgeFailed>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e02d      	b.n	800218a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d021      	beq.n	800217a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002136:	f7fe fe7d 	bl	8000e34 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	429a      	cmp	r2, r3
 8002144:	d302      	bcc.n	800214c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d116      	bne.n	800217a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f043 0220 	orr.w	r2, r3, #32
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e007      	b.n	800218a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002184:	2b80      	cmp	r3, #128	; 0x80
 8002186:	d1ca      	bne.n	800211e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800219e:	e02d      	b.n	80021fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 f88d 	bl	80022c0 <I2C_IsAcknowledgeFailed>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e02d      	b.n	800220c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b6:	d021      	beq.n	80021fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b8:	f7fe fe3c 	bl	8000e34 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d302      	bcc.n	80021ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d116      	bne.n	80021fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f043 0220 	orr.w	r2, r3, #32
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e007      	b.n	800220c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b04      	cmp	r3, #4
 8002208:	d1ca      	bne.n	80021a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002220:	e042      	b.n	80022a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b10      	cmp	r3, #16
 800222e:	d119      	bne.n	8002264 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0210 	mvn.w	r2, #16
 8002238:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e029      	b.n	80022b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002264:	f7fe fde6 	bl	8000e34 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	429a      	cmp	r2, r3
 8002272:	d302      	bcc.n	800227a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d116      	bne.n	80022a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e007      	b.n	80022b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	d1b5      	bne.n	8002222 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d6:	d11b      	bne.n	8002310 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f043 0204 	orr.w	r2, r3, #4
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e25b      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d075      	beq.n	800242a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800233e:	4ba3      	ldr	r3, [pc, #652]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b04      	cmp	r3, #4
 8002348:	d00c      	beq.n	8002364 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234a:	4ba0      	ldr	r3, [pc, #640]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002352:	2b08      	cmp	r3, #8
 8002354:	d112      	bne.n	800237c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002356:	4b9d      	ldr	r3, [pc, #628]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002362:	d10b      	bne.n	800237c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002364:	4b99      	ldr	r3, [pc, #612]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d05b      	beq.n	8002428 <HAL_RCC_OscConfig+0x108>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d157      	bne.n	8002428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e236      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002384:	d106      	bne.n	8002394 <HAL_RCC_OscConfig+0x74>
 8002386:	4b91      	ldr	r3, [pc, #580]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a90      	ldr	r2, [pc, #576]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e01d      	b.n	80023d0 <HAL_RCC_OscConfig+0xb0>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x98>
 800239e:	4b8b      	ldr	r3, [pc, #556]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a8a      	ldr	r2, [pc, #552]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b88      	ldr	r3, [pc, #544]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a87      	ldr	r2, [pc, #540]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e00b      	b.n	80023d0 <HAL_RCC_OscConfig+0xb0>
 80023b8:	4b84      	ldr	r3, [pc, #528]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a83      	ldr	r2, [pc, #524]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	4b81      	ldr	r3, [pc, #516]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a80      	ldr	r2, [pc, #512]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d013      	beq.n	8002400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7fe fd2c 	bl	8000e34 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e0:	f7fe fd28 	bl	8000e34 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	; 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e1fb      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b76      	ldr	r3, [pc, #472]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0xc0>
 80023fe:	e014      	b.n	800242a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe fd18 	bl	8000e34 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002408:	f7fe fd14 	bl	8000e34 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	; 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e1e7      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241a:	4b6c      	ldr	r3, [pc, #432]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0xe8>
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d063      	beq.n	80024fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002436:	4b65      	ldr	r3, [pc, #404]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00b      	beq.n	800245a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002442:	4b62      	ldr	r3, [pc, #392]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244a:	2b08      	cmp	r3, #8
 800244c:	d11c      	bne.n	8002488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800244e:	4b5f      	ldr	r3, [pc, #380]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d116      	bne.n	8002488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245a:	4b5c      	ldr	r3, [pc, #368]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_RCC_OscConfig+0x152>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d001      	beq.n	8002472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e1bb      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002472:	4b56      	ldr	r3, [pc, #344]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4952      	ldr	r1, [pc, #328]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002486:	e03a      	b.n	80024fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002490:	4b4f      	ldr	r3, [pc, #316]	; (80025d0 <HAL_RCC_OscConfig+0x2b0>)
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7fe fccd 	bl	8000e34 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800249e:	f7fe fcc9 	bl	8000e34 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e19c      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b0:	4b46      	ldr	r3, [pc, #280]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024bc:	4b43      	ldr	r3, [pc, #268]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4940      	ldr	r1, [pc, #256]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]
 80024d0:	e015      	b.n	80024fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d2:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <HAL_RCC_OscConfig+0x2b0>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe fcac 	bl	8000e34 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e0:	f7fe fca8 	bl	8000e34 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e17b      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f2:	4b36      	ldr	r3, [pc, #216]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d030      	beq.n	800256c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d016      	beq.n	8002540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002512:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <HAL_RCC_OscConfig+0x2b4>)
 8002514:	2201      	movs	r2, #1
 8002516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002518:	f7fe fc8c 	bl	8000e34 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002520:	f7fe fc88 	bl	8000e34 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e15b      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x200>
 800253e:	e015      	b.n	800256c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002540:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <HAL_RCC_OscConfig+0x2b4>)
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002546:	f7fe fc75 	bl	8000e34 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800254e:	f7fe fc71 	bl	8000e34 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e144      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002560:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f0      	bne.n	800254e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80a0 	beq.w	80026ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10f      	bne.n	80025aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCC_OscConfig+0x2b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d121      	bne.n	80025fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_RCC_OscConfig+0x2b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <HAL_RCC_OscConfig+0x2b8>)
 80025bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c2:	f7fe fc37 	bl	8000e34 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	e011      	b.n	80025ee <HAL_RCC_OscConfig+0x2ce>
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	42470000 	.word	0x42470000
 80025d4:	42470e80 	.word	0x42470e80
 80025d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025dc:	f7fe fc2a 	bl	8000e34 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0fd      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ee:	4b81      	ldr	r3, [pc, #516]	; (80027f4 <HAL_RCC_OscConfig+0x4d4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d106      	bne.n	8002610 <HAL_RCC_OscConfig+0x2f0>
 8002602:	4b7d      	ldr	r3, [pc, #500]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a7c      	ldr	r2, [pc, #496]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
 800260e:	e01c      	b.n	800264a <HAL_RCC_OscConfig+0x32a>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b05      	cmp	r3, #5
 8002616:	d10c      	bne.n	8002632 <HAL_RCC_OscConfig+0x312>
 8002618:	4b77      	ldr	r3, [pc, #476]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a76      	ldr	r2, [pc, #472]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 800261e:	f043 0304 	orr.w	r3, r3, #4
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	4b74      	ldr	r3, [pc, #464]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	4a73      	ldr	r2, [pc, #460]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6713      	str	r3, [r2, #112]	; 0x70
 8002630:	e00b      	b.n	800264a <HAL_RCC_OscConfig+0x32a>
 8002632:	4b71      	ldr	r3, [pc, #452]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	4a70      	ldr	r2, [pc, #448]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	6713      	str	r3, [r2, #112]	; 0x70
 800263e:	4b6e      	ldr	r3, [pc, #440]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	4a6d      	ldr	r2, [pc, #436]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 8002644:	f023 0304 	bic.w	r3, r3, #4
 8002648:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d015      	beq.n	800267e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002652:	f7fe fbef 	bl	8000e34 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002658:	e00a      	b.n	8002670 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7fe fbeb 	bl	8000e34 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	; 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e0bc      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	4b61      	ldr	r3, [pc, #388]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0ee      	beq.n	800265a <HAL_RCC_OscConfig+0x33a>
 800267c:	e014      	b.n	80026a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7fe fbd9 	bl	8000e34 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe fbd5 	bl	8000e34 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0a6      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	4b56      	ldr	r3, [pc, #344]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ee      	bne.n	8002686 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d105      	bne.n	80026ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ae:	4b52      	ldr	r3, [pc, #328]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a51      	ldr	r2, [pc, #324]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 80026b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8092 	beq.w	80027e8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026c4:	4b4c      	ldr	r3, [pc, #304]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 030c 	and.w	r3, r3, #12
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d05c      	beq.n	800278a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d141      	bne.n	800275c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d8:	4b48      	ldr	r3, [pc, #288]	; (80027fc <HAL_RCC_OscConfig+0x4dc>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7fe fba9 	bl	8000e34 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fe fba5 	bl	8000e34 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e078      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f8:	4b3f      	ldr	r3, [pc, #252]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f0      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69da      	ldr	r2, [r3, #28]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	019b      	lsls	r3, r3, #6
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	3b01      	subs	r3, #1
 800271e:	041b      	lsls	r3, r3, #16
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	061b      	lsls	r3, r3, #24
 8002728:	4933      	ldr	r1, [pc, #204]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800272e:	4b33      	ldr	r3, [pc, #204]	; (80027fc <HAL_RCC_OscConfig+0x4dc>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe fb7e 	bl	8000e34 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273c:	f7fe fb7a 	bl	8000e34 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e04d      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x41c>
 800275a:	e045      	b.n	80027e8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275c:	4b27      	ldr	r3, [pc, #156]	; (80027fc <HAL_RCC_OscConfig+0x4dc>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe fb67 	bl	8000e34 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276a:	f7fe fb63 	bl	8000e34 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e036      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277c:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x44a>
 8002788:	e02e      	b.n	80027e8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e029      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002796:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <HAL_RCC_OscConfig+0x4d8>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d11c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d115      	bne.n	80027e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027be:	4013      	ands	r3, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d10d      	bne.n	80027e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d106      	bne.n	80027e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40007000 	.word	0x40007000
 80027f8:	40023800 	.word	0x40023800
 80027fc:	42470060 	.word	0x42470060

08002800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0cc      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d90c      	bls.n	800283c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b65      	ldr	r3, [pc, #404]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0b8      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a58      	ldr	r2, [pc, #352]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800285e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800286c:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b50      	ldr	r3, [pc, #320]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	494d      	ldr	r1, [pc, #308]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d044      	beq.n	8002920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d119      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e07f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d003      	beq.n	80028be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e06f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e067      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028de:	4b37      	ldr	r3, [pc, #220]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f023 0203 	bic.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4934      	ldr	r1, [pc, #208]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f0:	f7fe faa0 	bl	8000e34 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	e00a      	b.n	800290e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7fe fa9c 	bl	8000e34 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e04f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 020c 	and.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	429a      	cmp	r2, r3
 800291e:	d1eb      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d20c      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e032      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4916      	ldr	r1, [pc, #88]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	490e      	ldr	r1, [pc, #56]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002986:	f000 f821 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 800298a:	4601      	mov	r1, r0
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	5cd3      	ldrb	r3, [r2, r3]
 800299a:	fa21 f303 	lsr.w	r3, r1, r3
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fa00 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023c00 	.word	0x40023c00
 80029bc:	40023800 	.word	0x40023800
 80029c0:	08004088 	.word	0x08004088
 80029c4:	20000000 	.word	0x20000000
 80029c8:	20000004 	.word	0x20000004

080029cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	2300      	movs	r3, #0
 80029dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e2:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d007      	beq.n	80029fe <HAL_RCC_GetSysClockFreq+0x32>
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d008      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x38>
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 80b4 	bne.w	8002b60 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029f8:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029fa:	60bb      	str	r3, [r7, #8]
       break;
 80029fc:	e0b3      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029fe:	4b5e      	ldr	r3, [pc, #376]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002a00:	60bb      	str	r3, [r7, #8]
      break;
 8002a02:	e0b0      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a04:	4b5a      	ldr	r3, [pc, #360]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a0e:	4b58      	ldr	r3, [pc, #352]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d04a      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1a:	4b55      	ldr	r3, [pc, #340]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	099b      	lsrs	r3, r3, #6
 8002a20:	f04f 0400 	mov.w	r4, #0
 8002a24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	ea03 0501 	and.w	r5, r3, r1
 8002a30:	ea04 0602 	and.w	r6, r4, r2
 8002a34:	4629      	mov	r1, r5
 8002a36:	4632      	mov	r2, r6
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	f04f 0400 	mov.w	r4, #0
 8002a40:	0154      	lsls	r4, r2, #5
 8002a42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a46:	014b      	lsls	r3, r1, #5
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4622      	mov	r2, r4
 8002a4c:	1b49      	subs	r1, r1, r5
 8002a4e:	eb62 0206 	sbc.w	r2, r2, r6
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	f04f 0400 	mov.w	r4, #0
 8002a5a:	0194      	lsls	r4, r2, #6
 8002a5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a60:	018b      	lsls	r3, r1, #6
 8002a62:	1a5b      	subs	r3, r3, r1
 8002a64:	eb64 0402 	sbc.w	r4, r4, r2
 8002a68:	f04f 0100 	mov.w	r1, #0
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	00e2      	lsls	r2, r4, #3
 8002a72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a76:	00d9      	lsls	r1, r3, #3
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4614      	mov	r4, r2
 8002a7c:	195b      	adds	r3, r3, r5
 8002a7e:	eb44 0406 	adc.w	r4, r4, r6
 8002a82:	f04f 0100 	mov.w	r1, #0
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	0262      	lsls	r2, r4, #9
 8002a8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a90:	0259      	lsls	r1, r3, #9
 8002a92:	460b      	mov	r3, r1
 8002a94:	4614      	mov	r4, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	4621      	mov	r1, r4
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f04f 0400 	mov.w	r4, #0
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4623      	mov	r3, r4
 8002aa4:	f7fd fb96 	bl	80001d4 <__aeabi_uldivmod>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	460c      	mov	r4, r1
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	e049      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab0:	4b2f      	ldr	r3, [pc, #188]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	099b      	lsrs	r3, r3, #6
 8002ab6:	f04f 0400 	mov.w	r4, #0
 8002aba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	ea03 0501 	and.w	r5, r3, r1
 8002ac6:	ea04 0602 	and.w	r6, r4, r2
 8002aca:	4629      	mov	r1, r5
 8002acc:	4632      	mov	r2, r6
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	f04f 0400 	mov.w	r4, #0
 8002ad6:	0154      	lsls	r4, r2, #5
 8002ad8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002adc:	014b      	lsls	r3, r1, #5
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4622      	mov	r2, r4
 8002ae2:	1b49      	subs	r1, r1, r5
 8002ae4:	eb62 0206 	sbc.w	r2, r2, r6
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	f04f 0400 	mov.w	r4, #0
 8002af0:	0194      	lsls	r4, r2, #6
 8002af2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002af6:	018b      	lsls	r3, r1, #6
 8002af8:	1a5b      	subs	r3, r3, r1
 8002afa:	eb64 0402 	sbc.w	r4, r4, r2
 8002afe:	f04f 0100 	mov.w	r1, #0
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	00e2      	lsls	r2, r4, #3
 8002b08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b0c:	00d9      	lsls	r1, r3, #3
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4614      	mov	r4, r2
 8002b12:	195b      	adds	r3, r3, r5
 8002b14:	eb44 0406 	adc.w	r4, r4, r6
 8002b18:	f04f 0100 	mov.w	r1, #0
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	02a2      	lsls	r2, r4, #10
 8002b22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b26:	0299      	lsls	r1, r3, #10
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4614      	mov	r4, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	4621      	mov	r1, r4
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f04f 0400 	mov.w	r4, #0
 8002b36:	461a      	mov	r2, r3
 8002b38:	4623      	mov	r3, r4
 8002b3a:	f7fd fb4b 	bl	80001d4 <__aeabi_uldivmod>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	460c      	mov	r4, r1
 8002b42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	0c1b      	lsrs	r3, r3, #16
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	60bb      	str	r3, [r7, #8]
      break;
 8002b5e:	e002      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b62:	60bb      	str	r3, [r7, #8]
      break;
 8002b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b66:	68bb      	ldr	r3, [r7, #8]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b70:	40023800 	.word	0x40023800
 8002b74:	00f42400 	.word	0x00f42400
 8002b78:	007a1200 	.word	0x007a1200

08002b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000000 	.word	0x20000000

08002b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b98:	f7ff fff0 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002b9c:	4601      	mov	r1, r0
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	0a9b      	lsrs	r3, r3, #10
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4a03      	ldr	r2, [pc, #12]	; (8002bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002baa:	5cd3      	ldrb	r3, [r2, r3]
 8002bac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	08004098 	.word	0x08004098

08002bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bc0:	f7ff ffdc 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002bc4:	4601      	mov	r1, r0
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	0b5b      	lsrs	r3, r3, #13
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	4a03      	ldr	r2, [pc, #12]	; (8002be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	08004098 	.word	0x08004098

08002be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e01d      	b.n	8002c32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fd ff64 	bl	8000ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	4619      	mov	r1, r3
 8002c22:	4610      	mov	r0, r2
 8002c24:	f000 fb06 	bl	8003234 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b06      	cmp	r3, #6
 8002c62:	d007      	beq.n	8002c74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e01d      	b.n	8002cd0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d106      	bne.n	8002cae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7fd ff3d 	bl	8000b28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f000 fab7 	bl	8003234 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d122      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d11b      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0202 	mvn.w	r2, #2
 8002d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fa6b 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 8002d20:	e005      	b.n	8002d2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fa5d 	bl	80031e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fa6e 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d122      	bne.n	8002d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d11b      	bne.n	8002d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0204 	mvn.w	r2, #4
 8002d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa41 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 8002d74:	e005      	b.n	8002d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fa33 	bl	80031e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fa44 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d122      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d11b      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0208 	mvn.w	r2, #8
 8002dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2204      	movs	r2, #4
 8002db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa17 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 8002dc8:	e005      	b.n	8002dd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fa09 	bl	80031e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 fa1a 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d122      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d11b      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0210 	mvn.w	r2, #16
 8002e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2208      	movs	r2, #8
 8002e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f9ed 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 8002e1c:	e005      	b.n	8002e2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f9df 	bl	80031e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f9f0 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d10e      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d107      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0201 	mvn.w	r2, #1
 8002e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd fda8 	bl	80009ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e66:	2b80      	cmp	r3, #128	; 0x80
 8002e68:	d10e      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e74:	2b80      	cmp	r3, #128	; 0x80
 8002e76:	d107      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fcf4 	bl	8003870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	2b40      	cmp	r3, #64	; 0x40
 8002e94:	d10e      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea0:	2b40      	cmp	r3, #64	; 0x40
 8002ea2:	d107      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f9b5 	bl	800321e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	2b20      	cmp	r3, #32
 8002ece:	d107      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0220 	mvn.w	r2, #32
 8002ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fcbe 	bl	800385c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e0b4      	b.n	800306c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b0c      	cmp	r3, #12
 8002f16:	f200 809f 	bhi.w	8003058 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002f1a:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f55 	.word	0x08002f55
 8002f24:	08003059 	.word	0x08003059
 8002f28:	08003059 	.word	0x08003059
 8002f2c:	08003059 	.word	0x08003059
 8002f30:	08002f95 	.word	0x08002f95
 8002f34:	08003059 	.word	0x08003059
 8002f38:	08003059 	.word	0x08003059
 8002f3c:	08003059 	.word	0x08003059
 8002f40:	08002fd7 	.word	0x08002fd7
 8002f44:	08003059 	.word	0x08003059
 8002f48:	08003059 	.word	0x08003059
 8002f4c:	08003059 	.word	0x08003059
 8002f50:	08003017 	.word	0x08003017
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f9ea 	bl	8003334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0208 	orr.w	r2, r2, #8
 8002f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0204 	bic.w	r2, r2, #4
 8002f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6999      	ldr	r1, [r3, #24]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	619a      	str	r2, [r3, #24]
      break;
 8002f92:	e062      	b.n	800305a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fa30 	bl	8003400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6999      	ldr	r1, [r3, #24]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	021a      	lsls	r2, r3, #8
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	619a      	str	r2, [r3, #24]
      break;
 8002fd4:	e041      	b.n	800305a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fa7b 	bl	80034d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0208 	orr.w	r2, r2, #8
 8002ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0204 	bic.w	r2, r2, #4
 8003000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69d9      	ldr	r1, [r3, #28]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	61da      	str	r2, [r3, #28]
      break;
 8003014:	e021      	b.n	800305a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fac5 	bl	80035ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69d9      	ldr	r1, [r3, #28]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	021a      	lsls	r2, r3, #8
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	61da      	str	r2, [r3, #28]
      break;
 8003056:	e000      	b.n	800305a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003058:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_TIM_ConfigClockSource+0x18>
 8003088:	2302      	movs	r3, #2
 800308a:	e0a6      	b.n	80031da <HAL_TIM_ConfigClockSource+0x166>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d067      	beq.n	8003194 <HAL_TIM_ConfigClockSource+0x120>
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d80b      	bhi.n	80030e0 <HAL_TIM_ConfigClockSource+0x6c>
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d073      	beq.n	80031b4 <HAL_TIM_ConfigClockSource+0x140>
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d802      	bhi.n	80030d6 <HAL_TIM_ConfigClockSource+0x62>
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d06f      	beq.n	80031b4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80030d4:	e078      	b.n	80031c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d06c      	beq.n	80031b4 <HAL_TIM_ConfigClockSource+0x140>
 80030da:	2b30      	cmp	r3, #48	; 0x30
 80030dc:	d06a      	beq.n	80031b4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80030de:	e073      	b.n	80031c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030e0:	2b70      	cmp	r3, #112	; 0x70
 80030e2:	d00d      	beq.n	8003100 <HAL_TIM_ConfigClockSource+0x8c>
 80030e4:	2b70      	cmp	r3, #112	; 0x70
 80030e6:	d804      	bhi.n	80030f2 <HAL_TIM_ConfigClockSource+0x7e>
 80030e8:	2b50      	cmp	r3, #80	; 0x50
 80030ea:	d033      	beq.n	8003154 <HAL_TIM_ConfigClockSource+0xe0>
 80030ec:	2b60      	cmp	r3, #96	; 0x60
 80030ee:	d041      	beq.n	8003174 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80030f0:	e06a      	b.n	80031c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f6:	d066      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x152>
 80030f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fc:	d017      	beq.n	800312e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80030fe:	e063      	b.n	80031c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6899      	ldr	r1, [r3, #8]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f000 fb16 	bl	8003740 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003122:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	609a      	str	r2, [r3, #8]
      break;
 800312c:	e04c      	b.n	80031c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6899      	ldr	r1, [r3, #8]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f000 faff 	bl	8003740 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003150:	609a      	str	r2, [r3, #8]
      break;
 8003152:	e039      	b.n	80031c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	461a      	mov	r2, r3
 8003162:	f000 fa73 	bl	800364c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2150      	movs	r1, #80	; 0x50
 800316c:	4618      	mov	r0, r3
 800316e:	f000 facc 	bl	800370a <TIM_ITRx_SetConfig>
      break;
 8003172:	e029      	b.n	80031c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	461a      	mov	r2, r3
 8003182:	f000 fa92 	bl	80036aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2160      	movs	r1, #96	; 0x60
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fabc 	bl	800370a <TIM_ITRx_SetConfig>
      break;
 8003192:	e019      	b.n	80031c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6859      	ldr	r1, [r3, #4]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	461a      	mov	r2, r3
 80031a2:	f000 fa53 	bl	800364c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2140      	movs	r1, #64	; 0x40
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 faac 	bl	800370a <TIM_ITRx_SetConfig>
      break;
 80031b2:	e009      	b.n	80031c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f000 faa3 	bl	800370a <TIM_ITRx_SetConfig>
      break;
 80031c4:	e000      	b.n	80031c8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80031c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a34      	ldr	r2, [pc, #208]	; (8003318 <TIM_Base_SetConfig+0xe4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00f      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003252:	d00b      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a31      	ldr	r2, [pc, #196]	; (800331c <TIM_Base_SetConfig+0xe8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d007      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a30      	ldr	r2, [pc, #192]	; (8003320 <TIM_Base_SetConfig+0xec>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_Base_SetConfig+0x38>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a2f      	ldr	r2, [pc, #188]	; (8003324 <TIM_Base_SetConfig+0xf0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d108      	bne.n	800327e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a25      	ldr	r2, [pc, #148]	; (8003318 <TIM_Base_SetConfig+0xe4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01b      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328c:	d017      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a22      	ldr	r2, [pc, #136]	; (800331c <TIM_Base_SetConfig+0xe8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d013      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a21      	ldr	r2, [pc, #132]	; (8003320 <TIM_Base_SetConfig+0xec>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00f      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a20      	ldr	r2, [pc, #128]	; (8003324 <TIM_Base_SetConfig+0xf0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00b      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <TIM_Base_SetConfig+0xf4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d007      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1e      	ldr	r2, [pc, #120]	; (800332c <TIM_Base_SetConfig+0xf8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d003      	beq.n	80032be <TIM_Base_SetConfig+0x8a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <TIM_Base_SetConfig+0xfc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d108      	bne.n	80032d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a08      	ldr	r2, [pc, #32]	; (8003318 <TIM_Base_SetConfig+0xe4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d103      	bne.n	8003304 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	615a      	str	r2, [r3, #20]
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40010000 	.word	0x40010000
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40000c00 	.word	0x40000c00
 8003328:	40014000 	.word	0x40014000
 800332c:	40014400 	.word	0x40014400
 8003330:	40014800 	.word	0x40014800

08003334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f023 0201 	bic.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0303 	bic.w	r3, r3, #3
 800336a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f023 0302 	bic.w	r3, r3, #2
 800337c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a1c      	ldr	r2, [pc, #112]	; (80033fc <TIM_OC1_SetConfig+0xc8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d10c      	bne.n	80033aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f023 0308 	bic.w	r3, r3, #8
 8003396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f023 0304 	bic.w	r3, r3, #4
 80033a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a13      	ldr	r2, [pc, #76]	; (80033fc <TIM_OC1_SetConfig+0xc8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d111      	bne.n	80033d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	621a      	str	r2, [r3, #32]
}
 80033f0:	bf00      	nop
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40010000 	.word	0x40010000

08003400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f023 0210 	bic.w	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f023 0320 	bic.w	r3, r3, #32
 800344a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <TIM_OC2_SetConfig+0xd4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d10d      	bne.n	800347c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <TIM_OC2_SetConfig+0xd4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d113      	bne.n	80034ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800348a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	621a      	str	r2, [r3, #32]
}
 80034c6:	bf00      	nop
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40010000 	.word	0x40010000

080034d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0303 	bic.w	r3, r3, #3
 800350e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1d      	ldr	r2, [pc, #116]	; (80035a8 <TIM_OC3_SetConfig+0xd0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d10d      	bne.n	8003552 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800353c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <TIM_OC3_SetConfig+0xd0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d113      	bne.n	8003582 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	621a      	str	r2, [r3, #32]
}
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40010000 	.word	0x40010000

080035ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	031b      	lsls	r3, r3, #12
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a10      	ldr	r2, [pc, #64]	; (8003648 <TIM_OC4_SetConfig+0x9c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d109      	bne.n	8003620 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	019b      	lsls	r3, r3, #6
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	621a      	str	r2, [r3, #32]
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40010000 	.word	0x40010000

0800364c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	f023 0201 	bic.w	r2, r3, #1
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f023 030a 	bic.w	r3, r3, #10
 8003688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4313      	orrs	r3, r2
 8003690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	621a      	str	r2, [r3, #32]
}
 800369e:	bf00      	nop
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b087      	sub	sp, #28
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f023 0210 	bic.w	r2, r3, #16
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	031b      	lsls	r3, r3, #12
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	621a      	str	r2, [r3, #32]
}
 80036fe:	bf00      	nop
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800370a:	b480      	push	{r7}
 800370c:	b085      	sub	sp, #20
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	f043 0307 	orr.w	r3, r3, #7
 800372c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	609a      	str	r2, [r3, #8]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800375a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	021a      	lsls	r2, r3, #8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	431a      	orrs	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4313      	orrs	r3, r2
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	609a      	str	r2, [r3, #8]
}
 8003774:	bf00      	nop
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003794:	2302      	movs	r3, #2
 8003796:	e050      	b.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1c      	ldr	r2, [pc, #112]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d018      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e4:	d013      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a18      	ldr	r2, [pc, #96]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00e      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a16      	ldr	r2, [pc, #88]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d009      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a15      	ldr	r2, [pc, #84]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a13      	ldr	r2, [pc, #76]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d10c      	bne.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	4313      	orrs	r3, r2
 800381e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40010000 	.word	0x40010000
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800
 8003854:	40000c00 	.word	0x40000c00
 8003858:	40014000 	.word	0x40014000

0800385c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e03f      	b.n	8003916 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fd f998 	bl	8000be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2224      	movs	r2, #36	; 0x24
 80038b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f829 	bl	8003920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003924:	b085      	sub	sp, #20
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003962:	f023 030c 	bic.w	r3, r3, #12
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	68f9      	ldr	r1, [r7, #12]
 800396c:	430b      	orrs	r3, r1
 800396e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398e:	f040 818b 	bne.w	8003ca8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4ac1      	ldr	r2, [pc, #772]	; (8003c9c <UART_SetConfig+0x37c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d005      	beq.n	80039a8 <UART_SetConfig+0x88>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4abf      	ldr	r2, [pc, #764]	; (8003ca0 <UART_SetConfig+0x380>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	f040 80bd 	bne.w	8003b22 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039a8:	f7ff f908 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 80039ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	461d      	mov	r5, r3
 80039b2:	f04f 0600 	mov.w	r6, #0
 80039b6:	46a8      	mov	r8, r5
 80039b8:	46b1      	mov	r9, r6
 80039ba:	eb18 0308 	adds.w	r3, r8, r8
 80039be:	eb49 0409 	adc.w	r4, r9, r9
 80039c2:	4698      	mov	r8, r3
 80039c4:	46a1      	mov	r9, r4
 80039c6:	eb18 0805 	adds.w	r8, r8, r5
 80039ca:	eb49 0906 	adc.w	r9, r9, r6
 80039ce:	f04f 0100 	mov.w	r1, #0
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039e2:	4688      	mov	r8, r1
 80039e4:	4691      	mov	r9, r2
 80039e6:	eb18 0005 	adds.w	r0, r8, r5
 80039ea:	eb49 0106 	adc.w	r1, r9, r6
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	461d      	mov	r5, r3
 80039f4:	f04f 0600 	mov.w	r6, #0
 80039f8:	196b      	adds	r3, r5, r5
 80039fa:	eb46 0406 	adc.w	r4, r6, r6
 80039fe:	461a      	mov	r2, r3
 8003a00:	4623      	mov	r3, r4
 8003a02:	f7fc fbe7 	bl	80001d4 <__aeabi_uldivmod>
 8003a06:	4603      	mov	r3, r0
 8003a08:	460c      	mov	r4, r1
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4ba5      	ldr	r3, [pc, #660]	; (8003ca4 <UART_SetConfig+0x384>)
 8003a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	461d      	mov	r5, r3
 8003a1c:	f04f 0600 	mov.w	r6, #0
 8003a20:	46a9      	mov	r9, r5
 8003a22:	46b2      	mov	sl, r6
 8003a24:	eb19 0309 	adds.w	r3, r9, r9
 8003a28:	eb4a 040a 	adc.w	r4, sl, sl
 8003a2c:	4699      	mov	r9, r3
 8003a2e:	46a2      	mov	sl, r4
 8003a30:	eb19 0905 	adds.w	r9, r9, r5
 8003a34:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a38:	f04f 0100 	mov.w	r1, #0
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a4c:	4689      	mov	r9, r1
 8003a4e:	4692      	mov	sl, r2
 8003a50:	eb19 0005 	adds.w	r0, r9, r5
 8003a54:	eb4a 0106 	adc.w	r1, sl, r6
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	461d      	mov	r5, r3
 8003a5e:	f04f 0600 	mov.w	r6, #0
 8003a62:	196b      	adds	r3, r5, r5
 8003a64:	eb46 0406 	adc.w	r4, r6, r6
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4623      	mov	r3, r4
 8003a6c:	f7fc fbb2 	bl	80001d4 <__aeabi_uldivmod>
 8003a70:	4603      	mov	r3, r0
 8003a72:	460c      	mov	r4, r1
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b8b      	ldr	r3, [pc, #556]	; (8003ca4 <UART_SetConfig+0x384>)
 8003a78:	fba3 1302 	umull	r1, r3, r3, r2
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	2164      	movs	r1, #100	; 0x64
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	3332      	adds	r3, #50	; 0x32
 8003a8a:	4a86      	ldr	r2, [pc, #536]	; (8003ca4 <UART_SetConfig+0x384>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a98:	4498      	add	r8, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	461d      	mov	r5, r3
 8003a9e:	f04f 0600 	mov.w	r6, #0
 8003aa2:	46a9      	mov	r9, r5
 8003aa4:	46b2      	mov	sl, r6
 8003aa6:	eb19 0309 	adds.w	r3, r9, r9
 8003aaa:	eb4a 040a 	adc.w	r4, sl, sl
 8003aae:	4699      	mov	r9, r3
 8003ab0:	46a2      	mov	sl, r4
 8003ab2:	eb19 0905 	adds.w	r9, r9, r5
 8003ab6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003aba:	f04f 0100 	mov.w	r1, #0
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ac6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003aca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ace:	4689      	mov	r9, r1
 8003ad0:	4692      	mov	sl, r2
 8003ad2:	eb19 0005 	adds.w	r0, r9, r5
 8003ad6:	eb4a 0106 	adc.w	r1, sl, r6
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	461d      	mov	r5, r3
 8003ae0:	f04f 0600 	mov.w	r6, #0
 8003ae4:	196b      	adds	r3, r5, r5
 8003ae6:	eb46 0406 	adc.w	r4, r6, r6
 8003aea:	461a      	mov	r2, r3
 8003aec:	4623      	mov	r3, r4
 8003aee:	f7fc fb71 	bl	80001d4 <__aeabi_uldivmod>
 8003af2:	4603      	mov	r3, r0
 8003af4:	460c      	mov	r4, r1
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b6a      	ldr	r3, [pc, #424]	; (8003ca4 <UART_SetConfig+0x384>)
 8003afa:	fba3 1302 	umull	r1, r3, r3, r2
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2164      	movs	r1, #100	; 0x64
 8003b02:	fb01 f303 	mul.w	r3, r1, r3
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	3332      	adds	r3, #50	; 0x32
 8003b0c:	4a65      	ldr	r2, [pc, #404]	; (8003ca4 <UART_SetConfig+0x384>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	f003 0207 	and.w	r2, r3, #7
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4442      	add	r2, r8
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	e26f      	b.n	8004002 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b22:	f7ff f837 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8003b26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	f04f 0600 	mov.w	r6, #0
 8003b30:	46a8      	mov	r8, r5
 8003b32:	46b1      	mov	r9, r6
 8003b34:	eb18 0308 	adds.w	r3, r8, r8
 8003b38:	eb49 0409 	adc.w	r4, r9, r9
 8003b3c:	4698      	mov	r8, r3
 8003b3e:	46a1      	mov	r9, r4
 8003b40:	eb18 0805 	adds.w	r8, r8, r5
 8003b44:	eb49 0906 	adc.w	r9, r9, r6
 8003b48:	f04f 0100 	mov.w	r1, #0
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b5c:	4688      	mov	r8, r1
 8003b5e:	4691      	mov	r9, r2
 8003b60:	eb18 0005 	adds.w	r0, r8, r5
 8003b64:	eb49 0106 	adc.w	r1, r9, r6
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	461d      	mov	r5, r3
 8003b6e:	f04f 0600 	mov.w	r6, #0
 8003b72:	196b      	adds	r3, r5, r5
 8003b74:	eb46 0406 	adc.w	r4, r6, r6
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	f7fc fb2a 	bl	80001d4 <__aeabi_uldivmod>
 8003b80:	4603      	mov	r3, r0
 8003b82:	460c      	mov	r4, r1
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b47      	ldr	r3, [pc, #284]	; (8003ca4 <UART_SetConfig+0x384>)
 8003b88:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	461d      	mov	r5, r3
 8003b96:	f04f 0600 	mov.w	r6, #0
 8003b9a:	46a9      	mov	r9, r5
 8003b9c:	46b2      	mov	sl, r6
 8003b9e:	eb19 0309 	adds.w	r3, r9, r9
 8003ba2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ba6:	4699      	mov	r9, r3
 8003ba8:	46a2      	mov	sl, r4
 8003baa:	eb19 0905 	adds.w	r9, r9, r5
 8003bae:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bb2:	f04f 0100 	mov.w	r1, #0
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bc6:	4689      	mov	r9, r1
 8003bc8:	4692      	mov	sl, r2
 8003bca:	eb19 0005 	adds.w	r0, r9, r5
 8003bce:	eb4a 0106 	adc.w	r1, sl, r6
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	461d      	mov	r5, r3
 8003bd8:	f04f 0600 	mov.w	r6, #0
 8003bdc:	196b      	adds	r3, r5, r5
 8003bde:	eb46 0406 	adc.w	r4, r6, r6
 8003be2:	461a      	mov	r2, r3
 8003be4:	4623      	mov	r3, r4
 8003be6:	f7fc faf5 	bl	80001d4 <__aeabi_uldivmod>
 8003bea:	4603      	mov	r3, r0
 8003bec:	460c      	mov	r4, r1
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4b2c      	ldr	r3, [pc, #176]	; (8003ca4 <UART_SetConfig+0x384>)
 8003bf2:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2164      	movs	r1, #100	; 0x64
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	3332      	adds	r3, #50	; 0x32
 8003c04:	4a27      	ldr	r2, [pc, #156]	; (8003ca4 <UART_SetConfig+0x384>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c12:	4498      	add	r8, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	461d      	mov	r5, r3
 8003c18:	f04f 0600 	mov.w	r6, #0
 8003c1c:	46a9      	mov	r9, r5
 8003c1e:	46b2      	mov	sl, r6
 8003c20:	eb19 0309 	adds.w	r3, r9, r9
 8003c24:	eb4a 040a 	adc.w	r4, sl, sl
 8003c28:	4699      	mov	r9, r3
 8003c2a:	46a2      	mov	sl, r4
 8003c2c:	eb19 0905 	adds.w	r9, r9, r5
 8003c30:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c34:	f04f 0100 	mov.w	r1, #0
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c48:	4689      	mov	r9, r1
 8003c4a:	4692      	mov	sl, r2
 8003c4c:	eb19 0005 	adds.w	r0, r9, r5
 8003c50:	eb4a 0106 	adc.w	r1, sl, r6
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	461d      	mov	r5, r3
 8003c5a:	f04f 0600 	mov.w	r6, #0
 8003c5e:	196b      	adds	r3, r5, r5
 8003c60:	eb46 0406 	adc.w	r4, r6, r6
 8003c64:	461a      	mov	r2, r3
 8003c66:	4623      	mov	r3, r4
 8003c68:	f7fc fab4 	bl	80001d4 <__aeabi_uldivmod>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	460c      	mov	r4, r1
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <UART_SetConfig+0x384>)
 8003c74:	fba3 1302 	umull	r1, r3, r3, r2
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	2164      	movs	r1, #100	; 0x64
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	3332      	adds	r3, #50	; 0x32
 8003c86:	4a07      	ldr	r2, [pc, #28]	; (8003ca4 <UART_SetConfig+0x384>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	f003 0207 	and.w	r2, r3, #7
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4442      	add	r2, r8
 8003c98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c9a:	e1b2      	b.n	8004002 <UART_SetConfig+0x6e2>
 8003c9c:	40011000 	.word	0x40011000
 8003ca0:	40011400 	.word	0x40011400
 8003ca4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4ad7      	ldr	r2, [pc, #860]	; (800400c <UART_SetConfig+0x6ec>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d005      	beq.n	8003cbe <UART_SetConfig+0x39e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4ad6      	ldr	r2, [pc, #856]	; (8004010 <UART_SetConfig+0x6f0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	f040 80d1 	bne.w	8003e60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cbe:	f7fe ff7d 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 8003cc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	469a      	mov	sl, r3
 8003cc8:	f04f 0b00 	mov.w	fp, #0
 8003ccc:	46d0      	mov	r8, sl
 8003cce:	46d9      	mov	r9, fp
 8003cd0:	eb18 0308 	adds.w	r3, r8, r8
 8003cd4:	eb49 0409 	adc.w	r4, r9, r9
 8003cd8:	4698      	mov	r8, r3
 8003cda:	46a1      	mov	r9, r4
 8003cdc:	eb18 080a 	adds.w	r8, r8, sl
 8003ce0:	eb49 090b 	adc.w	r9, r9, fp
 8003ce4:	f04f 0100 	mov.w	r1, #0
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cf0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cf4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cf8:	4688      	mov	r8, r1
 8003cfa:	4691      	mov	r9, r2
 8003cfc:	eb1a 0508 	adds.w	r5, sl, r8
 8003d00:	eb4b 0609 	adc.w	r6, fp, r9
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4619      	mov	r1, r3
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	f04f 0400 	mov.w	r4, #0
 8003d16:	0094      	lsls	r4, r2, #2
 8003d18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d1c:	008b      	lsls	r3, r1, #2
 8003d1e:	461a      	mov	r2, r3
 8003d20:	4623      	mov	r3, r4
 8003d22:	4628      	mov	r0, r5
 8003d24:	4631      	mov	r1, r6
 8003d26:	f7fc fa55 	bl	80001d4 <__aeabi_uldivmod>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4bb8      	ldr	r3, [pc, #736]	; (8004014 <UART_SetConfig+0x6f4>)
 8003d32:	fba3 2302 	umull	r2, r3, r3, r2
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	469b      	mov	fp, r3
 8003d40:	f04f 0c00 	mov.w	ip, #0
 8003d44:	46d9      	mov	r9, fp
 8003d46:	46e2      	mov	sl, ip
 8003d48:	eb19 0309 	adds.w	r3, r9, r9
 8003d4c:	eb4a 040a 	adc.w	r4, sl, sl
 8003d50:	4699      	mov	r9, r3
 8003d52:	46a2      	mov	sl, r4
 8003d54:	eb19 090b 	adds.w	r9, r9, fp
 8003d58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d5c:	f04f 0100 	mov.w	r1, #0
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d70:	4689      	mov	r9, r1
 8003d72:	4692      	mov	sl, r2
 8003d74:	eb1b 0509 	adds.w	r5, fp, r9
 8003d78:	eb4c 060a 	adc.w	r6, ip, sl
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4619      	mov	r1, r3
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	f04f 0400 	mov.w	r4, #0
 8003d8e:	0094      	lsls	r4, r2, #2
 8003d90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d94:	008b      	lsls	r3, r1, #2
 8003d96:	461a      	mov	r2, r3
 8003d98:	4623      	mov	r3, r4
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	4631      	mov	r1, r6
 8003d9e:	f7fc fa19 	bl	80001d4 <__aeabi_uldivmod>
 8003da2:	4603      	mov	r3, r0
 8003da4:	460c      	mov	r4, r1
 8003da6:	461a      	mov	r2, r3
 8003da8:	4b9a      	ldr	r3, [pc, #616]	; (8004014 <UART_SetConfig+0x6f4>)
 8003daa:	fba3 1302 	umull	r1, r3, r3, r2
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2164      	movs	r1, #100	; 0x64
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	3332      	adds	r3, #50	; 0x32
 8003dbc:	4a95      	ldr	r2, [pc, #596]	; (8004014 <UART_SetConfig+0x6f4>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc8:	4498      	add	r8, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	469b      	mov	fp, r3
 8003dce:	f04f 0c00 	mov.w	ip, #0
 8003dd2:	46d9      	mov	r9, fp
 8003dd4:	46e2      	mov	sl, ip
 8003dd6:	eb19 0309 	adds.w	r3, r9, r9
 8003dda:	eb4a 040a 	adc.w	r4, sl, sl
 8003dde:	4699      	mov	r9, r3
 8003de0:	46a2      	mov	sl, r4
 8003de2:	eb19 090b 	adds.w	r9, r9, fp
 8003de6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dea:	f04f 0100 	mov.w	r1, #0
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003df6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dfe:	4689      	mov	r9, r1
 8003e00:	4692      	mov	sl, r2
 8003e02:	eb1b 0509 	adds.w	r5, fp, r9
 8003e06:	eb4c 060a 	adc.w	r6, ip, sl
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	f04f 0400 	mov.w	r4, #0
 8003e1c:	0094      	lsls	r4, r2, #2
 8003e1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e22:	008b      	lsls	r3, r1, #2
 8003e24:	461a      	mov	r2, r3
 8003e26:	4623      	mov	r3, r4
 8003e28:	4628      	mov	r0, r5
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	f7fc f9d2 	bl	80001d4 <__aeabi_uldivmod>
 8003e30:	4603      	mov	r3, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	461a      	mov	r2, r3
 8003e36:	4b77      	ldr	r3, [pc, #476]	; (8004014 <UART_SetConfig+0x6f4>)
 8003e38:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	2164      	movs	r1, #100	; 0x64
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	3332      	adds	r3, #50	; 0x32
 8003e4a:	4a72      	ldr	r2, [pc, #456]	; (8004014 <UART_SetConfig+0x6f4>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	f003 020f 	and.w	r2, r3, #15
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4442      	add	r2, r8
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	e0d0      	b.n	8004002 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7fe fe98 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8003e64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	469a      	mov	sl, r3
 8003e6a:	f04f 0b00 	mov.w	fp, #0
 8003e6e:	46d0      	mov	r8, sl
 8003e70:	46d9      	mov	r9, fp
 8003e72:	eb18 0308 	adds.w	r3, r8, r8
 8003e76:	eb49 0409 	adc.w	r4, r9, r9
 8003e7a:	4698      	mov	r8, r3
 8003e7c:	46a1      	mov	r9, r4
 8003e7e:	eb18 080a 	adds.w	r8, r8, sl
 8003e82:	eb49 090b 	adc.w	r9, r9, fp
 8003e86:	f04f 0100 	mov.w	r1, #0
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e9a:	4688      	mov	r8, r1
 8003e9c:	4691      	mov	r9, r2
 8003e9e:	eb1a 0508 	adds.w	r5, sl, r8
 8003ea2:	eb4b 0609 	adc.w	r6, fp, r9
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	f04f 0400 	mov.w	r4, #0
 8003eb8:	0094      	lsls	r4, r2, #2
 8003eba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ebe:	008b      	lsls	r3, r1, #2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	4631      	mov	r1, r6
 8003ec8:	f7fc f984 	bl	80001d4 <__aeabi_uldivmod>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	460c      	mov	r4, r1
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4b50      	ldr	r3, [pc, #320]	; (8004014 <UART_SetConfig+0x6f4>)
 8003ed4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	469b      	mov	fp, r3
 8003ee2:	f04f 0c00 	mov.w	ip, #0
 8003ee6:	46d9      	mov	r9, fp
 8003ee8:	46e2      	mov	sl, ip
 8003eea:	eb19 0309 	adds.w	r3, r9, r9
 8003eee:	eb4a 040a 	adc.w	r4, sl, sl
 8003ef2:	4699      	mov	r9, r3
 8003ef4:	46a2      	mov	sl, r4
 8003ef6:	eb19 090b 	adds.w	r9, r9, fp
 8003efa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f12:	4689      	mov	r9, r1
 8003f14:	4692      	mov	sl, r2
 8003f16:	eb1b 0509 	adds.w	r5, fp, r9
 8003f1a:	eb4c 060a 	adc.w	r6, ip, sl
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4619      	mov	r1, r3
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	f04f 0400 	mov.w	r4, #0
 8003f30:	0094      	lsls	r4, r2, #2
 8003f32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f36:	008b      	lsls	r3, r1, #2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	4631      	mov	r1, r6
 8003f40:	f7fc f948 	bl	80001d4 <__aeabi_uldivmod>
 8003f44:	4603      	mov	r3, r0
 8003f46:	460c      	mov	r4, r1
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b32      	ldr	r3, [pc, #200]	; (8004014 <UART_SetConfig+0x6f4>)
 8003f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	2164      	movs	r1, #100	; 0x64
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	3332      	adds	r3, #50	; 0x32
 8003f5e:	4a2d      	ldr	r2, [pc, #180]	; (8004014 <UART_SetConfig+0x6f4>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f6a:	4498      	add	r8, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	469b      	mov	fp, r3
 8003f70:	f04f 0c00 	mov.w	ip, #0
 8003f74:	46d9      	mov	r9, fp
 8003f76:	46e2      	mov	sl, ip
 8003f78:	eb19 0309 	adds.w	r3, r9, r9
 8003f7c:	eb4a 040a 	adc.w	r4, sl, sl
 8003f80:	4699      	mov	r9, r3
 8003f82:	46a2      	mov	sl, r4
 8003f84:	eb19 090b 	adds.w	r9, r9, fp
 8003f88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f8c:	f04f 0100 	mov.w	r1, #0
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fa0:	4689      	mov	r9, r1
 8003fa2:	4692      	mov	sl, r2
 8003fa4:	eb1b 0509 	adds.w	r5, fp, r9
 8003fa8:	eb4c 060a 	adc.w	r6, ip, sl
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	f04f 0400 	mov.w	r4, #0
 8003fbe:	0094      	lsls	r4, r2, #2
 8003fc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fc4:	008b      	lsls	r3, r1, #2
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4623      	mov	r3, r4
 8003fca:	4628      	mov	r0, r5
 8003fcc:	4631      	mov	r1, r6
 8003fce:	f7fc f901 	bl	80001d4 <__aeabi_uldivmod>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <UART_SetConfig+0x6f4>)
 8003fda:	fba3 1302 	umull	r1, r3, r3, r2
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2164      	movs	r1, #100	; 0x64
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	3332      	adds	r3, #50	; 0x32
 8003fec:	4a09      	ldr	r2, [pc, #36]	; (8004014 <UART_SetConfig+0x6f4>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	f003 020f 	and.w	r2, r3, #15
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4442      	add	r2, r8
 8003ffe:	609a      	str	r2, [r3, #8]
}
 8004000:	e7ff      	b.n	8004002 <UART_SetConfig+0x6e2>
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800400c:	40011000 	.word	0x40011000
 8004010:	40011400 	.word	0x40011400
 8004014:	51eb851f 	.word	0x51eb851f

08004018 <__libc_init_array>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	4e0d      	ldr	r6, [pc, #52]	; (8004050 <__libc_init_array+0x38>)
 800401c:	4c0d      	ldr	r4, [pc, #52]	; (8004054 <__libc_init_array+0x3c>)
 800401e:	1ba4      	subs	r4, r4, r6
 8004020:	10a4      	asrs	r4, r4, #2
 8004022:	2500      	movs	r5, #0
 8004024:	42a5      	cmp	r5, r4
 8004026:	d109      	bne.n	800403c <__libc_init_array+0x24>
 8004028:	4e0b      	ldr	r6, [pc, #44]	; (8004058 <__libc_init_array+0x40>)
 800402a:	4c0c      	ldr	r4, [pc, #48]	; (800405c <__libc_init_array+0x44>)
 800402c:	f000 f820 	bl	8004070 <_init>
 8004030:	1ba4      	subs	r4, r4, r6
 8004032:	10a4      	asrs	r4, r4, #2
 8004034:	2500      	movs	r5, #0
 8004036:	42a5      	cmp	r5, r4
 8004038:	d105      	bne.n	8004046 <__libc_init_array+0x2e>
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004040:	4798      	blx	r3
 8004042:	3501      	adds	r5, #1
 8004044:	e7ee      	b.n	8004024 <__libc_init_array+0xc>
 8004046:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800404a:	4798      	blx	r3
 800404c:	3501      	adds	r5, #1
 800404e:	e7f2      	b.n	8004036 <__libc_init_array+0x1e>
 8004050:	080040a8 	.word	0x080040a8
 8004054:	080040a8 	.word	0x080040a8
 8004058:	080040a8 	.word	0x080040a8
 800405c:	080040ac 	.word	0x080040ac

08004060 <memset>:
 8004060:	4402      	add	r2, r0
 8004062:	4603      	mov	r3, r0
 8004064:	4293      	cmp	r3, r2
 8004066:	d100      	bne.n	800406a <memset+0xa>
 8004068:	4770      	bx	lr
 800406a:	f803 1b01 	strb.w	r1, [r3], #1
 800406e:	e7f9      	b.n	8004064 <memset+0x4>

08004070 <_init>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	bf00      	nop
 8004074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004076:	bc08      	pop	{r3}
 8004078:	469e      	mov	lr, r3
 800407a:	4770      	bx	lr

0800407c <_fini>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	bf00      	nop
 8004080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004082:	bc08      	pop	{r3}
 8004084:	469e      	mov	lr, r3
 8004086:	4770      	bx	lr


Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060b4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08006250  08006250  00016250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062f8  080062f8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006300  08006300  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006300  08006300  00016300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006304  08006304  00016304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000074  0800637c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  0800637c  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d01d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a21  00000000  00000000  0002d0c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e20  00000000  00000000  0002eae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d80  00000000  00000000  0002f908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016216  00000000  00000000  00030688  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009674  00000000  00000000  0004689e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008db55  00000000  00000000  0004ff12  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dda67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004148  00000000  00000000  000ddae4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006234 	.word	0x08006234

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08006234 	.word	0x08006234

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <levelBubbleLED>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void levelBubbleLED(){
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

	if(xDegree < 1){
 8000e04:	4b29      	ldr	r3, [pc, #164]	; (8000eac <levelBubbleLED+0xac>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	dc08      	bgt.n	8000e1e <levelBubbleLED+0x1e>
		// x LED Pin low
		pwm=0;
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <levelBubbleLED+0xb0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <levelBubbleLED+0xb4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a26      	ldr	r2, [pc, #152]	; (8000eb0 <levelBubbleLED+0xb0>)
 8000e18:	6812      	ldr	r2, [r2, #0]
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e1c:	e019      	b.n	8000e52 <levelBubbleLED+0x52>
	}
	else if(xDegree >= 1 && xDegree <= 5){
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <levelBubbleLED+0xac>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	dd0c      	ble.n	8000e40 <levelBubbleLED+0x40>
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <levelBubbleLED+0xac>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b05      	cmp	r3, #5
 8000e2c:	dc08      	bgt.n	8000e40 <levelBubbleLED+0x40>
		pwm=99;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <levelBubbleLED+0xb0>)
 8000e30:	2263      	movs	r2, #99	; 0x63
 8000e32:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <levelBubbleLED+0xb4>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a1d      	ldr	r2, [pc, #116]	; (8000eb0 <levelBubbleLED+0xb0>)
 8000e3a:	6812      	ldr	r2, [r2, #0]
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e3e:	e008      	b.n	8000e52 <levelBubbleLED+0x52>

	}
	else{	// >5
		// x LED Pin high
		pwm=999;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <levelBubbleLED+0xb0>)
 8000e42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e46:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 8000e48:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <levelBubbleLED+0xb4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <levelBubbleLED+0xb0>)
 8000e4e:	6812      	ldr	r2, [r2, #0]
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if(yDegree < 1){
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <levelBubbleLED+0xb8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	dc08      	bgt.n	8000e6c <levelBubbleLED+0x6c>
		// y LED Pin low
		pwm=0;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <levelBubbleLED+0xb0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm);
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <levelBubbleLED+0xb4>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <levelBubbleLED+0xb0>)
 8000e66:	6812      	ldr	r2, [r2, #0]
 8000e68:	639a      	str	r2, [r3, #56]	; 0x38
	else{	// >5
		// y LED Pin high
		pwm=999;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm);
	}
}
 8000e6a:	e019      	b.n	8000ea0 <levelBubbleLED+0xa0>
	else if(yDegree >= 1 && yDegree <= 5){
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <levelBubbleLED+0xb8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	dd0c      	ble.n	8000e8e <levelBubbleLED+0x8e>
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <levelBubbleLED+0xb8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b05      	cmp	r3, #5
 8000e7a:	dc08      	bgt.n	8000e8e <levelBubbleLED+0x8e>
		pwm=99;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <levelBubbleLED+0xb0>)
 8000e7e:	2263      	movs	r2, #99	; 0x63
 8000e80:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm);
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <levelBubbleLED+0xb4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <levelBubbleLED+0xb0>)
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e8c:	e008      	b.n	8000ea0 <levelBubbleLED+0xa0>
		pwm=999;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <levelBubbleLED+0xb0>)
 8000e90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e94:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm);
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <levelBubbleLED+0xb4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <levelBubbleLED+0xb0>)
 8000e9c:	6812      	ldr	r2, [r2, #0]
 8000e9e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000098 	.word	0x20000098
 8000eb0:	200000a0 	.word	0x200000a0
 8000eb4:	200000fc 	.word	0x200000fc
 8000eb8:	2000009c 	.word	0x2000009c

08000ebc <ADXL345_Write>:

void ADXL345_Write(uint8_t reg, uint8_t value){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, adxl_address, data, 2, 10);
 8000ed4:	f107 020c 	add.w	r2, r7, #12
 8000ed8:	230a      	movs	r3, #10
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2302      	movs	r3, #2
 8000ede:	21a6      	movs	r1, #166	; 0xa6
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <ADXL345_Write+0x34>)
 8000ee2:	f001 f9e7 	bl	80022b4 <HAL_I2C_Master_Transmit>
}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200000a8 	.word	0x200000a8

08000ef4 <ADXL345_Read>:

void ADXL345_Read(uint8_t reg, uint8_t numberOfBytes){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af04      	add	r7, sp, #16
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, adxl_address, reg, 1, data_rec, numberOfBytes, 100);
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	b299      	uxth	r1, r3
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	2264      	movs	r2, #100	; 0x64
 8000f0e:	9202      	str	r2, [sp, #8]
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <ADXL345_Read+0x38>)
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	460a      	mov	r2, r1
 8000f1a:	21a6      	movs	r1, #166	; 0xa6
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <ADXL345_Read+0x3c>)
 8000f1e:	f001 fac7 	bl	80024b0 <HAL_I2C_Mem_Read>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200001c4 	.word	0x200001c4
 8000f30:	200000a8 	.word	0x200000a8

08000f34 <ADXL345_Init>:

void ADXL345_Init(){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	ADXL345_Read(0x00, 1);	//0xE5
 8000f38:	2101      	movs	r1, #1
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f7ff ffda 	bl	8000ef4 <ADXL345_Read>

	ADXL345_Write(0x2d, 0);		// reset all bits
 8000f40:	2100      	movs	r1, #0
 8000f42:	202d      	movs	r0, #45	; 0x2d
 8000f44:	f7ff ffba 	bl	8000ebc <ADXL345_Write>
	ADXL345_Write(0x2d, 0x08);
 8000f48:	2108      	movs	r1, #8
 8000f4a:	202d      	movs	r0, #45	; 0x2d
 8000f4c:	f7ff ffb6 	bl	8000ebc <ADXL345_Write>
	ADXL345_Write(0x31, 0x01);
 8000f50:	2101      	movs	r1, #1
 8000f52:	2031      	movs	r0, #49	; 0x31
 8000f54:	f7ff ffb2 	bl	8000ebc <ADXL345_Write>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <ADXL345_SetOffset>:

void ADXL345_SetOffset(uint8_t x, uint8_t y, uint8_t z){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
 8000f66:	460b      	mov	r3, r1
 8000f68:	71bb      	strb	r3, [r7, #6]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	717b      	strb	r3, [r7, #5]
	ADXL345_Write(0x1E, x);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	4619      	mov	r1, r3
 8000f72:	201e      	movs	r0, #30
 8000f74:	f7ff ffa2 	bl	8000ebc <ADXL345_Write>
	HAL_Delay(10);
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f000 fd7b 	bl	8001a74 <HAL_Delay>
	ADXL345_Write(0x1F, y);
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	4619      	mov	r1, r3
 8000f82:	201f      	movs	r0, #31
 8000f84:	f7ff ff9a 	bl	8000ebc <ADXL345_Write>
	HAL_Delay(10);
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f000 fd73 	bl	8001a74 <HAL_Delay>
	ADXL345_Write(0x20, z);
 8000f8e:	797b      	ldrb	r3, [r7, #5]
 8000f90:	4619      	mov	r1, r3
 8000f92:	2020      	movs	r0, #32
 8000f94:	f7ff ff92 	bl	8000ebc <ADXL345_Write>
	HAL_Delay(10);
 8000f98:	200a      	movs	r0, #10
 8000f9a:	f000 fd6b 	bl	8001a74 <HAL_Delay>

	offset=0;
 8000f9e:	4b03      	ldr	r3, [pc, #12]	; (8000fac <ADXL345_SetOffset+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000094 	.word	0x20000094

08000fb0 <calcXDegree>:

void calcXDegree(){
 8000fb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fb4:	af00      	add	r7, sp, #0
	xDegree = atan(x/sqrt(pow(y, 2) + pow(z, 2))) *180/M_PI;
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <calcXDegree+0xe8>)
 8000fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fa5d 	bl	800047c <__aeabi_i2d>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	460d      	mov	r5, r1
 8000fc6:	4b35      	ldr	r3, [pc, #212]	; (800109c <calcXDegree+0xec>)
 8000fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fa55 	bl	800047c <__aeabi_i2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8001088 <calcXDegree+0xd8>
 8000fda:	ec43 2b10 	vmov	d0, r2, r3
 8000fde:	f004 f885 	bl	80050ec <pow>
 8000fe2:	ec59 8b10 	vmov	r8, r9, d0
 8000fe6:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <calcXDegree+0xf0>)
 8000fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fa45 	bl	800047c <__aeabi_i2d>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8001088 <calcXDegree+0xd8>
 8000ffa:	ec43 2b10 	vmov	d0, r2, r3
 8000ffe:	f004 f875 	bl	80050ec <pow>
 8001002:	ec53 2b10 	vmov	r2, r3, d0
 8001006:	4640      	mov	r0, r8
 8001008:	4649      	mov	r1, r9
 800100a:	f7ff f8eb 	bl	80001e4 <__adddf3>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	ec43 2b17 	vmov	d7, r2, r3
 8001016:	eeb0 0a47 	vmov.f32	s0, s14
 800101a:	eef0 0a67 	vmov.f32	s1, s15
 800101e:	f004 f9d5 	bl	80053cc <sqrt>
 8001022:	ec53 2b10 	vmov	r2, r3, d0
 8001026:	4620      	mov	r0, r4
 8001028:	4629      	mov	r1, r5
 800102a:	f7ff fbbb 	bl	80007a4 <__aeabi_ddiv>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	ec44 3b17 	vmov	d7, r3, r4
 8001036:	eeb0 0a47 	vmov.f32	s0, s14
 800103a:	eef0 0a67 	vmov.f32	s1, s15
 800103e:	f003 feab 	bl	8004d98 <atan>
 8001042:	ec51 0b10 	vmov	r0, r1, d0
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <calcXDegree+0xf4>)
 800104c:	f7ff fa80 	bl	8000550 <__aeabi_dmul>
 8001050:	4603      	mov	r3, r0
 8001052:	460c      	mov	r4, r1
 8001054:	4618      	mov	r0, r3
 8001056:	4621      	mov	r1, r4
 8001058:	a30d      	add	r3, pc, #52	; (adr r3, 8001090 <calcXDegree+0xe0>)
 800105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105e:	f7ff fba1 	bl	80007a4 <__aeabi_ddiv>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	4618      	mov	r0, r3
 8001068:	4621      	mov	r1, r4
 800106a:	f7ff fd21 	bl	8000ab0 <__aeabi_d2iz>
 800106e:	4602      	mov	r2, r0
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <calcXDegree+0xf8>)
 8001072:	601a      	str	r2, [r3, #0]
	xDegree = abs(xDegree);
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <calcXDegree+0xf8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	bfb8      	it	lt
 800107c:	425b      	neglt	r3, r3
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <calcXDegree+0xf8>)
 8001080:	6013      	str	r3, [r2, #0]
}
 8001082:	bf00      	nop
 8001084:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001088:	00000000 	.word	0x00000000
 800108c:	40000000 	.word	0x40000000
 8001090:	54442d18 	.word	0x54442d18
 8001094:	400921fb 	.word	0x400921fb
 8001098:	200000a4 	.word	0x200000a4
 800109c:	20000180 	.word	0x20000180
 80010a0:	2000013c 	.word	0x2000013c
 80010a4:	40668000 	.word	0x40668000
 80010a8:	20000098 	.word	0x20000098

080010ac <calcYDegree>:

void calcYDegree(){
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
	//yDegree = atan(y/sqrt(pow(x, 2) + pow(z, 2))) *180/M_PI;
	//yDegree = abs(yDegree);
	yDegree = 0;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <calcYDegree+0x14>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	2000009c 	.word	0x2000009c

080010c4 <readValues>:

void readValues(){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	if(updateReady==1){
 80010c8:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <readValues+0xb0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d14f      	bne.n	8001170 <readValues+0xac>
		// read ADXL x and y values from register
		ADXL345_Read(0x32, 6);
 80010d0:	2106      	movs	r1, #6
 80010d2:	2032      	movs	r0, #50	; 0x32
 80010d4:	f7ff ff0e 	bl	8000ef4 <ADXL345_Read>

		x=(data_rec[1]<<8 | data_rec[0]);
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <readValues+0xb4>)
 80010da:	785b      	ldrb	r3, [r3, #1]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <readValues+0xb4>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <readValues+0xb8>)
 80010ec:	801a      	strh	r2, [r3, #0]
		y=(data_rec[3]<<8 | data_rec[2]);
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <readValues+0xb4>)
 80010f0:	78db      	ldrb	r3, [r3, #3]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <readValues+0xb4>)
 80010f8:	789b      	ldrb	r3, [r3, #2]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b21a      	sxth	r2, r3
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <readValues+0xbc>)
 8001102:	801a      	strh	r2, [r3, #0]
		z=(data_rec[5]<<8 | data_rec[4]);
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <readValues+0xb4>)
 8001106:	795b      	ldrb	r3, [r3, #5]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	b21a      	sxth	r2, r3
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <readValues+0xb4>)
 800110e:	791b      	ldrb	r3, [r3, #4]
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21a      	sxth	r2, r3
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <readValues+0xc0>)
 8001118:	801a      	strh	r2, [r3, #0]
		//x=x*0.0078;
		//y=y*0.0078;
		//z=z*0.0078;

		// calibrate
		if(offset == 1){
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <readValues+0xc4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d11d      	bne.n	800115e <readValues+0x9a>
			ADXL345_SetOffset((-x/4), (-y/4), (-z/4));
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <readValues+0xb8>)
 8001124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001128:	425b      	negs	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	da00      	bge.n	8001130 <readValues+0x6c>
 800112e:	3303      	adds	r3, #3
 8001130:	109b      	asrs	r3, r3, #2
 8001132:	b2d8      	uxtb	r0, r3
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <readValues+0xbc>)
 8001136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113a:	425b      	negs	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	da00      	bge.n	8001142 <readValues+0x7e>
 8001140:	3303      	adds	r3, #3
 8001142:	109b      	asrs	r3, r3, #2
 8001144:	b2d9      	uxtb	r1, r3
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <readValues+0xc0>)
 8001148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114c:	425b      	negs	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	da00      	bge.n	8001154 <readValues+0x90>
 8001152:	3303      	adds	r3, #3
 8001154:	109b      	asrs	r3, r3, #2
 8001156:	b2db      	uxtb	r3, r3
 8001158:	461a      	mov	r2, r3
 800115a:	f7ff feff 	bl	8000f5c <ADXL345_SetOffset>
		}

		// calculate raw values to degrees
		calcXDegree();
 800115e:	f7ff ff27 	bl	8000fb0 <calcXDegree>
		calcYDegree();
 8001162:	f7ff ffa3 	bl	80010ac <calcYDegree>

		// display result with LEDs
		levelBubbleLED();
 8001166:	f7ff fe4b 	bl	8000e00 <levelBubbleLED>

		// reset
		updateReady = 0;
 800116a:	4b02      	ldr	r3, [pc, #8]	; (8001174 <readValues+0xb0>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
	}
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000090 	.word	0x20000090
 8001178:	200001c4 	.word	0x200001c4
 800117c:	200000a4 	.word	0x200000a4
 8001180:	20000180 	.word	0x20000180
 8001184:	2000013c 	.word	0x2000013c
 8001188:	20000094 	.word	0x20000094

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001190:	f000 fbfe 	bl	8001990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f81e 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f000 f996 	bl	80014c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800119c:	f000 f96a 	bl	8001474 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011a0:	f000 f884 	bl	80012ac <MX_I2C1_Init>
  MX_TIM1_Init();
 80011a4:	f000 f8b0 	bl	8001308 <MX_TIM1_Init>
  MX_TIM3_Init();
 80011a8:	f000 f900 	bl	80013ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	ADXL345_Init();
 80011ac:	f7ff fec2 	bl	8000f34 <ADXL345_Init>
	HAL_TIM_Base_Start_IT(&htim1);	// start timer for 5 Hz interrupt
 80011b0:	4806      	ldr	r0, [pc, #24]	; (80011cc <main+0x40>)
 80011b2:	f002 fb78 	bl	80038a6 <HAL_TIM_Base_Start_IT>

	// PWM for x and y LED
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011b6:	2100      	movs	r1, #0
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <main+0x44>)
 80011ba:	f002 fbc3 	bl	8003944 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011be:	2104      	movs	r1, #4
 80011c0:	4803      	ldr	r0, [pc, #12]	; (80011d0 <main+0x44>)
 80011c2:	f002 fbbf 	bl	8003944 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		readValues();
 80011c6:	f7ff ff7d 	bl	80010c4 <readValues>
 80011ca:	e7fc      	b.n	80011c6 <main+0x3a>
 80011cc:	20000140 	.word	0x20000140
 80011d0:	200000fc 	.word	0x200000fc

080011d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b094      	sub	sp, #80	; 0x50
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0320 	add.w	r3, r7, #32
 80011de:	2230      	movs	r2, #48	; 0x30
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 fdd0 	bl	8004d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <SystemClock_Config+0xd0>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <SystemClock_Config+0xd0>)
 8001202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
 8001208:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <SystemClock_Config+0xd0>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <SystemClock_Config+0xd4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001220:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <SystemClock_Config+0xd4>)
 8001222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <SystemClock_Config+0xd4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001234:	2302      	movs	r3, #2
 8001236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001238:	2301      	movs	r3, #1
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123c:	2310      	movs	r3, #16
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001240:	2302      	movs	r3, #2
 8001242:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001244:	2300      	movs	r3, #0
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001248:	2310      	movs	r3, #16
 800124a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800124c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001250:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001252:	2304      	movs	r3, #4
 8001254:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001256:	2307      	movs	r3, #7
 8001258:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fe94 	bl	8002f8c <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800126a:	f000 f9d5 	bl	8001618 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001272:	2302      	movs	r3, #2
 8001274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800127a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	2102      	movs	r1, #2
 800128a:	4618      	mov	r0, r3
 800128c:	f002 f8ee 	bl	800346c <HAL_RCC_ClockConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001296:	f000 f9bf 	bl	8001618 <Error_Handler>
  }
}
 800129a:	bf00      	nop
 800129c:	3750      	adds	r7, #80	; 0x50
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40007000 	.word	0x40007000

080012ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_I2C1_Init+0x50>)
 80012b2:	4a13      	ldr	r2, [pc, #76]	; (8001300 <MX_I2C1_Init+0x54>)
 80012b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_I2C1_Init+0x50>)
 80012b8:	4a12      	ldr	r2, [pc, #72]	; (8001304 <MX_I2C1_Init+0x58>)
 80012ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_I2C1_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_I2C1_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_I2C1_Init+0x50>)
 80012ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_I2C1_Init+0x50>)
 80012ea:	f000 feab 	bl	8002044 <HAL_I2C_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f4:	f000 f990 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200000a8 	.word	0x200000a8
 8001300:	40005400 	.word	0x40005400
 8001304:	000186a0 	.word	0x000186a0

08001308 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <MX_TIM1_Init+0x9c>)
 8001326:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001328:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8399;
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <MX_TIM1_Init+0x9c>)
 800132c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001330:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <MX_TIM1_Init+0x9c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_TIM1_Init+0x9c>)
 800133a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800133e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_TIM1_Init+0x9c>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_TIM1_Init+0x9c>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_TIM1_Init+0x9c>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001352:	4814      	ldr	r0, [pc, #80]	; (80013a4 <MX_TIM1_Init+0x9c>)
 8001354:	f002 fa7c 	bl	8003850 <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800135e:	f000 f95b 	bl	8001618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001366:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4619      	mov	r1, r3
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <MX_TIM1_Init+0x9c>)
 8001370:	f002 fce8 	bl	8003d44 <HAL_TIM_ConfigClockSource>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800137a:	f000 f94d 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001386:	463b      	mov	r3, r7
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <MX_TIM1_Init+0x9c>)
 800138c:	f003 f886 	bl	800449c <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001396:	f000 f93f 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000140 	.word	0x20000140
 80013a8:	40010000 	.word	0x40010000

080013ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ce:	4b27      	ldr	r3, [pc, #156]	; (800146c <MX_TIM3_Init+0xc0>)
 80013d0:	4a27      	ldr	r2, [pc, #156]	; (8001470 <MX_TIM3_Init+0xc4>)
 80013d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <MX_TIM3_Init+0xc0>)
 80013d6:	2253      	movs	r2, #83	; 0x53
 80013d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <MX_TIM3_Init+0xc0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80013e0:	4b22      	ldr	r3, [pc, #136]	; (800146c <MX_TIM3_Init+0xc0>)
 80013e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <MX_TIM3_Init+0xc0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_TIM3_Init+0xc0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013f4:	481d      	ldr	r0, [pc, #116]	; (800146c <MX_TIM3_Init+0xc0>)
 80013f6:	f002 fa7a 	bl	80038ee <HAL_TIM_PWM_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001400:	f000 f90a 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	4619      	mov	r1, r3
 8001412:	4816      	ldr	r0, [pc, #88]	; (800146c <MX_TIM3_Init+0xc0>)
 8001414:	f003 f842 	bl	800449c <HAL_TIMEx_MasterConfigSynchronization>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800141e:	f000 f8fb 	bl	8001618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001422:	2360      	movs	r3, #96	; 0x60
 8001424:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2200      	movs	r2, #0
 8001436:	4619      	mov	r1, r3
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <MX_TIM3_Init+0xc0>)
 800143a:	f002 fbbd 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001444:	f000 f8e8 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2204      	movs	r2, #4
 800144c:	4619      	mov	r1, r3
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <MX_TIM3_Init+0xc0>)
 8001450:	f002 fbb2 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800145a:	f000 f8dd 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800145e:	4803      	ldr	r0, [pc, #12]	; (800146c <MX_TIM3_Init+0xc0>)
 8001460:	f000 f998 	bl	8001794 <HAL_TIM_MspPostInit>

}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200000fc 	.word	0x200000fc
 8001470:	40000400 	.word	0x40000400

08001474 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_USART2_UART_Init+0x50>)
 800147c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014ac:	f003 f878 	bl	80045a0 <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014b6:	f000 f8af 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000184 	.word	0x20000184
 80014c4:	40004400 	.word	0x40004400

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <MX_GPIO_Init+0xe0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a30      	ldr	r2, [pc, #192]	; (80015a8 <MX_GPIO_Init+0xe0>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <MX_GPIO_Init+0xe0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <MX_GPIO_Init+0xe0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a29      	ldr	r2, [pc, #164]	; (80015a8 <MX_GPIO_Init+0xe0>)
 8001504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <MX_GPIO_Init+0xe0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <MX_GPIO_Init+0xe0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a22      	ldr	r2, [pc, #136]	; (80015a8 <MX_GPIO_Init+0xe0>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <MX_GPIO_Init+0xe0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <MX_GPIO_Init+0xe0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <MX_GPIO_Init+0xe0>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <MX_GPIO_Init+0xe0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2120      	movs	r1, #32
 8001552:	4816      	ldr	r0, [pc, #88]	; (80015ac <MX_GPIO_Init+0xe4>)
 8001554:	f000 fd44 	bl	8001fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_GPIO_Init+0xe8>)
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <MX_GPIO_Init+0xec>)
 800156e:	f000 fbb5 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001572:	2320      	movs	r3, #32
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4808      	ldr	r0, [pc, #32]	; (80015ac <MX_GPIO_Init+0xe4>)
 800158a:	f000 fba7 	bl	8001cdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2028      	movs	r0, #40	; 0x28
 8001594:	f000 fb6b 	bl	8001c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001598:	2028      	movs	r0, #40	; 0x28
 800159a:	f000 fb84 	bl	8001ca6 <HAL_NVIC_EnableIRQ>

}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	; 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020000 	.word	0x40020000
 80015b0:	10210000 	.word	0x10210000
 80015b4:	40020800 	.word	0x40020800

080015b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// 5Hz update
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a05      	ldr	r2, [pc, #20]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d102      	bne.n	80015d0 <HAL_TIM_PeriodElapsedCallback+0x18>
		updateReady = 1;
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
	}
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40010000 	.word	0x40010000
 80015e0:	20000090 	.word	0x20000090

080015e4 <HAL_GPIO_EXTI_Callback>:

// calibrate button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin){
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015f4:	d107      	bne.n	8001606 <HAL_GPIO_EXTI_Callback+0x22>
		// set offset flag
		offset = 1;
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_GPIO_EXTI_Callback+0x2c>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

		//test interrupt
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2120      	movs	r1, #32
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <HAL_GPIO_EXTI_Callback+0x30>)
 8001602:	f000 fced 	bl	8001fe0 <HAL_GPIO_WritePin>

	}
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000094 	.word	0x20000094
 8001614:	40020000 	.word	0x40020000

08001618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800161e:	e7fe      	b.n	800161e <Error_Handler+0x6>

08001620 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_MspInit+0x4c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a0f      	ldr	r2, [pc, #60]	; (800166c <HAL_MspInit+0x4c>)
 8001630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_MspInit+0x4c>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_MspInit+0x4c>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_MspInit+0x4c>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_MspInit+0x4c>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800165e:	2007      	movs	r0, #7
 8001660:	f000 fafa 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <HAL_I2C_MspInit+0x84>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12b      	bne.n	80016ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ae:	23c0      	movs	r3, #192	; 0xc0
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b2:	2312      	movs	r3, #18
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016be:	2304      	movs	r3, #4
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <HAL_I2C_MspInit+0x8c>)
 80016ca:	f000 fb07 	bl	8001cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	; 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40005400 	.word	0x40005400
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020400 	.word	0x40020400

08001700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <HAL_TIM_Base_MspInit+0x48>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d115      	bne.n	800173e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_TIM_Base_MspInit+0x4c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a0c      	ldr	r2, [pc, #48]	; (800174c <HAL_TIM_Base_MspInit+0x4c>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_TIM_Base_MspInit+0x4c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2019      	movs	r0, #25
 8001734:	f000 fa9b 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001738:	2019      	movs	r0, #25
 800173a:	f000 fab4 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40010000 	.word	0x40010000
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0b      	ldr	r2, [pc, #44]	; (800178c <HAL_TIM_PWM_MspInit+0x3c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d10d      	bne.n	800177e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_TIM_PWM_MspInit+0x40>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a09      	ldr	r2, [pc, #36]	; (8001790 <HAL_TIM_PWM_MspInit+0x40>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <HAL_TIM_PWM_MspInit+0x40>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40000400 	.word	0x40000400
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a12      	ldr	r2, [pc, #72]	; (80017fc <HAL_TIM_MspPostInit+0x68>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d11d      	bne.n	80017f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_TIM_MspPostInit+0x6c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_TIM_MspPostInit+0x6c>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_TIM_MspPostInit+0x6c>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = xLED_Pin|yLED_Pin;
 80017d2:	23c0      	movs	r3, #192	; 0xc0
 80017d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	; (8001804 <HAL_TIM_MspPostInit+0x70>)
 80017ee:	f000 fa75 	bl	8001cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3720      	adds	r7, #32
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40000400 	.word	0x40000400
 8001800:	40023800 	.word	0x40023800
 8001804:	40020000 	.word	0x40020000

08001808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_UART_MspInit+0x84>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d12b      	bne.n	8001882 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_UART_MspInit+0x88>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a17      	ldr	r2, [pc, #92]	; (8001890 <HAL_UART_MspInit+0x88>)
 8001834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_UART_MspInit+0x88>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_UART_MspInit+0x88>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a10      	ldr	r2, [pc, #64]	; (8001890 <HAL_UART_MspInit+0x88>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_UART_MspInit+0x88>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001862:	230c      	movs	r3, #12
 8001864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001872:	2307      	movs	r3, #7
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <HAL_UART_MspInit+0x8c>)
 800187e:	f000 fa2d 	bl	8001cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001882:	bf00      	nop
 8001884:	3728      	adds	r7, #40	; 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40004400 	.word	0x40004400
 8001890:	40023800 	.word	0x40023800
 8001894:	40020000 	.word	0x40020000

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800189c:	e7fe      	b.n	800189c <NMI_Handler+0x4>

0800189e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <MemManage_Handler+0x4>

080018aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e4:	f000 f8a6 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018f2:	f002 f859 	bl	80039a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000140 	.word	0x20000140

08001900 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001904:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001908:	f000 fb84 	bl	8002014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <SystemInit+0x28>)
 8001916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191a:	4a07      	ldr	r2, [pc, #28]	; (8001938 <SystemInit+0x28>)
 800191c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SystemInit+0x28>)
 8001926:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800192a:	609a      	str	r2, [r3, #8]
#endif
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800193c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001974 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001940:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001942:	e003      	b.n	800194c <LoopCopyDataInit>

08001944 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001946:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001948:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800194a:	3104      	adds	r1, #4

0800194c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800194c:	480b      	ldr	r0, [pc, #44]	; (800197c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001950:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001952:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001954:	d3f6      	bcc.n	8001944 <CopyDataInit>
  ldr  r2, =_sbss
 8001956:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001958:	e002      	b.n	8001960 <LoopFillZerobss>

0800195a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800195a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800195c:	f842 3b04 	str.w	r3, [r2], #4

08001960 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001962:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001964:	d3f9      	bcc.n	800195a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001966:	f7ff ffd3 	bl	8001910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196a:	f003 f9e9 	bl	8004d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196e:	f7ff fc0d 	bl	800118c <main>
  bx  lr    
 8001972:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001974:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001978:	08006308 	.word	0x08006308
  ldr  r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001980:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001984:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001988:	200001d0 	.word	0x200001d0

0800198c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC_IRQHandler>
	...

08001990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0d      	ldr	r2, [pc, #52]	; (80019d0 <HAL_Init+0x40>)
 800199a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800199e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <HAL_Init+0x40>)
 80019a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_Init+0x40>)
 80019b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b8:	2003      	movs	r0, #3
 80019ba:	f000 f94d 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f808 	bl	80019d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c4:	f7ff fe2c 	bl	8001620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023c00 	.word	0x40023c00

080019d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x54>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_InitTick+0x58>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f965 	bl	8001cc2 <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00e      	b.n	8001a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d80a      	bhi.n	8001a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f000 f92d 	bl	8001c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_InitTick+0x5c>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	20000004 	.word	0x20000004

08001a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x20>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x24>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_IncTick+0x24>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008
 8001a58:	200001cc 	.word	0x200001cc

08001a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_GetTick+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	200001cc 	.word	0x200001cc

08001a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff ffee 	bl	8001a5c <HAL_GetTick>
 8001a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8c:	d005      	beq.n	8001a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_Delay+0x40>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a9a:	bf00      	nop
 8001a9c:	f7ff ffde 	bl	8001a5c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d8f7      	bhi.n	8001a9c <HAL_Delay+0x28>
  {
  }
}
 8001aac:	bf00      	nop
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000008 	.word	0x20000008

08001ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <__NVIC_GetPriorityGrouping+0x18>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f003 0307 	and.w	r3, r3, #7
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db0b      	blt.n	8001b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	4907      	ldr	r1, [pc, #28]	; (8001b54 <__NVIC_EnableIRQ+0x38>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e100 	.word	0xe000e100

08001b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db0a      	blt.n	8001b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <__NVIC_SetPriority+0x4c>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b80:	e00a      	b.n	8001b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4908      	ldr	r1, [pc, #32]	; (8001ba8 <__NVIC_SetPriority+0x50>)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	3b04      	subs	r3, #4
 8001b90:	0112      	lsls	r2, r2, #4
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	761a      	strb	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000e100 	.word	0xe000e100
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f1c3 0307 	rsb	r3, r3, #7
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	bf28      	it	cs
 8001bca:	2304      	movcs	r3, #4
 8001bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	2b06      	cmp	r3, #6
 8001bd4:	d902      	bls.n	8001bdc <NVIC_EncodePriority+0x30>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3b03      	subs	r3, #3
 8001bda:	e000      	b.n	8001bde <NVIC_EncodePriority+0x32>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	f04f 32ff 	mov.w	r2, #4294967295
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	401a      	ands	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	4313      	orrs	r3, r2
         );
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f7ff ff8e 	bl	8001b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff29 	bl	8001ab8 <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff3e 	bl	8001b00 <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff8e 	bl	8001bac <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5d 	bl	8001b58 <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff31 	bl	8001b1c <__NVIC_EnableIRQ>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffa2 	bl	8001c14 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	e159      	b.n	8001fac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	f040 8148 	bne.w	8001fa6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d00b      	beq.n	8001d36 <HAL_GPIO_Init+0x5a>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d007      	beq.n	8001d36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d2a:	2b11      	cmp	r3, #17
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b12      	cmp	r3, #18
 8001d34:	d130      	bne.n	8001d98 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 0201 	and.w	r2, r3, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0xfc>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b12      	cmp	r3, #18
 8001dd6:	d123      	bne.n	8001e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	08da      	lsrs	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3208      	adds	r2, #8
 8001de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	220f      	movs	r2, #15
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	08da      	lsrs	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3208      	adds	r2, #8
 8001e1a:	69b9      	ldr	r1, [r7, #24]
 8001e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0203 	and.w	r2, r3, #3
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80a2 	beq.w	8001fa6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b56      	ldr	r3, [pc, #344]	; (8001fc0 <HAL_GPIO_Init+0x2e4>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	4a55      	ldr	r2, [pc, #340]	; (8001fc0 <HAL_GPIO_Init+0x2e4>)
 8001e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e70:	6453      	str	r3, [r2, #68]	; 0x44
 8001e72:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_GPIO_Init+0x2e4>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7e:	4a51      	ldr	r2, [pc, #324]	; (8001fc4 <HAL_GPIO_Init+0x2e8>)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	220f      	movs	r2, #15
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a48      	ldr	r2, [pc, #288]	; (8001fc8 <HAL_GPIO_Init+0x2ec>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d019      	beq.n	8001ede <HAL_GPIO_Init+0x202>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a47      	ldr	r2, [pc, #284]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_GPIO_Init+0x1fe>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a46      	ldr	r2, [pc, #280]	; (8001fd0 <HAL_GPIO_Init+0x2f4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00d      	beq.n	8001ed6 <HAL_GPIO_Init+0x1fa>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a45      	ldr	r2, [pc, #276]	; (8001fd4 <HAL_GPIO_Init+0x2f8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <HAL_GPIO_Init+0x1f6>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a44      	ldr	r2, [pc, #272]	; (8001fd8 <HAL_GPIO_Init+0x2fc>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d101      	bne.n	8001ece <HAL_GPIO_Init+0x1f2>
 8001eca:	2304      	movs	r3, #4
 8001ecc:	e008      	b.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001ece:	2307      	movs	r3, #7
 8001ed0:	e006      	b.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e004      	b.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e002      	b.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	f002 0203 	and.w	r2, r2, #3
 8001ee6:	0092      	lsls	r2, r2, #2
 8001ee8:	4093      	lsls	r3, r2
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef0:	4934      	ldr	r1, [pc, #208]	; (8001fc4 <HAL_GPIO_Init+0x2e8>)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	089b      	lsrs	r3, r3, #2
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001efe:	4b37      	ldr	r3, [pc, #220]	; (8001fdc <HAL_GPIO_Init+0x300>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f22:	4a2e      	ldr	r2, [pc, #184]	; (8001fdc <HAL_GPIO_Init+0x300>)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f28:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <HAL_GPIO_Init+0x300>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4c:	4a23      	ldr	r2, [pc, #140]	; (8001fdc <HAL_GPIO_Init+0x300>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f52:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_GPIO_Init+0x300>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f76:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <HAL_GPIO_Init+0x300>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_GPIO_Init+0x300>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <HAL_GPIO_Init+0x300>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b0f      	cmp	r3, #15
 8001fb0:	f67f aea2 	bls.w	8001cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3724      	adds	r7, #36	; 0x24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	40020400 	.word	0x40020400
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020c00 	.word	0x40020c00
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40013c00 	.word	0x40013c00

08001fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	807b      	strh	r3, [r7, #2]
 8001fec:	4613      	mov	r3, r2
 8001fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff0:	787b      	ldrb	r3, [r7, #1]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ffc:	e003      	b.n	8002006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ffe:	887b      	ldrh	r3, [r7, #2]
 8002000:	041a      	lsls	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	619a      	str	r2, [r3, #24]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d006      	beq.n	8002038 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fad6 	bl	80015e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40013c00 	.word	0x40013c00

08002044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e11f      	b.n	8002296 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d106      	bne.n	8002070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fb00 	bl	8001670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2224      	movs	r2, #36	; 0x24
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002096:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020a8:	f001 fbaa 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 80020ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4a7b      	ldr	r2, [pc, #492]	; (80022a0 <HAL_I2C_Init+0x25c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d807      	bhi.n	80020c8 <HAL_I2C_Init+0x84>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a7a      	ldr	r2, [pc, #488]	; (80022a4 <HAL_I2C_Init+0x260>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	bf94      	ite	ls
 80020c0:	2301      	movls	r3, #1
 80020c2:	2300      	movhi	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	e006      	b.n	80020d6 <HAL_I2C_Init+0x92>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4a77      	ldr	r2, [pc, #476]	; (80022a8 <HAL_I2C_Init+0x264>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	bf94      	ite	ls
 80020d0:	2301      	movls	r3, #1
 80020d2:	2300      	movhi	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0db      	b.n	8002296 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4a72      	ldr	r2, [pc, #456]	; (80022ac <HAL_I2C_Init+0x268>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	0c9b      	lsrs	r3, r3, #18
 80020e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a64      	ldr	r2, [pc, #400]	; (80022a0 <HAL_I2C_Init+0x25c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d802      	bhi.n	8002118 <HAL_I2C_Init+0xd4>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	3301      	adds	r3, #1
 8002116:	e009      	b.n	800212c <HAL_I2C_Init+0xe8>
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	4a63      	ldr	r2, [pc, #396]	; (80022b0 <HAL_I2C_Init+0x26c>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	099b      	lsrs	r3, r3, #6
 800212a:	3301      	adds	r3, #1
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	430b      	orrs	r3, r1
 8002132:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800213e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4956      	ldr	r1, [pc, #344]	; (80022a0 <HAL_I2C_Init+0x25c>)
 8002148:	428b      	cmp	r3, r1
 800214a:	d80d      	bhi.n	8002168 <HAL_I2C_Init+0x124>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1e59      	subs	r1, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fbb1 f3f3 	udiv	r3, r1, r3
 800215a:	3301      	adds	r3, #1
 800215c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002160:	2b04      	cmp	r3, #4
 8002162:	bf38      	it	cc
 8002164:	2304      	movcc	r3, #4
 8002166:	e04f      	b.n	8002208 <HAL_I2C_Init+0x1c4>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d111      	bne.n	8002194 <HAL_I2C_Init+0x150>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1e58      	subs	r0, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	440b      	add	r3, r1
 800217e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002182:	3301      	adds	r3, #1
 8002184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf0c      	ite	eq
 800218c:	2301      	moveq	r3, #1
 800218e:	2300      	movne	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	e012      	b.n	80021ba <HAL_I2C_Init+0x176>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1e58      	subs	r0, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6859      	ldr	r1, [r3, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	0099      	lsls	r1, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021aa:	3301      	adds	r3, #1
 80021ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf0c      	ite	eq
 80021b4:	2301      	moveq	r3, #1
 80021b6:	2300      	movne	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_Init+0x17e>
 80021be:	2301      	movs	r3, #1
 80021c0:	e022      	b.n	8002208 <HAL_I2C_Init+0x1c4>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10e      	bne.n	80021e8 <HAL_I2C_Init+0x1a4>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1e58      	subs	r0, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6859      	ldr	r1, [r3, #4]
 80021d2:	460b      	mov	r3, r1
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	440b      	add	r3, r1
 80021d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e6:	e00f      	b.n	8002208 <HAL_I2C_Init+0x1c4>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1e58      	subs	r0, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	0099      	lsls	r1, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fe:	3301      	adds	r3, #1
 8002200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002204:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	6809      	ldr	r1, [r1, #0]
 800220c:	4313      	orrs	r3, r2
 800220e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6911      	ldr	r1, [r2, #16]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68d2      	ldr	r2, [r2, #12]
 8002242:	4311      	orrs	r1, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	430b      	orrs	r3, r1
 800224a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	000186a0 	.word	0x000186a0
 80022a4:	001e847f 	.word	0x001e847f
 80022a8:	003d08ff 	.word	0x003d08ff
 80022ac:	431bde83 	.word	0x431bde83
 80022b0:	10624dd3 	.word	0x10624dd3

080022b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	461a      	mov	r2, r3
 80022c0:	460b      	mov	r3, r1
 80022c2:	817b      	strh	r3, [r7, #10]
 80022c4:	4613      	mov	r3, r2
 80022c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022c8:	f7ff fbc8 	bl	8001a5c <HAL_GetTick>
 80022cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	f040 80e0 	bne.w	800249c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2319      	movs	r3, #25
 80022e2:	2201      	movs	r2, #1
 80022e4:	4970      	ldr	r1, [pc, #448]	; (80024a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 fc72 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
 80022f4:	e0d3      	b.n	800249e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_I2C_Master_Transmit+0x50>
 8002300:	2302      	movs	r3, #2
 8002302:	e0cc      	b.n	800249e <HAL_I2C_Master_Transmit+0x1ea>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b01      	cmp	r3, #1
 8002318:	d007      	beq.n	800232a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0201 	orr.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002338:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2221      	movs	r2, #33	; 0x21
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2210      	movs	r2, #16
 8002346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	893a      	ldrh	r2, [r7, #8]
 800235a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4a50      	ldr	r2, [pc, #320]	; (80024ac <HAL_I2C_Master_Transmit+0x1f8>)
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800236c:	8979      	ldrh	r1, [r7, #10]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	6a3a      	ldr	r2, [r7, #32]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 fac2 	bl	80028fc <I2C_MasterRequestWrite>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e08d      	b.n	800249e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002398:	e066      	b.n	8002468 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	6a39      	ldr	r1, [r7, #32]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fcec 	bl	8002d7c <I2C_WaitOnTXEFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00d      	beq.n	80023c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d107      	bne.n	80023c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e06b      	b.n	800249e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	781a      	ldrb	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b04      	cmp	r3, #4
 8002402:	d11b      	bne.n	800243c <HAL_I2C_Master_Transmit+0x188>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	d017      	beq.n	800243c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	6a39      	ldr	r1, [r7, #32]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fcdc 	bl	8002dfe <I2C_WaitOnBTFFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00d      	beq.n	8002468 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	2b04      	cmp	r3, #4
 8002452:	d107      	bne.n	8002464 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002462:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e01a      	b.n	800249e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d194      	bne.n	800239a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	e000      	b.n	800249e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800249c:	2302      	movs	r3, #2
  }
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	00100002 	.word	0x00100002
 80024ac:	ffff0000 	.word	0xffff0000

080024b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	; 0x30
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	4608      	mov	r0, r1
 80024ba:	4611      	mov	r1, r2
 80024bc:	461a      	mov	r2, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	817b      	strh	r3, [r7, #10]
 80024c2:	460b      	mov	r3, r1
 80024c4:	813b      	strh	r3, [r7, #8]
 80024c6:	4613      	mov	r3, r2
 80024c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024ca:	f7ff fac7 	bl	8001a5c <HAL_GetTick>
 80024ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b20      	cmp	r3, #32
 80024da:	f040 8208 	bne.w	80028ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2319      	movs	r3, #25
 80024e4:	2201      	movs	r2, #1
 80024e6:	497b      	ldr	r1, [pc, #492]	; (80026d4 <HAL_I2C_Mem_Read+0x224>)
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fb71 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
 80024f6:	e1fb      	b.n	80028f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_I2C_Mem_Read+0x56>
 8002502:	2302      	movs	r3, #2
 8002504:	e1f4      	b.n	80028f0 <HAL_I2C_Mem_Read+0x440>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b01      	cmp	r3, #1
 800251a:	d007      	beq.n	800252c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800253a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2222      	movs	r2, #34	; 0x22
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2240      	movs	r2, #64	; 0x40
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002556:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800255c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a5b      	ldr	r2, [pc, #364]	; (80026d8 <HAL_I2C_Mem_Read+0x228>)
 800256c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800256e:	88f8      	ldrh	r0, [r7, #6]
 8002570:	893a      	ldrh	r2, [r7, #8]
 8002572:	8979      	ldrh	r1, [r7, #10]
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	4603      	mov	r3, r0
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fa3e 	bl	8002a00 <I2C_RequestMemoryRead>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e1b0      	b.n	80028f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002592:	2b00      	cmp	r3, #0
 8002594:	d113      	bne.n	80025be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	623b      	str	r3, [r7, #32]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	623b      	str	r3, [r7, #32]
 80025aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	e184      	b.n	80028c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d11b      	bne.n	80025fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e164      	b.n	80028c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	2b02      	cmp	r3, #2
 8002604:	d11b      	bne.n	800263e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002614:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	e144      	b.n	80028c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002654:	e138      	b.n	80028c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	2b03      	cmp	r3, #3
 800265c:	f200 80f1 	bhi.w	8002842 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	2b01      	cmp	r3, #1
 8002666:	d123      	bne.n	80026b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fc07 	bl	8002e80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e139      	b.n	80028f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026ae:	e10b      	b.n	80028c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d14e      	bne.n	8002756 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026be:	2200      	movs	r2, #0
 80026c0:	4906      	ldr	r1, [pc, #24]	; (80026dc <HAL_I2C_Mem_Read+0x22c>)
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fa84 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e10e      	b.n	80028f0 <HAL_I2C_Mem_Read+0x440>
 80026d2:	bf00      	nop
 80026d4:	00100002 	.word	0x00100002
 80026d8:	ffff0000 	.word	0xffff0000
 80026dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002754:	e0b8      	b.n	80028c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275c:	2200      	movs	r2, #0
 800275e:	4966      	ldr	r1, [pc, #408]	; (80028f8 <HAL_I2C_Mem_Read+0x448>)
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fa35 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0bf      	b.n	80028f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	2200      	movs	r2, #0
 80027ba:	494f      	ldr	r1, [pc, #316]	; (80028f8 <HAL_I2C_Mem_Read+0x448>)
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 fa07 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e091      	b.n	80028f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002840:	e042      	b.n	80028c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fb1a 	bl	8002e80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e04c      	b.n	80028f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b04      	cmp	r3, #4
 8002894:	d118      	bne.n	80028c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f47f aec2 	bne.w	8002656 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
  }
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3728      	adds	r7, #40	; 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	00010004 	.word	0x00010004

080028fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	460b      	mov	r3, r1
 800290a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d006      	beq.n	8002926 <I2C_MasterRequestWrite+0x2a>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d003      	beq.n	8002926 <I2C_MasterRequestWrite+0x2a>
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002924:	d108      	bne.n	8002938 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e00b      	b.n	8002950 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	2b12      	cmp	r3, #18
 800293e:	d107      	bne.n	8002950 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800294e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 f937 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00d      	beq.n	8002984 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002976:	d103      	bne.n	8002980 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800297e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e035      	b.n	80029f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800298c:	d108      	bne.n	80029a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800298e:	897b      	ldrh	r3, [r7, #10]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800299c:	611a      	str	r2, [r3, #16]
 800299e:	e01b      	b.n	80029d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029a0:	897b      	ldrh	r3, [r7, #10]
 80029a2:	11db      	asrs	r3, r3, #7
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f003 0306 	and.w	r3, r3, #6
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f063 030f 	orn	r3, r3, #15
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	490e      	ldr	r1, [pc, #56]	; (80029f8 <I2C_MasterRequestWrite+0xfc>)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f95d 	bl	8002c7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e010      	b.n	80029f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029ce:	897b      	ldrh	r3, [r7, #10]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4907      	ldr	r1, [pc, #28]	; (80029fc <I2C_MasterRequestWrite+0x100>)
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f94d 	bl	8002c7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	00010008 	.word	0x00010008
 80029fc:	00010002 	.word	0x00010002

08002a00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	4608      	mov	r0, r1
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4603      	mov	r3, r0
 8002a10:	817b      	strh	r3, [r7, #10]
 8002a12:	460b      	mov	r3, r1
 8002a14:	813b      	strh	r3, [r7, #8]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f8c2 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00d      	beq.n	8002a6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a60:	d103      	bne.n	8002a6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e0aa      	b.n	8002bc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a6e:	897b      	ldrh	r3, [r7, #10]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	6a3a      	ldr	r2, [r7, #32]
 8002a82:	4952      	ldr	r1, [pc, #328]	; (8002bcc <I2C_RequestMemoryRead+0x1cc>)
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f8fa 	bl	8002c7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e097      	b.n	8002bc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aac:	6a39      	ldr	r1, [r7, #32]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f964 	bl	8002d7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d107      	bne.n	8002ad2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e076      	b.n	8002bc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d105      	bne.n	8002ae8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002adc:	893b      	ldrh	r3, [r7, #8]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	611a      	str	r2, [r3, #16]
 8002ae6:	e021      	b.n	8002b2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ae8:	893b      	ldrh	r3, [r7, #8]
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af8:	6a39      	ldr	r1, [r7, #32]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f93e 	bl	8002d7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d107      	bne.n	8002b1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e050      	b.n	8002bc4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b22:	893b      	ldrh	r3, [r7, #8]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2e:	6a39      	ldr	r1, [r7, #32]
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f923 	bl	8002d7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00d      	beq.n	8002b58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d107      	bne.n	8002b54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e035      	b.n	8002bc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f82b 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00d      	beq.n	8002b9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b8e:	d103      	bne.n	8002b98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e013      	b.n	8002bc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b9c:	897b      	ldrh	r3, [r7, #10]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	6a3a      	ldr	r2, [r7, #32]
 8002bb0:	4906      	ldr	r1, [pc, #24]	; (8002bcc <I2C_RequestMemoryRead+0x1cc>)
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f863 	bl	8002c7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	00010002 	.word	0x00010002

08002bd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be0:	e025      	b.n	8002c2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d021      	beq.n	8002c2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bea:	f7fe ff37 	bl	8001a5c <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d302      	bcc.n	8002c00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d116      	bne.n	8002c2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f043 0220 	orr.w	r2, r3, #32
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e023      	b.n	8002c76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	0c1b      	lsrs	r3, r3, #16
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d10d      	bne.n	8002c54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4013      	ands	r3, r2
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	bf0c      	ite	eq
 8002c4a:	2301      	moveq	r3, #1
 8002c4c:	2300      	movne	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	e00c      	b.n	8002c6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf0c      	ite	eq
 8002c66:	2301      	moveq	r3, #1
 8002c68:	2300      	movne	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d0b6      	beq.n	8002be2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c8c:	e051      	b.n	8002d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9c:	d123      	bne.n	8002ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f043 0204 	orr.w	r2, r3, #4
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e046      	b.n	8002d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d021      	beq.n	8002d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cee:	f7fe feb5 	bl	8001a5c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d302      	bcc.n	8002d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d116      	bne.n	8002d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f043 0220 	orr.w	r2, r3, #32
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e020      	b.n	8002d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d10c      	bne.n	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	43da      	mvns	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4013      	ands	r3, r2
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	bf14      	ite	ne
 8002d4e:	2301      	movne	r3, #1
 8002d50:	2300      	moveq	r3, #0
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	e00b      	b.n	8002d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	43da      	mvns	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4013      	ands	r3, r2
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bf14      	ite	ne
 8002d68:	2301      	movne	r3, #1
 8002d6a:	2300      	moveq	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d18d      	bne.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d88:	e02d      	b.n	8002de6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f8ce 	bl	8002f2c <I2C_IsAcknowledgeFailed>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e02d      	b.n	8002df6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da0:	d021      	beq.n	8002de6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da2:	f7fe fe5b 	bl	8001a5c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d302      	bcc.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d116      	bne.n	8002de6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f043 0220 	orr.w	r2, r3, #32
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e007      	b.n	8002df6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	2b80      	cmp	r3, #128	; 0x80
 8002df2:	d1ca      	bne.n	8002d8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e0a:	e02d      	b.n	8002e68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f88d 	bl	8002f2c <I2C_IsAcknowledgeFailed>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e02d      	b.n	8002e78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e22:	d021      	beq.n	8002e68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e24:	f7fe fe1a 	bl	8001a5c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d302      	bcc.n	8002e3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d116      	bne.n	8002e68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e007      	b.n	8002e78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d1ca      	bne.n	8002e0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e8c:	e042      	b.n	8002f14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d119      	bne.n	8002ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0210 	mvn.w	r2, #16
 8002ea4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e029      	b.n	8002f24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed0:	f7fe fdc4 	bl	8001a5c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d302      	bcc.n	8002ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d116      	bne.n	8002f14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e007      	b.n	8002f24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	d1b5      	bne.n	8002e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f42:	d11b      	bne.n	8002f7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f043 0204 	orr.w	r2, r3, #4
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e25b      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d075      	beq.n	8003096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002faa:	4ba3      	ldr	r3, [pc, #652]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb6:	4ba0      	ldr	r3, [pc, #640]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d112      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc2:	4b9d      	ldr	r3, [pc, #628]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fce:	d10b      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	4b99      	ldr	r3, [pc, #612]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d05b      	beq.n	8003094 <HAL_RCC_OscConfig+0x108>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d157      	bne.n	8003094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e236      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff0:	d106      	bne.n	8003000 <HAL_RCC_OscConfig+0x74>
 8002ff2:	4b91      	ldr	r3, [pc, #580]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a90      	ldr	r2, [pc, #576]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e01d      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x98>
 800300a:	4b8b      	ldr	r3, [pc, #556]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a8a      	ldr	r2, [pc, #552]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b88      	ldr	r3, [pc, #544]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a87      	ldr	r2, [pc, #540]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003024:	4b84      	ldr	r3, [pc, #528]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a83      	ldr	r2, [pc, #524]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b81      	ldr	r3, [pc, #516]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a80      	ldr	r2, [pc, #512]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe fd0a 	bl	8001a5c <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe fd06 	bl	8001a5c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e1fb      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	4b76      	ldr	r3, [pc, #472]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0xc0>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fe fcf6 	bl	8001a5c <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe fcf2 	bl	8001a5c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e1e7      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003086:	4b6c      	ldr	r3, [pc, #432]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0xe8>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d063      	beq.n	800316a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030a2:	4b65      	ldr	r3, [pc, #404]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ae:	4b62      	ldr	r3, [pc, #392]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d11c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ba:	4b5f      	ldr	r3, [pc, #380]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d116      	bne.n	80030f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	4b5c      	ldr	r3, [pc, #368]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_RCC_OscConfig+0x152>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e1bb      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030de:	4b56      	ldr	r3, [pc, #344]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4952      	ldr	r1, [pc, #328]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	e03a      	b.n	800316a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030fc:	4b4f      	ldr	r3, [pc, #316]	; (800323c <HAL_RCC_OscConfig+0x2b0>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe fcab 	bl	8001a5c <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310a:	f7fe fca7 	bl	8001a5c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e19c      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	4b46      	ldr	r3, [pc, #280]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b43      	ldr	r3, [pc, #268]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4940      	ldr	r1, [pc, #256]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
 800313c:	e015      	b.n	800316a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313e:	4b3f      	ldr	r3, [pc, #252]	; (800323c <HAL_RCC_OscConfig+0x2b0>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe fc8a 	bl	8001a5c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314c:	f7fe fc86 	bl	8001a5c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e17b      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	4b36      	ldr	r3, [pc, #216]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d030      	beq.n	80031d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d016      	beq.n	80031ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317e:	4b30      	ldr	r3, [pc, #192]	; (8003240 <HAL_RCC_OscConfig+0x2b4>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe fc6a 	bl	8001a5c <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800318c:	f7fe fc66 	bl	8001a5c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e15b      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	4b26      	ldr	r3, [pc, #152]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x200>
 80031aa:	e015      	b.n	80031d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ac:	4b24      	ldr	r3, [pc, #144]	; (8003240 <HAL_RCC_OscConfig+0x2b4>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b2:	f7fe fc53 	bl	8001a5c <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ba:	f7fe fc4f 	bl	8001a5c <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e144      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031cc:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f0      	bne.n	80031ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80a0 	beq.w	8003326 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e6:	2300      	movs	r3, #0
 80031e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10f      	bne.n	8003216 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003204:	6413      	str	r3, [r2, #64]	; 0x40
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_RCC_OscConfig+0x2b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d121      	bne.n	8003266 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <HAL_RCC_OscConfig+0x2b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a07      	ldr	r2, [pc, #28]	; (8003244 <HAL_RCC_OscConfig+0x2b8>)
 8003228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322e:	f7fe fc15 	bl	8001a5c <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003234:	e011      	b.n	800325a <HAL_RCC_OscConfig+0x2ce>
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	42470000 	.word	0x42470000
 8003240:	42470e80 	.word	0x42470e80
 8003244:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003248:	f7fe fc08 	bl	8001a5c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0fd      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325a:	4b81      	ldr	r3, [pc, #516]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d106      	bne.n	800327c <HAL_RCC_OscConfig+0x2f0>
 800326e:	4b7d      	ldr	r3, [pc, #500]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	4a7c      	ldr	r2, [pc, #496]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6713      	str	r3, [r2, #112]	; 0x70
 800327a:	e01c      	b.n	80032b6 <HAL_RCC_OscConfig+0x32a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b05      	cmp	r3, #5
 8003282:	d10c      	bne.n	800329e <HAL_RCC_OscConfig+0x312>
 8003284:	4b77      	ldr	r3, [pc, #476]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	4a76      	ldr	r2, [pc, #472]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	6713      	str	r3, [r2, #112]	; 0x70
 8003290:	4b74      	ldr	r3, [pc, #464]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a73      	ldr	r2, [pc, #460]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	e00b      	b.n	80032b6 <HAL_RCC_OscConfig+0x32a>
 800329e:	4b71      	ldr	r3, [pc, #452]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a70      	ldr	r2, [pc, #448]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
 80032aa:	4b6e      	ldr	r3, [pc, #440]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a6d      	ldr	r2, [pc, #436]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d015      	beq.n	80032ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7fe fbcd 	bl	8001a5c <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c4:	e00a      	b.n	80032dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fe fbc9 	bl	8001a5c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e0bc      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	4b61      	ldr	r3, [pc, #388]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0ee      	beq.n	80032c6 <HAL_RCC_OscConfig+0x33a>
 80032e8:	e014      	b.n	8003314 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ea:	f7fe fbb7 	bl	8001a5c <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f0:	e00a      	b.n	8003308 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f2:	f7fe fbb3 	bl	8001a5c <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003300:	4293      	cmp	r3, r2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e0a6      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003308:	4b56      	ldr	r3, [pc, #344]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1ee      	bne.n	80032f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003314:	7dfb      	ldrb	r3, [r7, #23]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d105      	bne.n	8003326 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331a:	4b52      	ldr	r3, [pc, #328]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a51      	ldr	r2, [pc, #324]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8092 	beq.w	8003454 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003330:	4b4c      	ldr	r3, [pc, #304]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b08      	cmp	r3, #8
 800333a:	d05c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d141      	bne.n	80033c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003344:	4b48      	ldr	r3, [pc, #288]	; (8003468 <HAL_RCC_OscConfig+0x4dc>)
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fe fb87 	bl	8001a5c <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003352:	f7fe fb83 	bl	8001a5c <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e078      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003364:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f0      	bne.n	8003352 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	019b      	lsls	r3, r3, #6
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	085b      	lsrs	r3, r3, #1
 8003388:	3b01      	subs	r3, #1
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	061b      	lsls	r3, r3, #24
 8003394:	4933      	ldr	r1, [pc, #204]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800339a:	4b33      	ldr	r3, [pc, #204]	; (8003468 <HAL_RCC_OscConfig+0x4dc>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe fb5c 	bl	8001a5c <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fe fb58 	bl	8001a5c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e04d      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ba:	4b2a      	ldr	r3, [pc, #168]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x41c>
 80033c6:	e045      	b.n	8003454 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c8:	4b27      	ldr	r3, [pc, #156]	; (8003468 <HAL_RCC_OscConfig+0x4dc>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fe fb45 	bl	8001a5c <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fe fb41 	bl	8001a5c <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e036      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e8:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x44a>
 80033f4:	e02e      	b.n	8003454 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e029      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003402:	4b18      	ldr	r3, [pc, #96]	; (8003464 <HAL_RCC_OscConfig+0x4d8>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	429a      	cmp	r2, r3
 8003414:	d11c      	bne.n	8003450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d115      	bne.n	8003450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800342a:	4013      	ands	r3, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003430:	4293      	cmp	r3, r2
 8003432:	d10d      	bne.n	8003450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d106      	bne.n	8003450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40007000 	.word	0x40007000
 8003464:	40023800 	.word	0x40023800
 8003468:	42470060 	.word	0x42470060

0800346c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0cc      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003480:	4b68      	ldr	r3, [pc, #416]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d90c      	bls.n	80034a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b65      	ldr	r3, [pc, #404]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b63      	ldr	r3, [pc, #396]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0b8      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d020      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c0:	4b59      	ldr	r3, [pc, #356]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4a58      	ldr	r2, [pc, #352]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d8:	4b53      	ldr	r3, [pc, #332]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a52      	ldr	r2, [pc, #328]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e4:	4b50      	ldr	r3, [pc, #320]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	494d      	ldr	r1, [pc, #308]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d044      	beq.n	800358c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d107      	bne.n	800351a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350a:	4b47      	ldr	r3, [pc, #284]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d119      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e07f      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d003      	beq.n	800352a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003526:	2b03      	cmp	r3, #3
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352a:	4b3f      	ldr	r3, [pc, #252]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e06f      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	4b3b      	ldr	r3, [pc, #236]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e067      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800354a:	4b37      	ldr	r3, [pc, #220]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f023 0203 	bic.w	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4934      	ldr	r1, [pc, #208]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	4313      	orrs	r3, r2
 800355a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800355c:	f7fe fa7e 	bl	8001a5c <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	e00a      	b.n	800357a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003564:	f7fe fa7a 	bl	8001a5c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e04f      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 020c 	and.w	r2, r3, #12
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	429a      	cmp	r2, r3
 800358a:	d1eb      	bne.n	8003564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800358c:	4b25      	ldr	r3, [pc, #148]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d20c      	bcs.n	80035b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b22      	ldr	r3, [pc, #136]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b20      	ldr	r3, [pc, #128]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e032      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c0:	4b19      	ldr	r3, [pc, #100]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4916      	ldr	r1, [pc, #88]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035de:	4b12      	ldr	r3, [pc, #72]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	490e      	ldr	r1, [pc, #56]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035f2:	f000 f821 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 80035f6:	4601      	mov	r1, r0
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	4a0a      	ldr	r2, [pc, #40]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003604:	5cd3      	ldrb	r3, [r2, r3]
 8003606:	fa21 f303 	lsr.w	r3, r1, r3
 800360a:	4a09      	ldr	r2, [pc, #36]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_RCC_ClockConfig+0x1c8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe f9de 	bl	80019d4 <HAL_InitTick>

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023c00 	.word	0x40023c00
 8003628:	40023800 	.word	0x40023800
 800362c:	08006250 	.word	0x08006250
 8003630:	20000000 	.word	0x20000000
 8003634:	20000004 	.word	0x20000004

08003638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	2300      	movs	r3, #0
 8003648:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800364e:	4b63      	ldr	r3, [pc, #396]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b04      	cmp	r3, #4
 8003658:	d007      	beq.n	800366a <HAL_RCC_GetSysClockFreq+0x32>
 800365a:	2b08      	cmp	r3, #8
 800365c:	d008      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x38>
 800365e:	2b00      	cmp	r3, #0
 8003660:	f040 80b4 	bne.w	80037cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003664:	4b5e      	ldr	r3, [pc, #376]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003666:	60bb      	str	r3, [r7, #8]
       break;
 8003668:	e0b3      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800366a:	4b5e      	ldr	r3, [pc, #376]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800366c:	60bb      	str	r3, [r7, #8]
      break;
 800366e:	e0b0      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003670:	4b5a      	ldr	r3, [pc, #360]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003678:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800367a:	4b58      	ldr	r3, [pc, #352]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d04a      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003686:	4b55      	ldr	r3, [pc, #340]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	f04f 0400 	mov.w	r4, #0
 8003690:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	ea03 0501 	and.w	r5, r3, r1
 800369c:	ea04 0602 	and.w	r6, r4, r2
 80036a0:	4629      	mov	r1, r5
 80036a2:	4632      	mov	r2, r6
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	f04f 0400 	mov.w	r4, #0
 80036ac:	0154      	lsls	r4, r2, #5
 80036ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036b2:	014b      	lsls	r3, r1, #5
 80036b4:	4619      	mov	r1, r3
 80036b6:	4622      	mov	r2, r4
 80036b8:	1b49      	subs	r1, r1, r5
 80036ba:	eb62 0206 	sbc.w	r2, r2, r6
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	f04f 0400 	mov.w	r4, #0
 80036c6:	0194      	lsls	r4, r2, #6
 80036c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036cc:	018b      	lsls	r3, r1, #6
 80036ce:	1a5b      	subs	r3, r3, r1
 80036d0:	eb64 0402 	sbc.w	r4, r4, r2
 80036d4:	f04f 0100 	mov.w	r1, #0
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	00e2      	lsls	r2, r4, #3
 80036de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036e2:	00d9      	lsls	r1, r3, #3
 80036e4:	460b      	mov	r3, r1
 80036e6:	4614      	mov	r4, r2
 80036e8:	195b      	adds	r3, r3, r5
 80036ea:	eb44 0406 	adc.w	r4, r4, r6
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	0262      	lsls	r2, r4, #9
 80036f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80036fc:	0259      	lsls	r1, r3, #9
 80036fe:	460b      	mov	r3, r1
 8003700:	4614      	mov	r4, r2
 8003702:	4618      	mov	r0, r3
 8003704:	4621      	mov	r1, r4
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f04f 0400 	mov.w	r4, #0
 800370c:	461a      	mov	r2, r3
 800370e:	4623      	mov	r3, r4
 8003710:	f7fd f9f6 	bl	8000b00 <__aeabi_uldivmod>
 8003714:	4603      	mov	r3, r0
 8003716:	460c      	mov	r4, r1
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	e049      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371c:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	099b      	lsrs	r3, r3, #6
 8003722:	f04f 0400 	mov.w	r4, #0
 8003726:	f240 11ff 	movw	r1, #511	; 0x1ff
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	ea03 0501 	and.w	r5, r3, r1
 8003732:	ea04 0602 	and.w	r6, r4, r2
 8003736:	4629      	mov	r1, r5
 8003738:	4632      	mov	r2, r6
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	f04f 0400 	mov.w	r4, #0
 8003742:	0154      	lsls	r4, r2, #5
 8003744:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003748:	014b      	lsls	r3, r1, #5
 800374a:	4619      	mov	r1, r3
 800374c:	4622      	mov	r2, r4
 800374e:	1b49      	subs	r1, r1, r5
 8003750:	eb62 0206 	sbc.w	r2, r2, r6
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	f04f 0400 	mov.w	r4, #0
 800375c:	0194      	lsls	r4, r2, #6
 800375e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003762:	018b      	lsls	r3, r1, #6
 8003764:	1a5b      	subs	r3, r3, r1
 8003766:	eb64 0402 	sbc.w	r4, r4, r2
 800376a:	f04f 0100 	mov.w	r1, #0
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	00e2      	lsls	r2, r4, #3
 8003774:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003778:	00d9      	lsls	r1, r3, #3
 800377a:	460b      	mov	r3, r1
 800377c:	4614      	mov	r4, r2
 800377e:	195b      	adds	r3, r3, r5
 8003780:	eb44 0406 	adc.w	r4, r4, r6
 8003784:	f04f 0100 	mov.w	r1, #0
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	02a2      	lsls	r2, r4, #10
 800378e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003792:	0299      	lsls	r1, r3, #10
 8003794:	460b      	mov	r3, r1
 8003796:	4614      	mov	r4, r2
 8003798:	4618      	mov	r0, r3
 800379a:	4621      	mov	r1, r4
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f04f 0400 	mov.w	r4, #0
 80037a2:	461a      	mov	r2, r3
 80037a4:	4623      	mov	r3, r4
 80037a6:	f7fd f9ab 	bl	8000b00 <__aeabi_uldivmod>
 80037aa:	4603      	mov	r3, r0
 80037ac:	460c      	mov	r4, r1
 80037ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037b0:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	3301      	adds	r3, #1
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	60bb      	str	r3, [r7, #8]
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037ce:	60bb      	str	r3, [r7, #8]
      break;
 80037d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d2:	68bb      	ldr	r3, [r7, #8]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	00f42400 	.word	0x00f42400
 80037e4:	007a1200 	.word	0x007a1200

080037e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ec:	4b03      	ldr	r3, [pc, #12]	; (80037fc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000000 	.word	0x20000000

08003800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003804:	f7ff fff0 	bl	80037e8 <HAL_RCC_GetHCLKFreq>
 8003808:	4601      	mov	r1, r0
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	0a9b      	lsrs	r3, r3, #10
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	4a03      	ldr	r2, [pc, #12]	; (8003824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003816:	5cd3      	ldrb	r3, [r2, r3]
 8003818:	fa21 f303 	lsr.w	r3, r1, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40023800 	.word	0x40023800
 8003824:	08006260 	.word	0x08006260

08003828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800382c:	f7ff ffdc 	bl	80037e8 <HAL_RCC_GetHCLKFreq>
 8003830:	4601      	mov	r1, r0
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0b5b      	lsrs	r3, r3, #13
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4a03      	ldr	r2, [pc, #12]	; (800384c <HAL_RCC_GetPCLK2Freq+0x24>)
 800383e:	5cd3      	ldrb	r3, [r2, r3]
 8003840:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40023800 	.word	0x40023800
 800384c:	08006260 	.word	0x08006260

08003850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e01d      	b.n	800389e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd ff42 	bl	8001700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f000 fb38 	bl	8003f04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0201 	orr.w	r2, r2, #1
 80038bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b06      	cmp	r3, #6
 80038ce:	d007      	beq.n	80038e0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e01d      	b.n	800393c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7fd ff1b 	bl	8001750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3304      	adds	r3, #4
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f000 fae9 	bl	8003f04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2201      	movs	r2, #1
 8003954:	6839      	ldr	r1, [r7, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fd7a 	bl	8004450 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a10      	ldr	r2, [pc, #64]	; (80039a4 <HAL_TIM_PWM_Start+0x60>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d107      	bne.n	8003976 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003974:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b06      	cmp	r3, #6
 8003986:	d007      	beq.n	8003998 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40010000 	.word	0x40010000

080039a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d122      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d11b      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0202 	mvn.w	r2, #2
 80039d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fa6b 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 80039f0:	e005      	b.n	80039fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fa5d 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fa6e 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d122      	bne.n	8003a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d11b      	bne.n	8003a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0204 	mvn.w	r2, #4
 8003a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa41 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 8003a44:	e005      	b.n	8003a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa33 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fa44 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d122      	bne.n	8003aac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d11b      	bne.n	8003aac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0208 	mvn.w	r2, #8
 8003a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2204      	movs	r2, #4
 8003a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fa17 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 8003a98:	e005      	b.n	8003aa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fa09 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fa1a 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b10      	cmp	r3, #16
 8003ab8:	d122      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	2b10      	cmp	r3, #16
 8003ac6:	d11b      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0210 	mvn.w	r2, #16
 8003ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2208      	movs	r2, #8
 8003ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f9ed 	bl	8003ec6 <HAL_TIM_IC_CaptureCallback>
 8003aec:	e005      	b.n	8003afa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f9df 	bl	8003eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f9f0 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d10e      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d107      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0201 	mvn.w	r2, #1
 8003b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fd fd46 	bl	80015b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b36:	2b80      	cmp	r3, #128	; 0x80
 8003b38:	d10e      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b44:	2b80      	cmp	r3, #128	; 0x80
 8003b46:	d107      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fd1a 	bl	800458c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b62:	2b40      	cmp	r3, #64	; 0x40
 8003b64:	d10e      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d107      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f9b5 	bl	8003eee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d10e      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d107      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0220 	mvn.w	r2, #32
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fce4 	bl	8004578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e0b4      	b.n	8003d3c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	f200 809f 	bhi.w	8003d28 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c25 	.word	0x08003c25
 8003bf4:	08003d29 	.word	0x08003d29
 8003bf8:	08003d29 	.word	0x08003d29
 8003bfc:	08003d29 	.word	0x08003d29
 8003c00:	08003c65 	.word	0x08003c65
 8003c04:	08003d29 	.word	0x08003d29
 8003c08:	08003d29 	.word	0x08003d29
 8003c0c:	08003d29 	.word	0x08003d29
 8003c10:	08003ca7 	.word	0x08003ca7
 8003c14:	08003d29 	.word	0x08003d29
 8003c18:	08003d29 	.word	0x08003d29
 8003c1c:	08003d29 	.word	0x08003d29
 8003c20:	08003ce7 	.word	0x08003ce7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 f9ea 	bl	8004004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0208 	orr.w	r2, r2, #8
 8003c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0204 	bic.w	r2, r2, #4
 8003c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6999      	ldr	r1, [r3, #24]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	619a      	str	r2, [r3, #24]
      break;
 8003c62:	e062      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fa30 	bl	80040d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6999      	ldr	r1, [r3, #24]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	021a      	lsls	r2, r3, #8
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	619a      	str	r2, [r3, #24]
      break;
 8003ca4:	e041      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fa7b 	bl	80041a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0208 	orr.w	r2, r2, #8
 8003cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0204 	bic.w	r2, r2, #4
 8003cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69d9      	ldr	r1, [r3, #28]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	61da      	str	r2, [r3, #28]
      break;
 8003ce4:	e021      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fac5 	bl	800427c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69d9      	ldr	r1, [r3, #28]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	021a      	lsls	r2, r3, #8
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	61da      	str	r2, [r3, #28]
      break;
 8003d26:	e000      	b.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d28:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_TIM_ConfigClockSource+0x18>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e0a6      	b.n	8003eaa <HAL_TIM_ConfigClockSource+0x166>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b40      	cmp	r3, #64	; 0x40
 8003d92:	d067      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0x120>
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d80b      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x6c>
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d073      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d802      	bhi.n	8003da6 <HAL_TIM_ConfigClockSource+0x62>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d06f      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003da4:	e078      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d06c      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
 8003daa:	2b30      	cmp	r3, #48	; 0x30
 8003dac:	d06a      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dae:	e073      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003db0:	2b70      	cmp	r3, #112	; 0x70
 8003db2:	d00d      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0x8c>
 8003db4:	2b70      	cmp	r3, #112	; 0x70
 8003db6:	d804      	bhi.n	8003dc2 <HAL_TIM_ConfigClockSource+0x7e>
 8003db8:	2b50      	cmp	r3, #80	; 0x50
 8003dba:	d033      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0xe0>
 8003dbc:	2b60      	cmp	r3, #96	; 0x60
 8003dbe:	d041      	beq.n	8003e44 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dc0:	e06a      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc6:	d066      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x152>
 8003dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dcc:	d017      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003dce:	e063      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6899      	ldr	r1, [r3, #8]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f000 fb16 	bl	8004410 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003df2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	609a      	str	r2, [r3, #8]
      break;
 8003dfc:	e04c      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6899      	ldr	r1, [r3, #8]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f000 faff 	bl	8004410 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e20:	609a      	str	r2, [r3, #8]
      break;
 8003e22:	e039      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	461a      	mov	r2, r3
 8003e32:	f000 fa73 	bl	800431c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2150      	movs	r1, #80	; 0x50
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 facc 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 8003e42:	e029      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	461a      	mov	r2, r3
 8003e52:	f000 fa92 	bl	800437a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2160      	movs	r1, #96	; 0x60
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fabc 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 8003e62:	e019      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	461a      	mov	r2, r3
 8003e72:	f000 fa53 	bl	800431c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2140      	movs	r1, #64	; 0x40
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 faac 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 8003e82:	e009      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f000 faa3 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 8003e94:	e000      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a34      	ldr	r2, [pc, #208]	; (8003fe8 <TIM_Base_SetConfig+0xe4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00f      	beq.n	8003f3c <TIM_Base_SetConfig+0x38>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d00b      	beq.n	8003f3c <TIM_Base_SetConfig+0x38>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a31      	ldr	r2, [pc, #196]	; (8003fec <TIM_Base_SetConfig+0xe8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d007      	beq.n	8003f3c <TIM_Base_SetConfig+0x38>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a30      	ldr	r2, [pc, #192]	; (8003ff0 <TIM_Base_SetConfig+0xec>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_Base_SetConfig+0x38>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a2f      	ldr	r2, [pc, #188]	; (8003ff4 <TIM_Base_SetConfig+0xf0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d108      	bne.n	8003f4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a25      	ldr	r2, [pc, #148]	; (8003fe8 <TIM_Base_SetConfig+0xe4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01b      	beq.n	8003f8e <TIM_Base_SetConfig+0x8a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5c:	d017      	beq.n	8003f8e <TIM_Base_SetConfig+0x8a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a22      	ldr	r2, [pc, #136]	; (8003fec <TIM_Base_SetConfig+0xe8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <TIM_Base_SetConfig+0x8a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a21      	ldr	r2, [pc, #132]	; (8003ff0 <TIM_Base_SetConfig+0xec>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00f      	beq.n	8003f8e <TIM_Base_SetConfig+0x8a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a20      	ldr	r2, [pc, #128]	; (8003ff4 <TIM_Base_SetConfig+0xf0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00b      	beq.n	8003f8e <TIM_Base_SetConfig+0x8a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a1f      	ldr	r2, [pc, #124]	; (8003ff8 <TIM_Base_SetConfig+0xf4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d007      	beq.n	8003f8e <TIM_Base_SetConfig+0x8a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <TIM_Base_SetConfig+0xf8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d003      	beq.n	8003f8e <TIM_Base_SetConfig+0x8a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <TIM_Base_SetConfig+0xfc>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d108      	bne.n	8003fa0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <TIM_Base_SetConfig+0xe4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d103      	bne.n	8003fd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	615a      	str	r2, [r3, #20]
}
 8003fda:	bf00      	nop
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40010000 	.word	0x40010000
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40000800 	.word	0x40000800
 8003ff4:	40000c00 	.word	0x40000c00
 8003ff8:	40014000 	.word	0x40014000
 8003ffc:	40014400 	.word	0x40014400
 8004000:	40014800 	.word	0x40014800

08004004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f023 0201 	bic.w	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f023 0302 	bic.w	r3, r3, #2
 800404c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a1c      	ldr	r2, [pc, #112]	; (80040cc <TIM_OC1_SetConfig+0xc8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d10c      	bne.n	800407a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0308 	bic.w	r3, r3, #8
 8004066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f023 0304 	bic.w	r3, r3, #4
 8004078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a13      	ldr	r2, [pc, #76]	; (80040cc <TIM_OC1_SetConfig+0xc8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d111      	bne.n	80040a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	621a      	str	r2, [r3, #32]
}
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	40010000 	.word	0x40010000

080040d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f023 0210 	bic.w	r2, r3, #16
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 0320 	bic.w	r3, r3, #32
 800411a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <TIM_OC2_SetConfig+0xd4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d10d      	bne.n	800414c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800414a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a15      	ldr	r2, [pc, #84]	; (80041a4 <TIM_OC2_SetConfig+0xd4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d113      	bne.n	800417c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800415a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40010000 	.word	0x40010000

080041a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <TIM_OC3_SetConfig+0xd0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d10d      	bne.n	8004222 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800420c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a14      	ldr	r2, [pc, #80]	; (8004278 <TIM_OC3_SetConfig+0xd0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d113      	bne.n	8004252 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	621a      	str	r2, [r3, #32]
}
 800426c:	bf00      	nop
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	40010000 	.word	0x40010000

0800427c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	031b      	lsls	r3, r3, #12
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a10      	ldr	r2, [pc, #64]	; (8004318 <TIM_OC4_SetConfig+0x9c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d109      	bne.n	80042f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	019b      	lsls	r3, r3, #6
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40010000 	.word	0x40010000

0800431c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f023 0201 	bic.w	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f023 030a 	bic.w	r3, r3, #10
 8004358:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	621a      	str	r2, [r3, #32]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800437a:	b480      	push	{r7}
 800437c:	b087      	sub	sp, #28
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f023 0210 	bic.w	r2, r3, #16
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	031b      	lsls	r3, r3, #12
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	621a      	str	r2, [r3, #32]
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f043 0307 	orr.w	r3, r3, #7
 80043fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	609a      	str	r2, [r3, #8]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800442a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	021a      	lsls	r2, r3, #8
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	431a      	orrs	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4313      	orrs	r3, r2
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	609a      	str	r2, [r3, #8]
}
 8004444:	bf00      	nop
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	2201      	movs	r2, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1a      	ldr	r2, [r3, #32]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	43db      	mvns	r3, r3
 8004472:	401a      	ands	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a1a      	ldr	r2, [r3, #32]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	fa01 f303 	lsl.w	r3, r1, r3
 8004488:	431a      	orrs	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
	...

0800449c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e050      	b.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d018      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004500:	d013      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a18      	ldr	r2, [pc, #96]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00e      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a16      	ldr	r2, [pc, #88]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d009      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d004      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a13      	ldr	r2, [pc, #76]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d10c      	bne.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004530:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	4313      	orrs	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40010000 	.word	0x40010000
 8004568:	40000400 	.word	0x40000400
 800456c:	40000800 	.word	0x40000800
 8004570:	40000c00 	.word	0x40000c00
 8004574:	40014000 	.word	0x40014000

08004578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e03f      	b.n	8004632 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fd f91e 	bl	8001808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2224      	movs	r2, #36	; 0x24
 80045d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f829 	bl	800463c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695a      	ldr	r2, [r3, #20]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800463c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004640:	b085      	sub	sp, #20
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800467e:	f023 030c 	bic.w	r3, r3, #12
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	68f9      	ldr	r1, [r7, #12]
 8004688:	430b      	orrs	r3, r1
 800468a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046aa:	f040 818b 	bne.w	80049c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4ac1      	ldr	r2, [pc, #772]	; (80049b8 <UART_SetConfig+0x37c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d005      	beq.n	80046c4 <UART_SetConfig+0x88>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4abf      	ldr	r2, [pc, #764]	; (80049bc <UART_SetConfig+0x380>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	f040 80bd 	bne.w	800483e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046c4:	f7ff f8b0 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 80046c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	461d      	mov	r5, r3
 80046ce:	f04f 0600 	mov.w	r6, #0
 80046d2:	46a8      	mov	r8, r5
 80046d4:	46b1      	mov	r9, r6
 80046d6:	eb18 0308 	adds.w	r3, r8, r8
 80046da:	eb49 0409 	adc.w	r4, r9, r9
 80046de:	4698      	mov	r8, r3
 80046e0:	46a1      	mov	r9, r4
 80046e2:	eb18 0805 	adds.w	r8, r8, r5
 80046e6:	eb49 0906 	adc.w	r9, r9, r6
 80046ea:	f04f 0100 	mov.w	r1, #0
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046fe:	4688      	mov	r8, r1
 8004700:	4691      	mov	r9, r2
 8004702:	eb18 0005 	adds.w	r0, r8, r5
 8004706:	eb49 0106 	adc.w	r1, r9, r6
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	461d      	mov	r5, r3
 8004710:	f04f 0600 	mov.w	r6, #0
 8004714:	196b      	adds	r3, r5, r5
 8004716:	eb46 0406 	adc.w	r4, r6, r6
 800471a:	461a      	mov	r2, r3
 800471c:	4623      	mov	r3, r4
 800471e:	f7fc f9ef 	bl	8000b00 <__aeabi_uldivmod>
 8004722:	4603      	mov	r3, r0
 8004724:	460c      	mov	r4, r1
 8004726:	461a      	mov	r2, r3
 8004728:	4ba5      	ldr	r3, [pc, #660]	; (80049c0 <UART_SetConfig+0x384>)
 800472a:	fba3 2302 	umull	r2, r3, r3, r2
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	461d      	mov	r5, r3
 8004738:	f04f 0600 	mov.w	r6, #0
 800473c:	46a9      	mov	r9, r5
 800473e:	46b2      	mov	sl, r6
 8004740:	eb19 0309 	adds.w	r3, r9, r9
 8004744:	eb4a 040a 	adc.w	r4, sl, sl
 8004748:	4699      	mov	r9, r3
 800474a:	46a2      	mov	sl, r4
 800474c:	eb19 0905 	adds.w	r9, r9, r5
 8004750:	eb4a 0a06 	adc.w	sl, sl, r6
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004760:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004764:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004768:	4689      	mov	r9, r1
 800476a:	4692      	mov	sl, r2
 800476c:	eb19 0005 	adds.w	r0, r9, r5
 8004770:	eb4a 0106 	adc.w	r1, sl, r6
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	461d      	mov	r5, r3
 800477a:	f04f 0600 	mov.w	r6, #0
 800477e:	196b      	adds	r3, r5, r5
 8004780:	eb46 0406 	adc.w	r4, r6, r6
 8004784:	461a      	mov	r2, r3
 8004786:	4623      	mov	r3, r4
 8004788:	f7fc f9ba 	bl	8000b00 <__aeabi_uldivmod>
 800478c:	4603      	mov	r3, r0
 800478e:	460c      	mov	r4, r1
 8004790:	461a      	mov	r2, r3
 8004792:	4b8b      	ldr	r3, [pc, #556]	; (80049c0 <UART_SetConfig+0x384>)
 8004794:	fba3 1302 	umull	r1, r3, r3, r2
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	2164      	movs	r1, #100	; 0x64
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	3332      	adds	r3, #50	; 0x32
 80047a6:	4a86      	ldr	r2, [pc, #536]	; (80049c0 <UART_SetConfig+0x384>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047b4:	4498      	add	r8, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	461d      	mov	r5, r3
 80047ba:	f04f 0600 	mov.w	r6, #0
 80047be:	46a9      	mov	r9, r5
 80047c0:	46b2      	mov	sl, r6
 80047c2:	eb19 0309 	adds.w	r3, r9, r9
 80047c6:	eb4a 040a 	adc.w	r4, sl, sl
 80047ca:	4699      	mov	r9, r3
 80047cc:	46a2      	mov	sl, r4
 80047ce:	eb19 0905 	adds.w	r9, r9, r5
 80047d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80047d6:	f04f 0100 	mov.w	r1, #0
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047ea:	4689      	mov	r9, r1
 80047ec:	4692      	mov	sl, r2
 80047ee:	eb19 0005 	adds.w	r0, r9, r5
 80047f2:	eb4a 0106 	adc.w	r1, sl, r6
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	461d      	mov	r5, r3
 80047fc:	f04f 0600 	mov.w	r6, #0
 8004800:	196b      	adds	r3, r5, r5
 8004802:	eb46 0406 	adc.w	r4, r6, r6
 8004806:	461a      	mov	r2, r3
 8004808:	4623      	mov	r3, r4
 800480a:	f7fc f979 	bl	8000b00 <__aeabi_uldivmod>
 800480e:	4603      	mov	r3, r0
 8004810:	460c      	mov	r4, r1
 8004812:	461a      	mov	r2, r3
 8004814:	4b6a      	ldr	r3, [pc, #424]	; (80049c0 <UART_SetConfig+0x384>)
 8004816:	fba3 1302 	umull	r1, r3, r3, r2
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	2164      	movs	r1, #100	; 0x64
 800481e:	fb01 f303 	mul.w	r3, r1, r3
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	3332      	adds	r3, #50	; 0x32
 8004828:	4a65      	ldr	r2, [pc, #404]	; (80049c0 <UART_SetConfig+0x384>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	f003 0207 	and.w	r2, r3, #7
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4442      	add	r2, r8
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	e26f      	b.n	8004d1e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800483e:	f7fe ffdf 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 8004842:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	461d      	mov	r5, r3
 8004848:	f04f 0600 	mov.w	r6, #0
 800484c:	46a8      	mov	r8, r5
 800484e:	46b1      	mov	r9, r6
 8004850:	eb18 0308 	adds.w	r3, r8, r8
 8004854:	eb49 0409 	adc.w	r4, r9, r9
 8004858:	4698      	mov	r8, r3
 800485a:	46a1      	mov	r9, r4
 800485c:	eb18 0805 	adds.w	r8, r8, r5
 8004860:	eb49 0906 	adc.w	r9, r9, r6
 8004864:	f04f 0100 	mov.w	r1, #0
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004870:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004874:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004878:	4688      	mov	r8, r1
 800487a:	4691      	mov	r9, r2
 800487c:	eb18 0005 	adds.w	r0, r8, r5
 8004880:	eb49 0106 	adc.w	r1, r9, r6
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	461d      	mov	r5, r3
 800488a:	f04f 0600 	mov.w	r6, #0
 800488e:	196b      	adds	r3, r5, r5
 8004890:	eb46 0406 	adc.w	r4, r6, r6
 8004894:	461a      	mov	r2, r3
 8004896:	4623      	mov	r3, r4
 8004898:	f7fc f932 	bl	8000b00 <__aeabi_uldivmod>
 800489c:	4603      	mov	r3, r0
 800489e:	460c      	mov	r4, r1
 80048a0:	461a      	mov	r2, r3
 80048a2:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <UART_SetConfig+0x384>)
 80048a4:	fba3 2302 	umull	r2, r3, r3, r2
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	461d      	mov	r5, r3
 80048b2:	f04f 0600 	mov.w	r6, #0
 80048b6:	46a9      	mov	r9, r5
 80048b8:	46b2      	mov	sl, r6
 80048ba:	eb19 0309 	adds.w	r3, r9, r9
 80048be:	eb4a 040a 	adc.w	r4, sl, sl
 80048c2:	4699      	mov	r9, r3
 80048c4:	46a2      	mov	sl, r4
 80048c6:	eb19 0905 	adds.w	r9, r9, r5
 80048ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80048ce:	f04f 0100 	mov.w	r1, #0
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048e2:	4689      	mov	r9, r1
 80048e4:	4692      	mov	sl, r2
 80048e6:	eb19 0005 	adds.w	r0, r9, r5
 80048ea:	eb4a 0106 	adc.w	r1, sl, r6
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	461d      	mov	r5, r3
 80048f4:	f04f 0600 	mov.w	r6, #0
 80048f8:	196b      	adds	r3, r5, r5
 80048fa:	eb46 0406 	adc.w	r4, r6, r6
 80048fe:	461a      	mov	r2, r3
 8004900:	4623      	mov	r3, r4
 8004902:	f7fc f8fd 	bl	8000b00 <__aeabi_uldivmod>
 8004906:	4603      	mov	r3, r0
 8004908:	460c      	mov	r4, r1
 800490a:	461a      	mov	r2, r3
 800490c:	4b2c      	ldr	r3, [pc, #176]	; (80049c0 <UART_SetConfig+0x384>)
 800490e:	fba3 1302 	umull	r1, r3, r3, r2
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	2164      	movs	r1, #100	; 0x64
 8004916:	fb01 f303 	mul.w	r3, r1, r3
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	3332      	adds	r3, #50	; 0x32
 8004920:	4a27      	ldr	r2, [pc, #156]	; (80049c0 <UART_SetConfig+0x384>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800492e:	4498      	add	r8, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	461d      	mov	r5, r3
 8004934:	f04f 0600 	mov.w	r6, #0
 8004938:	46a9      	mov	r9, r5
 800493a:	46b2      	mov	sl, r6
 800493c:	eb19 0309 	adds.w	r3, r9, r9
 8004940:	eb4a 040a 	adc.w	r4, sl, sl
 8004944:	4699      	mov	r9, r3
 8004946:	46a2      	mov	sl, r4
 8004948:	eb19 0905 	adds.w	r9, r9, r5
 800494c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004950:	f04f 0100 	mov.w	r1, #0
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800495c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004960:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004964:	4689      	mov	r9, r1
 8004966:	4692      	mov	sl, r2
 8004968:	eb19 0005 	adds.w	r0, r9, r5
 800496c:	eb4a 0106 	adc.w	r1, sl, r6
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	461d      	mov	r5, r3
 8004976:	f04f 0600 	mov.w	r6, #0
 800497a:	196b      	adds	r3, r5, r5
 800497c:	eb46 0406 	adc.w	r4, r6, r6
 8004980:	461a      	mov	r2, r3
 8004982:	4623      	mov	r3, r4
 8004984:	f7fc f8bc 	bl	8000b00 <__aeabi_uldivmod>
 8004988:	4603      	mov	r3, r0
 800498a:	460c      	mov	r4, r1
 800498c:	461a      	mov	r2, r3
 800498e:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <UART_SetConfig+0x384>)
 8004990:	fba3 1302 	umull	r1, r3, r3, r2
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	2164      	movs	r1, #100	; 0x64
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	3332      	adds	r3, #50	; 0x32
 80049a2:	4a07      	ldr	r2, [pc, #28]	; (80049c0 <UART_SetConfig+0x384>)
 80049a4:	fba2 2303 	umull	r2, r3, r2, r3
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	f003 0207 	and.w	r2, r3, #7
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4442      	add	r2, r8
 80049b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80049b6:	e1b2      	b.n	8004d1e <UART_SetConfig+0x6e2>
 80049b8:	40011000 	.word	0x40011000
 80049bc:	40011400 	.word	0x40011400
 80049c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4ad7      	ldr	r2, [pc, #860]	; (8004d28 <UART_SetConfig+0x6ec>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d005      	beq.n	80049da <UART_SetConfig+0x39e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4ad6      	ldr	r2, [pc, #856]	; (8004d2c <UART_SetConfig+0x6f0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	f040 80d1 	bne.w	8004b7c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80049da:	f7fe ff25 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 80049de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	469a      	mov	sl, r3
 80049e4:	f04f 0b00 	mov.w	fp, #0
 80049e8:	46d0      	mov	r8, sl
 80049ea:	46d9      	mov	r9, fp
 80049ec:	eb18 0308 	adds.w	r3, r8, r8
 80049f0:	eb49 0409 	adc.w	r4, r9, r9
 80049f4:	4698      	mov	r8, r3
 80049f6:	46a1      	mov	r9, r4
 80049f8:	eb18 080a 	adds.w	r8, r8, sl
 80049fc:	eb49 090b 	adc.w	r9, r9, fp
 8004a00:	f04f 0100 	mov.w	r1, #0
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a14:	4688      	mov	r8, r1
 8004a16:	4691      	mov	r9, r2
 8004a18:	eb1a 0508 	adds.w	r5, sl, r8
 8004a1c:	eb4b 0609 	adc.w	r6, fp, r9
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4619      	mov	r1, r3
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	f04f 0400 	mov.w	r4, #0
 8004a32:	0094      	lsls	r4, r2, #2
 8004a34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a38:	008b      	lsls	r3, r1, #2
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	4623      	mov	r3, r4
 8004a3e:	4628      	mov	r0, r5
 8004a40:	4631      	mov	r1, r6
 8004a42:	f7fc f85d 	bl	8000b00 <__aeabi_uldivmod>
 8004a46:	4603      	mov	r3, r0
 8004a48:	460c      	mov	r4, r1
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4bb8      	ldr	r3, [pc, #736]	; (8004d30 <UART_SetConfig+0x6f4>)
 8004a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	469b      	mov	fp, r3
 8004a5c:	f04f 0c00 	mov.w	ip, #0
 8004a60:	46d9      	mov	r9, fp
 8004a62:	46e2      	mov	sl, ip
 8004a64:	eb19 0309 	adds.w	r3, r9, r9
 8004a68:	eb4a 040a 	adc.w	r4, sl, sl
 8004a6c:	4699      	mov	r9, r3
 8004a6e:	46a2      	mov	sl, r4
 8004a70:	eb19 090b 	adds.w	r9, r9, fp
 8004a74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a78:	f04f 0100 	mov.w	r1, #0
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a8c:	4689      	mov	r9, r1
 8004a8e:	4692      	mov	sl, r2
 8004a90:	eb1b 0509 	adds.w	r5, fp, r9
 8004a94:	eb4c 060a 	adc.w	r6, ip, sl
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	f04f 0400 	mov.w	r4, #0
 8004aaa:	0094      	lsls	r4, r2, #2
 8004aac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ab0:	008b      	lsls	r3, r1, #2
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	4623      	mov	r3, r4
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	4631      	mov	r1, r6
 8004aba:	f7fc f821 	bl	8000b00 <__aeabi_uldivmod>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4b9a      	ldr	r3, [pc, #616]	; (8004d30 <UART_SetConfig+0x6f4>)
 8004ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	2164      	movs	r1, #100	; 0x64
 8004ace:	fb01 f303 	mul.w	r3, r1, r3
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	3332      	adds	r3, #50	; 0x32
 8004ad8:	4a95      	ldr	r2, [pc, #596]	; (8004d30 <UART_SetConfig+0x6f4>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ae4:	4498      	add	r8, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	469b      	mov	fp, r3
 8004aea:	f04f 0c00 	mov.w	ip, #0
 8004aee:	46d9      	mov	r9, fp
 8004af0:	46e2      	mov	sl, ip
 8004af2:	eb19 0309 	adds.w	r3, r9, r9
 8004af6:	eb4a 040a 	adc.w	r4, sl, sl
 8004afa:	4699      	mov	r9, r3
 8004afc:	46a2      	mov	sl, r4
 8004afe:	eb19 090b 	adds.w	r9, r9, fp
 8004b02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b06:	f04f 0100 	mov.w	r1, #0
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b1a:	4689      	mov	r9, r1
 8004b1c:	4692      	mov	sl, r2
 8004b1e:	eb1b 0509 	adds.w	r5, fp, r9
 8004b22:	eb4c 060a 	adc.w	r6, ip, sl
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	f04f 0400 	mov.w	r4, #0
 8004b38:	0094      	lsls	r4, r2, #2
 8004b3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b3e:	008b      	lsls	r3, r1, #2
 8004b40:	461a      	mov	r2, r3
 8004b42:	4623      	mov	r3, r4
 8004b44:	4628      	mov	r0, r5
 8004b46:	4631      	mov	r1, r6
 8004b48:	f7fb ffda 	bl	8000b00 <__aeabi_uldivmod>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	461a      	mov	r2, r3
 8004b52:	4b77      	ldr	r3, [pc, #476]	; (8004d30 <UART_SetConfig+0x6f4>)
 8004b54:	fba3 1302 	umull	r1, r3, r3, r2
 8004b58:	095b      	lsrs	r3, r3, #5
 8004b5a:	2164      	movs	r1, #100	; 0x64
 8004b5c:	fb01 f303 	mul.w	r3, r1, r3
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	3332      	adds	r3, #50	; 0x32
 8004b66:	4a72      	ldr	r2, [pc, #456]	; (8004d30 <UART_SetConfig+0x6f4>)
 8004b68:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6c:	095b      	lsrs	r3, r3, #5
 8004b6e:	f003 020f 	and.w	r2, r3, #15
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4442      	add	r2, r8
 8004b78:	609a      	str	r2, [r3, #8]
 8004b7a:	e0d0      	b.n	8004d1e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b7c:	f7fe fe40 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 8004b80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	469a      	mov	sl, r3
 8004b86:	f04f 0b00 	mov.w	fp, #0
 8004b8a:	46d0      	mov	r8, sl
 8004b8c:	46d9      	mov	r9, fp
 8004b8e:	eb18 0308 	adds.w	r3, r8, r8
 8004b92:	eb49 0409 	adc.w	r4, r9, r9
 8004b96:	4698      	mov	r8, r3
 8004b98:	46a1      	mov	r9, r4
 8004b9a:	eb18 080a 	adds.w	r8, r8, sl
 8004b9e:	eb49 090b 	adc.w	r9, r9, fp
 8004ba2:	f04f 0100 	mov.w	r1, #0
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bb6:	4688      	mov	r8, r1
 8004bb8:	4691      	mov	r9, r2
 8004bba:	eb1a 0508 	adds.w	r5, sl, r8
 8004bbe:	eb4b 0609 	adc.w	r6, fp, r9
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	f04f 0400 	mov.w	r4, #0
 8004bd4:	0094      	lsls	r4, r2, #2
 8004bd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bda:	008b      	lsls	r3, r1, #2
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4623      	mov	r3, r4
 8004be0:	4628      	mov	r0, r5
 8004be2:	4631      	mov	r1, r6
 8004be4:	f7fb ff8c 	bl	8000b00 <__aeabi_uldivmod>
 8004be8:	4603      	mov	r3, r0
 8004bea:	460c      	mov	r4, r1
 8004bec:	461a      	mov	r2, r3
 8004bee:	4b50      	ldr	r3, [pc, #320]	; (8004d30 <UART_SetConfig+0x6f4>)
 8004bf0:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	469b      	mov	fp, r3
 8004bfe:	f04f 0c00 	mov.w	ip, #0
 8004c02:	46d9      	mov	r9, fp
 8004c04:	46e2      	mov	sl, ip
 8004c06:	eb19 0309 	adds.w	r3, r9, r9
 8004c0a:	eb4a 040a 	adc.w	r4, sl, sl
 8004c0e:	4699      	mov	r9, r3
 8004c10:	46a2      	mov	sl, r4
 8004c12:	eb19 090b 	adds.w	r9, r9, fp
 8004c16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c1a:	f04f 0100 	mov.w	r1, #0
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c2e:	4689      	mov	r9, r1
 8004c30:	4692      	mov	sl, r2
 8004c32:	eb1b 0509 	adds.w	r5, fp, r9
 8004c36:	eb4c 060a 	adc.w	r6, ip, sl
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	f04f 0400 	mov.w	r4, #0
 8004c4c:	0094      	lsls	r4, r2, #2
 8004c4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c52:	008b      	lsls	r3, r1, #2
 8004c54:	461a      	mov	r2, r3
 8004c56:	4623      	mov	r3, r4
 8004c58:	4628      	mov	r0, r5
 8004c5a:	4631      	mov	r1, r6
 8004c5c:	f7fb ff50 	bl	8000b00 <__aeabi_uldivmod>
 8004c60:	4603      	mov	r3, r0
 8004c62:	460c      	mov	r4, r1
 8004c64:	461a      	mov	r2, r3
 8004c66:	4b32      	ldr	r3, [pc, #200]	; (8004d30 <UART_SetConfig+0x6f4>)
 8004c68:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	2164      	movs	r1, #100	; 0x64
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	3332      	adds	r3, #50	; 0x32
 8004c7a:	4a2d      	ldr	r2, [pc, #180]	; (8004d30 <UART_SetConfig+0x6f4>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c86:	4498      	add	r8, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	469b      	mov	fp, r3
 8004c8c:	f04f 0c00 	mov.w	ip, #0
 8004c90:	46d9      	mov	r9, fp
 8004c92:	46e2      	mov	sl, ip
 8004c94:	eb19 0309 	adds.w	r3, r9, r9
 8004c98:	eb4a 040a 	adc.w	r4, sl, sl
 8004c9c:	4699      	mov	r9, r3
 8004c9e:	46a2      	mov	sl, r4
 8004ca0:	eb19 090b 	adds.w	r9, r9, fp
 8004ca4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ca8:	f04f 0100 	mov.w	r1, #0
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cbc:	4689      	mov	r9, r1
 8004cbe:	4692      	mov	sl, r2
 8004cc0:	eb1b 0509 	adds.w	r5, fp, r9
 8004cc4:	eb4c 060a 	adc.w	r6, ip, sl
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	f04f 0400 	mov.w	r4, #0
 8004cda:	0094      	lsls	r4, r2, #2
 8004cdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ce0:	008b      	lsls	r3, r1, #2
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	4623      	mov	r3, r4
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	4631      	mov	r1, r6
 8004cea:	f7fb ff09 	bl	8000b00 <__aeabi_uldivmod>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <UART_SetConfig+0x6f4>)
 8004cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	2164      	movs	r1, #100	; 0x64
 8004cfe:	fb01 f303 	mul.w	r3, r1, r3
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	3332      	adds	r3, #50	; 0x32
 8004d08:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <UART_SetConfig+0x6f4>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	f003 020f 	and.w	r2, r3, #15
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4442      	add	r2, r8
 8004d1a:	609a      	str	r2, [r3, #8]
}
 8004d1c:	e7ff      	b.n	8004d1e <UART_SetConfig+0x6e2>
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d28:	40011000 	.word	0x40011000
 8004d2c:	40011400 	.word	0x40011400
 8004d30:	51eb851f 	.word	0x51eb851f

08004d34 <__errno>:
 8004d34:	4b01      	ldr	r3, [pc, #4]	; (8004d3c <__errno+0x8>)
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	2000000c 	.word	0x2000000c

08004d40 <__libc_init_array>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	4e0d      	ldr	r6, [pc, #52]	; (8004d78 <__libc_init_array+0x38>)
 8004d44:	4c0d      	ldr	r4, [pc, #52]	; (8004d7c <__libc_init_array+0x3c>)
 8004d46:	1ba4      	subs	r4, r4, r6
 8004d48:	10a4      	asrs	r4, r4, #2
 8004d4a:	2500      	movs	r5, #0
 8004d4c:	42a5      	cmp	r5, r4
 8004d4e:	d109      	bne.n	8004d64 <__libc_init_array+0x24>
 8004d50:	4e0b      	ldr	r6, [pc, #44]	; (8004d80 <__libc_init_array+0x40>)
 8004d52:	4c0c      	ldr	r4, [pc, #48]	; (8004d84 <__libc_init_array+0x44>)
 8004d54:	f001 fa6e 	bl	8006234 <_init>
 8004d58:	1ba4      	subs	r4, r4, r6
 8004d5a:	10a4      	asrs	r4, r4, #2
 8004d5c:	2500      	movs	r5, #0
 8004d5e:	42a5      	cmp	r5, r4
 8004d60:	d105      	bne.n	8004d6e <__libc_init_array+0x2e>
 8004d62:	bd70      	pop	{r4, r5, r6, pc}
 8004d64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d68:	4798      	blx	r3
 8004d6a:	3501      	adds	r5, #1
 8004d6c:	e7ee      	b.n	8004d4c <__libc_init_array+0xc>
 8004d6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d72:	4798      	blx	r3
 8004d74:	3501      	adds	r5, #1
 8004d76:	e7f2      	b.n	8004d5e <__libc_init_array+0x1e>
 8004d78:	08006300 	.word	0x08006300
 8004d7c:	08006300 	.word	0x08006300
 8004d80:	08006300 	.word	0x08006300
 8004d84:	08006304 	.word	0x08006304

08004d88 <memset>:
 8004d88:	4402      	add	r2, r0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d100      	bne.n	8004d92 <memset+0xa>
 8004d90:	4770      	bx	lr
 8004d92:	f803 1b01 	strb.w	r1, [r3], #1
 8004d96:	e7f9      	b.n	8004d8c <memset+0x4>

08004d98 <atan>:
 8004d98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	ec55 4b10 	vmov	r4, r5, d0
 8004da0:	4bc3      	ldr	r3, [pc, #780]	; (80050b0 <atan+0x318>)
 8004da2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004da6:	429e      	cmp	r6, r3
 8004da8:	46ab      	mov	fp, r5
 8004daa:	dd18      	ble.n	8004dde <atan+0x46>
 8004dac:	4bc1      	ldr	r3, [pc, #772]	; (80050b4 <atan+0x31c>)
 8004dae:	429e      	cmp	r6, r3
 8004db0:	dc01      	bgt.n	8004db6 <atan+0x1e>
 8004db2:	d109      	bne.n	8004dc8 <atan+0x30>
 8004db4:	b144      	cbz	r4, 8004dc8 <atan+0x30>
 8004db6:	4622      	mov	r2, r4
 8004db8:	462b      	mov	r3, r5
 8004dba:	4620      	mov	r0, r4
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	f7fb fa11 	bl	80001e4 <__adddf3>
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	460d      	mov	r5, r1
 8004dc6:	e006      	b.n	8004dd6 <atan+0x3e>
 8004dc8:	f1bb 0f00 	cmp.w	fp, #0
 8004dcc:	f340 8131 	ble.w	8005032 <atan+0x29a>
 8004dd0:	a59b      	add	r5, pc, #620	; (adr r5, 8005040 <atan+0x2a8>)
 8004dd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004dd6:	ec45 4b10 	vmov	d0, r4, r5
 8004dda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dde:	4bb6      	ldr	r3, [pc, #728]	; (80050b8 <atan+0x320>)
 8004de0:	429e      	cmp	r6, r3
 8004de2:	dc14      	bgt.n	8004e0e <atan+0x76>
 8004de4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004de8:	429e      	cmp	r6, r3
 8004dea:	dc0d      	bgt.n	8004e08 <atan+0x70>
 8004dec:	a396      	add	r3, pc, #600	; (adr r3, 8005048 <atan+0x2b0>)
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	ee10 0a10 	vmov	r0, s0
 8004df6:	4629      	mov	r1, r5
 8004df8:	f7fb f9f4 	bl	80001e4 <__adddf3>
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	4baf      	ldr	r3, [pc, #700]	; (80050bc <atan+0x324>)
 8004e00:	f7fb fe36 	bl	8000a70 <__aeabi_dcmpgt>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d1e6      	bne.n	8004dd6 <atan+0x3e>
 8004e08:	f04f 3aff 	mov.w	sl, #4294967295
 8004e0c:	e02b      	b.n	8004e66 <atan+0xce>
 8004e0e:	f000 f963 	bl	80050d8 <fabs>
 8004e12:	4bab      	ldr	r3, [pc, #684]	; (80050c0 <atan+0x328>)
 8004e14:	429e      	cmp	r6, r3
 8004e16:	ec55 4b10 	vmov	r4, r5, d0
 8004e1a:	f300 80bf 	bgt.w	8004f9c <atan+0x204>
 8004e1e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004e22:	429e      	cmp	r6, r3
 8004e24:	f300 80a0 	bgt.w	8004f68 <atan+0x1d0>
 8004e28:	ee10 2a10 	vmov	r2, s0
 8004e2c:	ee10 0a10 	vmov	r0, s0
 8004e30:	462b      	mov	r3, r5
 8004e32:	4629      	mov	r1, r5
 8004e34:	f7fb f9d6 	bl	80001e4 <__adddf3>
 8004e38:	2200      	movs	r2, #0
 8004e3a:	4ba0      	ldr	r3, [pc, #640]	; (80050bc <atan+0x324>)
 8004e3c:	f7fb f9d0 	bl	80001e0 <__aeabi_dsub>
 8004e40:	2200      	movs	r2, #0
 8004e42:	4606      	mov	r6, r0
 8004e44:	460f      	mov	r7, r1
 8004e46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	f7fb f9c9 	bl	80001e4 <__adddf3>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	4630      	mov	r0, r6
 8004e58:	4639      	mov	r1, r7
 8004e5a:	f7fb fca3 	bl	80007a4 <__aeabi_ddiv>
 8004e5e:	f04f 0a00 	mov.w	sl, #0
 8004e62:	4604      	mov	r4, r0
 8004e64:	460d      	mov	r5, r1
 8004e66:	4622      	mov	r2, r4
 8004e68:	462b      	mov	r3, r5
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	f7fb fb6f 	bl	8000550 <__aeabi_dmul>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4680      	mov	r8, r0
 8004e78:	4689      	mov	r9, r1
 8004e7a:	f7fb fb69 	bl	8000550 <__aeabi_dmul>
 8004e7e:	a374      	add	r3, pc, #464	; (adr r3, 8005050 <atan+0x2b8>)
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	4606      	mov	r6, r0
 8004e86:	460f      	mov	r7, r1
 8004e88:	f7fb fb62 	bl	8000550 <__aeabi_dmul>
 8004e8c:	a372      	add	r3, pc, #456	; (adr r3, 8005058 <atan+0x2c0>)
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	f7fb f9a7 	bl	80001e4 <__adddf3>
 8004e96:	4632      	mov	r2, r6
 8004e98:	463b      	mov	r3, r7
 8004e9a:	f7fb fb59 	bl	8000550 <__aeabi_dmul>
 8004e9e:	a370      	add	r3, pc, #448	; (adr r3, 8005060 <atan+0x2c8>)
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	f7fb f99e 	bl	80001e4 <__adddf3>
 8004ea8:	4632      	mov	r2, r6
 8004eaa:	463b      	mov	r3, r7
 8004eac:	f7fb fb50 	bl	8000550 <__aeabi_dmul>
 8004eb0:	a36d      	add	r3, pc, #436	; (adr r3, 8005068 <atan+0x2d0>)
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f7fb f995 	bl	80001e4 <__adddf3>
 8004eba:	4632      	mov	r2, r6
 8004ebc:	463b      	mov	r3, r7
 8004ebe:	f7fb fb47 	bl	8000550 <__aeabi_dmul>
 8004ec2:	a36b      	add	r3, pc, #428	; (adr r3, 8005070 <atan+0x2d8>)
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f7fb f98c 	bl	80001e4 <__adddf3>
 8004ecc:	4632      	mov	r2, r6
 8004ece:	463b      	mov	r3, r7
 8004ed0:	f7fb fb3e 	bl	8000550 <__aeabi_dmul>
 8004ed4:	a368      	add	r3, pc, #416	; (adr r3, 8005078 <atan+0x2e0>)
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	f7fb f983 	bl	80001e4 <__adddf3>
 8004ede:	4642      	mov	r2, r8
 8004ee0:	464b      	mov	r3, r9
 8004ee2:	f7fb fb35 	bl	8000550 <__aeabi_dmul>
 8004ee6:	a366      	add	r3, pc, #408	; (adr r3, 8005080 <atan+0x2e8>)
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	4680      	mov	r8, r0
 8004eee:	4689      	mov	r9, r1
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	4639      	mov	r1, r7
 8004ef4:	f7fb fb2c 	bl	8000550 <__aeabi_dmul>
 8004ef8:	a363      	add	r3, pc, #396	; (adr r3, 8005088 <atan+0x2f0>)
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	f7fb f96f 	bl	80001e0 <__aeabi_dsub>
 8004f02:	4632      	mov	r2, r6
 8004f04:	463b      	mov	r3, r7
 8004f06:	f7fb fb23 	bl	8000550 <__aeabi_dmul>
 8004f0a:	a361      	add	r3, pc, #388	; (adr r3, 8005090 <atan+0x2f8>)
 8004f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f10:	f7fb f966 	bl	80001e0 <__aeabi_dsub>
 8004f14:	4632      	mov	r2, r6
 8004f16:	463b      	mov	r3, r7
 8004f18:	f7fb fb1a 	bl	8000550 <__aeabi_dmul>
 8004f1c:	a35e      	add	r3, pc, #376	; (adr r3, 8005098 <atan+0x300>)
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	f7fb f95d 	bl	80001e0 <__aeabi_dsub>
 8004f26:	4632      	mov	r2, r6
 8004f28:	463b      	mov	r3, r7
 8004f2a:	f7fb fb11 	bl	8000550 <__aeabi_dmul>
 8004f2e:	a35c      	add	r3, pc, #368	; (adr r3, 80050a0 <atan+0x308>)
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f7fb f954 	bl	80001e0 <__aeabi_dsub>
 8004f38:	4632      	mov	r2, r6
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	f7fb fb08 	bl	8000550 <__aeabi_dmul>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4640      	mov	r0, r8
 8004f46:	4649      	mov	r1, r9
 8004f48:	f7fb f94c 	bl	80001e4 <__adddf3>
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	462b      	mov	r3, r5
 8004f50:	f7fb fafe 	bl	8000550 <__aeabi_dmul>
 8004f54:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	d14b      	bne.n	8004ff6 <atan+0x25e>
 8004f5e:	4620      	mov	r0, r4
 8004f60:	4629      	mov	r1, r5
 8004f62:	f7fb f93d 	bl	80001e0 <__aeabi_dsub>
 8004f66:	e72c      	b.n	8004dc2 <atan+0x2a>
 8004f68:	ee10 0a10 	vmov	r0, s0
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	4b53      	ldr	r3, [pc, #332]	; (80050bc <atan+0x324>)
 8004f70:	4629      	mov	r1, r5
 8004f72:	f7fb f935 	bl	80001e0 <__aeabi_dsub>
 8004f76:	2200      	movs	r2, #0
 8004f78:	4606      	mov	r6, r0
 8004f7a:	460f      	mov	r7, r1
 8004f7c:	4b4f      	ldr	r3, [pc, #316]	; (80050bc <atan+0x324>)
 8004f7e:	4620      	mov	r0, r4
 8004f80:	4629      	mov	r1, r5
 8004f82:	f7fb f92f 	bl	80001e4 <__adddf3>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	4639      	mov	r1, r7
 8004f8e:	f7fb fc09 	bl	80007a4 <__aeabi_ddiv>
 8004f92:	f04f 0a01 	mov.w	sl, #1
 8004f96:	4604      	mov	r4, r0
 8004f98:	460d      	mov	r5, r1
 8004f9a:	e764      	b.n	8004e66 <atan+0xce>
 8004f9c:	4b49      	ldr	r3, [pc, #292]	; (80050c4 <atan+0x32c>)
 8004f9e:	429e      	cmp	r6, r3
 8004fa0:	dc1d      	bgt.n	8004fde <atan+0x246>
 8004fa2:	ee10 0a10 	vmov	r0, s0
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	4b47      	ldr	r3, [pc, #284]	; (80050c8 <atan+0x330>)
 8004faa:	4629      	mov	r1, r5
 8004fac:	f7fb f918 	bl	80001e0 <__aeabi_dsub>
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	4606      	mov	r6, r0
 8004fb4:	460f      	mov	r7, r1
 8004fb6:	4b44      	ldr	r3, [pc, #272]	; (80050c8 <atan+0x330>)
 8004fb8:	4620      	mov	r0, r4
 8004fba:	4629      	mov	r1, r5
 8004fbc:	f7fb fac8 	bl	8000550 <__aeabi_dmul>
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	4b3e      	ldr	r3, [pc, #248]	; (80050bc <atan+0x324>)
 8004fc4:	f7fb f90e 	bl	80001e4 <__adddf3>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4630      	mov	r0, r6
 8004fce:	4639      	mov	r1, r7
 8004fd0:	f7fb fbe8 	bl	80007a4 <__aeabi_ddiv>
 8004fd4:	f04f 0a02 	mov.w	sl, #2
 8004fd8:	4604      	mov	r4, r0
 8004fda:	460d      	mov	r5, r1
 8004fdc:	e743      	b.n	8004e66 <atan+0xce>
 8004fde:	462b      	mov	r3, r5
 8004fe0:	ee10 2a10 	vmov	r2, s0
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	4939      	ldr	r1, [pc, #228]	; (80050cc <atan+0x334>)
 8004fe8:	f7fb fbdc 	bl	80007a4 <__aeabi_ddiv>
 8004fec:	f04f 0a03 	mov.w	sl, #3
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	460d      	mov	r5, r1
 8004ff4:	e737      	b.n	8004e66 <atan+0xce>
 8004ff6:	4b36      	ldr	r3, [pc, #216]	; (80050d0 <atan+0x338>)
 8004ff8:	4e36      	ldr	r6, [pc, #216]	; (80050d4 <atan+0x33c>)
 8004ffa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8004ffe:	4456      	add	r6, sl
 8005000:	449a      	add	sl, r3
 8005002:	e9da 2300 	ldrd	r2, r3, [sl]
 8005006:	f7fb f8eb 	bl	80001e0 <__aeabi_dsub>
 800500a:	4622      	mov	r2, r4
 800500c:	462b      	mov	r3, r5
 800500e:	f7fb f8e7 	bl	80001e0 <__aeabi_dsub>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	e9d6 0100 	ldrd	r0, r1, [r6]
 800501a:	f7fb f8e1 	bl	80001e0 <__aeabi_dsub>
 800501e:	f1bb 0f00 	cmp.w	fp, #0
 8005022:	4604      	mov	r4, r0
 8005024:	460d      	mov	r5, r1
 8005026:	f6bf aed6 	bge.w	8004dd6 <atan+0x3e>
 800502a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800502e:	461d      	mov	r5, r3
 8005030:	e6d1      	b.n	8004dd6 <atan+0x3e>
 8005032:	a51d      	add	r5, pc, #116	; (adr r5, 80050a8 <atan+0x310>)
 8005034:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005038:	e6cd      	b.n	8004dd6 <atan+0x3e>
 800503a:	bf00      	nop
 800503c:	f3af 8000 	nop.w
 8005040:	54442d18 	.word	0x54442d18
 8005044:	3ff921fb 	.word	0x3ff921fb
 8005048:	8800759c 	.word	0x8800759c
 800504c:	7e37e43c 	.word	0x7e37e43c
 8005050:	e322da11 	.word	0xe322da11
 8005054:	3f90ad3a 	.word	0x3f90ad3a
 8005058:	24760deb 	.word	0x24760deb
 800505c:	3fa97b4b 	.word	0x3fa97b4b
 8005060:	a0d03d51 	.word	0xa0d03d51
 8005064:	3fb10d66 	.word	0x3fb10d66
 8005068:	c54c206e 	.word	0xc54c206e
 800506c:	3fb745cd 	.word	0x3fb745cd
 8005070:	920083ff 	.word	0x920083ff
 8005074:	3fc24924 	.word	0x3fc24924
 8005078:	5555550d 	.word	0x5555550d
 800507c:	3fd55555 	.word	0x3fd55555
 8005080:	2c6a6c2f 	.word	0x2c6a6c2f
 8005084:	bfa2b444 	.word	0xbfa2b444
 8005088:	52defd9a 	.word	0x52defd9a
 800508c:	3fadde2d 	.word	0x3fadde2d
 8005090:	af749a6d 	.word	0xaf749a6d
 8005094:	3fb3b0f2 	.word	0x3fb3b0f2
 8005098:	fe231671 	.word	0xfe231671
 800509c:	3fbc71c6 	.word	0x3fbc71c6
 80050a0:	9998ebc4 	.word	0x9998ebc4
 80050a4:	3fc99999 	.word	0x3fc99999
 80050a8:	54442d18 	.word	0x54442d18
 80050ac:	bff921fb 	.word	0xbff921fb
 80050b0:	440fffff 	.word	0x440fffff
 80050b4:	7ff00000 	.word	0x7ff00000
 80050b8:	3fdbffff 	.word	0x3fdbffff
 80050bc:	3ff00000 	.word	0x3ff00000
 80050c0:	3ff2ffff 	.word	0x3ff2ffff
 80050c4:	40037fff 	.word	0x40037fff
 80050c8:	3ff80000 	.word	0x3ff80000
 80050cc:	bff00000 	.word	0xbff00000
 80050d0:	08006288 	.word	0x08006288
 80050d4:	08006268 	.word	0x08006268

080050d8 <fabs>:
 80050d8:	ec51 0b10 	vmov	r0, r1, d0
 80050dc:	ee10 2a10 	vmov	r2, s0
 80050e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80050e4:	ec43 2b10 	vmov	d0, r2, r3
 80050e8:	4770      	bx	lr
	...

080050ec <pow>:
 80050ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f0:	ed2d 8b04 	vpush	{d8-d9}
 80050f4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80053c8 <pow+0x2dc>
 80050f8:	b08d      	sub	sp, #52	; 0x34
 80050fa:	ec57 6b10 	vmov	r6, r7, d0
 80050fe:	ec55 4b11 	vmov	r4, r5, d1
 8005102:	f000 f9bd 	bl	8005480 <__ieee754_pow>
 8005106:	f999 3000 	ldrsb.w	r3, [r9]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	3301      	adds	r3, #1
 800510e:	eeb0 8a40 	vmov.f32	s16, s0
 8005112:	eef0 8a60 	vmov.f32	s17, s1
 8005116:	46c8      	mov	r8, r9
 8005118:	d05f      	beq.n	80051da <pow+0xee>
 800511a:	4622      	mov	r2, r4
 800511c:	462b      	mov	r3, r5
 800511e:	4620      	mov	r0, r4
 8005120:	4629      	mov	r1, r5
 8005122:	f7fb fcaf 	bl	8000a84 <__aeabi_dcmpun>
 8005126:	4683      	mov	fp, r0
 8005128:	2800      	cmp	r0, #0
 800512a:	d156      	bne.n	80051da <pow+0xee>
 800512c:	4632      	mov	r2, r6
 800512e:	463b      	mov	r3, r7
 8005130:	4630      	mov	r0, r6
 8005132:	4639      	mov	r1, r7
 8005134:	f7fb fca6 	bl	8000a84 <__aeabi_dcmpun>
 8005138:	9001      	str	r0, [sp, #4]
 800513a:	b1e8      	cbz	r0, 8005178 <pow+0x8c>
 800513c:	2200      	movs	r2, #0
 800513e:	2300      	movs	r3, #0
 8005140:	4620      	mov	r0, r4
 8005142:	4629      	mov	r1, r5
 8005144:	f7fb fc6c 	bl	8000a20 <__aeabi_dcmpeq>
 8005148:	2800      	cmp	r0, #0
 800514a:	d046      	beq.n	80051da <pow+0xee>
 800514c:	2301      	movs	r3, #1
 800514e:	9302      	str	r3, [sp, #8]
 8005150:	4b96      	ldr	r3, [pc, #600]	; (80053ac <pow+0x2c0>)
 8005152:	9303      	str	r3, [sp, #12]
 8005154:	4b96      	ldr	r3, [pc, #600]	; (80053b0 <pow+0x2c4>)
 8005156:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800515a:	2200      	movs	r2, #0
 800515c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005160:	9b00      	ldr	r3, [sp, #0]
 8005162:	2b02      	cmp	r3, #2
 8005164:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005168:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800516c:	d033      	beq.n	80051d6 <pow+0xea>
 800516e:	a802      	add	r0, sp, #8
 8005170:	f000 ff4c 	bl	800600c <matherr>
 8005174:	bb48      	cbnz	r0, 80051ca <pow+0xde>
 8005176:	e05d      	b.n	8005234 <pow+0x148>
 8005178:	f04f 0a00 	mov.w	sl, #0
 800517c:	f04f 0b00 	mov.w	fp, #0
 8005180:	4652      	mov	r2, sl
 8005182:	465b      	mov	r3, fp
 8005184:	4630      	mov	r0, r6
 8005186:	4639      	mov	r1, r7
 8005188:	f7fb fc4a 	bl	8000a20 <__aeabi_dcmpeq>
 800518c:	ec4b ab19 	vmov	d9, sl, fp
 8005190:	2800      	cmp	r0, #0
 8005192:	d054      	beq.n	800523e <pow+0x152>
 8005194:	4652      	mov	r2, sl
 8005196:	465b      	mov	r3, fp
 8005198:	4620      	mov	r0, r4
 800519a:	4629      	mov	r1, r5
 800519c:	f7fb fc40 	bl	8000a20 <__aeabi_dcmpeq>
 80051a0:	4680      	mov	r8, r0
 80051a2:	b318      	cbz	r0, 80051ec <pow+0x100>
 80051a4:	2301      	movs	r3, #1
 80051a6:	9302      	str	r3, [sp, #8]
 80051a8:	4b80      	ldr	r3, [pc, #512]	; (80053ac <pow+0x2c0>)
 80051aa:	9303      	str	r3, [sp, #12]
 80051ac:	9b01      	ldr	r3, [sp, #4]
 80051ae:	930a      	str	r3, [sp, #40]	; 0x28
 80051b0:	9b00      	ldr	r3, [sp, #0]
 80051b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80051b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80051ba:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0d5      	beq.n	800516e <pow+0x82>
 80051c2:	4b7b      	ldr	r3, [pc, #492]	; (80053b0 <pow+0x2c4>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80051ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051cc:	b11b      	cbz	r3, 80051d6 <pow+0xea>
 80051ce:	f7ff fdb1 	bl	8004d34 <__errno>
 80051d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051d4:	6003      	str	r3, [r0, #0]
 80051d6:	ed9d 8b08 	vldr	d8, [sp, #32]
 80051da:	eeb0 0a48 	vmov.f32	s0, s16
 80051de:	eef0 0a68 	vmov.f32	s1, s17
 80051e2:	b00d      	add	sp, #52	; 0x34
 80051e4:	ecbd 8b04 	vpop	{d8-d9}
 80051e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ec:	ec45 4b10 	vmov	d0, r4, r5
 80051f0:	f000 ff04 	bl	8005ffc <finite>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d0f0      	beq.n	80051da <pow+0xee>
 80051f8:	4652      	mov	r2, sl
 80051fa:	465b      	mov	r3, fp
 80051fc:	4620      	mov	r0, r4
 80051fe:	4629      	mov	r1, r5
 8005200:	f7fb fc18 	bl	8000a34 <__aeabi_dcmplt>
 8005204:	2800      	cmp	r0, #0
 8005206:	d0e8      	beq.n	80051da <pow+0xee>
 8005208:	2301      	movs	r3, #1
 800520a:	9302      	str	r3, [sp, #8]
 800520c:	4b67      	ldr	r3, [pc, #412]	; (80053ac <pow+0x2c0>)
 800520e:	9303      	str	r3, [sp, #12]
 8005210:	f999 3000 	ldrsb.w	r3, [r9]
 8005214:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005218:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800521c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005220:	b913      	cbnz	r3, 8005228 <pow+0x13c>
 8005222:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005226:	e7a2      	b.n	800516e <pow+0x82>
 8005228:	4962      	ldr	r1, [pc, #392]	; (80053b4 <pow+0x2c8>)
 800522a:	2000      	movs	r0, #0
 800522c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d19c      	bne.n	800516e <pow+0x82>
 8005234:	f7ff fd7e 	bl	8004d34 <__errno>
 8005238:	2321      	movs	r3, #33	; 0x21
 800523a:	6003      	str	r3, [r0, #0]
 800523c:	e7c5      	b.n	80051ca <pow+0xde>
 800523e:	eeb0 0a48 	vmov.f32	s0, s16
 8005242:	eef0 0a68 	vmov.f32	s1, s17
 8005246:	f000 fed9 	bl	8005ffc <finite>
 800524a:	9000      	str	r0, [sp, #0]
 800524c:	2800      	cmp	r0, #0
 800524e:	f040 8081 	bne.w	8005354 <pow+0x268>
 8005252:	ec47 6b10 	vmov	d0, r6, r7
 8005256:	f000 fed1 	bl	8005ffc <finite>
 800525a:	2800      	cmp	r0, #0
 800525c:	d07a      	beq.n	8005354 <pow+0x268>
 800525e:	ec45 4b10 	vmov	d0, r4, r5
 8005262:	f000 fecb 	bl	8005ffc <finite>
 8005266:	2800      	cmp	r0, #0
 8005268:	d074      	beq.n	8005354 <pow+0x268>
 800526a:	ec53 2b18 	vmov	r2, r3, d8
 800526e:	ee18 0a10 	vmov	r0, s16
 8005272:	4619      	mov	r1, r3
 8005274:	f7fb fc06 	bl	8000a84 <__aeabi_dcmpun>
 8005278:	f999 9000 	ldrsb.w	r9, [r9]
 800527c:	4b4b      	ldr	r3, [pc, #300]	; (80053ac <pow+0x2c0>)
 800527e:	b1b0      	cbz	r0, 80052ae <pow+0x1c2>
 8005280:	2201      	movs	r2, #1
 8005282:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005286:	9b00      	ldr	r3, [sp, #0]
 8005288:	930a      	str	r3, [sp, #40]	; 0x28
 800528a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800528e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005292:	f1b9 0f00 	cmp.w	r9, #0
 8005296:	d0c4      	beq.n	8005222 <pow+0x136>
 8005298:	4652      	mov	r2, sl
 800529a:	465b      	mov	r3, fp
 800529c:	4650      	mov	r0, sl
 800529e:	4659      	mov	r1, fp
 80052a0:	f7fb fa80 	bl	80007a4 <__aeabi_ddiv>
 80052a4:	f1b9 0f02 	cmp.w	r9, #2
 80052a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80052ac:	e7c1      	b.n	8005232 <pow+0x146>
 80052ae:	2203      	movs	r2, #3
 80052b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052b4:	900a      	str	r0, [sp, #40]	; 0x28
 80052b6:	4629      	mov	r1, r5
 80052b8:	4620      	mov	r0, r4
 80052ba:	2200      	movs	r2, #0
 80052bc:	4b3e      	ldr	r3, [pc, #248]	; (80053b8 <pow+0x2cc>)
 80052be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80052c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80052c6:	f7fb f943 	bl	8000550 <__aeabi_dmul>
 80052ca:	4604      	mov	r4, r0
 80052cc:	460d      	mov	r5, r1
 80052ce:	f1b9 0f00 	cmp.w	r9, #0
 80052d2:	d124      	bne.n	800531e <pow+0x232>
 80052d4:	4b39      	ldr	r3, [pc, #228]	; (80053bc <pow+0x2d0>)
 80052d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80052da:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80052de:	4630      	mov	r0, r6
 80052e0:	4652      	mov	r2, sl
 80052e2:	465b      	mov	r3, fp
 80052e4:	4639      	mov	r1, r7
 80052e6:	f7fb fba5 	bl	8000a34 <__aeabi_dcmplt>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d056      	beq.n	800539c <pow+0x2b0>
 80052ee:	ec45 4b10 	vmov	d0, r4, r5
 80052f2:	f000 fe95 	bl	8006020 <rint>
 80052f6:	4622      	mov	r2, r4
 80052f8:	462b      	mov	r3, r5
 80052fa:	ec51 0b10 	vmov	r0, r1, d0
 80052fe:	f7fb fb8f 	bl	8000a20 <__aeabi_dcmpeq>
 8005302:	b920      	cbnz	r0, 800530e <pow+0x222>
 8005304:	4b2e      	ldr	r3, [pc, #184]	; (80053c0 <pow+0x2d4>)
 8005306:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800530a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800530e:	f998 3000 	ldrsb.w	r3, [r8]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d142      	bne.n	800539c <pow+0x2b0>
 8005316:	f7ff fd0d 	bl	8004d34 <__errno>
 800531a:	2322      	movs	r3, #34	; 0x22
 800531c:	e78d      	b.n	800523a <pow+0x14e>
 800531e:	4b29      	ldr	r3, [pc, #164]	; (80053c4 <pow+0x2d8>)
 8005320:	2200      	movs	r2, #0
 8005322:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005326:	4630      	mov	r0, r6
 8005328:	4652      	mov	r2, sl
 800532a:	465b      	mov	r3, fp
 800532c:	4639      	mov	r1, r7
 800532e:	f7fb fb81 	bl	8000a34 <__aeabi_dcmplt>
 8005332:	2800      	cmp	r0, #0
 8005334:	d0eb      	beq.n	800530e <pow+0x222>
 8005336:	ec45 4b10 	vmov	d0, r4, r5
 800533a:	f000 fe71 	bl	8006020 <rint>
 800533e:	4622      	mov	r2, r4
 8005340:	462b      	mov	r3, r5
 8005342:	ec51 0b10 	vmov	r0, r1, d0
 8005346:	f7fb fb6b 	bl	8000a20 <__aeabi_dcmpeq>
 800534a:	2800      	cmp	r0, #0
 800534c:	d1df      	bne.n	800530e <pow+0x222>
 800534e:	2200      	movs	r2, #0
 8005350:	4b18      	ldr	r3, [pc, #96]	; (80053b4 <pow+0x2c8>)
 8005352:	e7da      	b.n	800530a <pow+0x21e>
 8005354:	2200      	movs	r2, #0
 8005356:	2300      	movs	r3, #0
 8005358:	ec51 0b18 	vmov	r0, r1, d8
 800535c:	f7fb fb60 	bl	8000a20 <__aeabi_dcmpeq>
 8005360:	2800      	cmp	r0, #0
 8005362:	f43f af3a 	beq.w	80051da <pow+0xee>
 8005366:	ec47 6b10 	vmov	d0, r6, r7
 800536a:	f000 fe47 	bl	8005ffc <finite>
 800536e:	2800      	cmp	r0, #0
 8005370:	f43f af33 	beq.w	80051da <pow+0xee>
 8005374:	ec45 4b10 	vmov	d0, r4, r5
 8005378:	f000 fe40 	bl	8005ffc <finite>
 800537c:	2800      	cmp	r0, #0
 800537e:	f43f af2c 	beq.w	80051da <pow+0xee>
 8005382:	2304      	movs	r3, #4
 8005384:	9302      	str	r3, [sp, #8]
 8005386:	4b09      	ldr	r3, [pc, #36]	; (80053ac <pow+0x2c0>)
 8005388:	9303      	str	r3, [sp, #12]
 800538a:	2300      	movs	r3, #0
 800538c:	930a      	str	r3, [sp, #40]	; 0x28
 800538e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005392:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005396:	ed8d 9b08 	vstr	d9, [sp, #32]
 800539a:	e7b8      	b.n	800530e <pow+0x222>
 800539c:	a802      	add	r0, sp, #8
 800539e:	f000 fe35 	bl	800600c <matherr>
 80053a2:	2800      	cmp	r0, #0
 80053a4:	f47f af11 	bne.w	80051ca <pow+0xde>
 80053a8:	e7b5      	b.n	8005316 <pow+0x22a>
 80053aa:	bf00      	nop
 80053ac:	080062a8 	.word	0x080062a8
 80053b0:	3ff00000 	.word	0x3ff00000
 80053b4:	fff00000 	.word	0xfff00000
 80053b8:	3fe00000 	.word	0x3fe00000
 80053bc:	47efffff 	.word	0x47efffff
 80053c0:	c7efffff 	.word	0xc7efffff
 80053c4:	7ff00000 	.word	0x7ff00000
 80053c8:	20000070 	.word	0x20000070

080053cc <sqrt>:
 80053cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053d0:	ed2d 8b02 	vpush	{d8}
 80053d4:	b08b      	sub	sp, #44	; 0x2c
 80053d6:	ec55 4b10 	vmov	r4, r5, d0
 80053da:	f000 fd5f 	bl	8005e9c <__ieee754_sqrt>
 80053de:	4b26      	ldr	r3, [pc, #152]	; (8005478 <sqrt+0xac>)
 80053e0:	eeb0 8a40 	vmov.f32	s16, s0
 80053e4:	eef0 8a60 	vmov.f32	s17, s1
 80053e8:	f993 6000 	ldrsb.w	r6, [r3]
 80053ec:	1c73      	adds	r3, r6, #1
 80053ee:	d02a      	beq.n	8005446 <sqrt+0x7a>
 80053f0:	4622      	mov	r2, r4
 80053f2:	462b      	mov	r3, r5
 80053f4:	4620      	mov	r0, r4
 80053f6:	4629      	mov	r1, r5
 80053f8:	f7fb fb44 	bl	8000a84 <__aeabi_dcmpun>
 80053fc:	4607      	mov	r7, r0
 80053fe:	bb10      	cbnz	r0, 8005446 <sqrt+0x7a>
 8005400:	f04f 0800 	mov.w	r8, #0
 8005404:	f04f 0900 	mov.w	r9, #0
 8005408:	4642      	mov	r2, r8
 800540a:	464b      	mov	r3, r9
 800540c:	4620      	mov	r0, r4
 800540e:	4629      	mov	r1, r5
 8005410:	f7fb fb10 	bl	8000a34 <__aeabi_dcmplt>
 8005414:	b1b8      	cbz	r0, 8005446 <sqrt+0x7a>
 8005416:	2301      	movs	r3, #1
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	4b18      	ldr	r3, [pc, #96]	; (800547c <sqrt+0xb0>)
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	9708      	str	r7, [sp, #32]
 8005420:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005424:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005428:	b9b6      	cbnz	r6, 8005458 <sqrt+0x8c>
 800542a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800542e:	4668      	mov	r0, sp
 8005430:	f000 fdec 	bl	800600c <matherr>
 8005434:	b1d0      	cbz	r0, 800546c <sqrt+0xa0>
 8005436:	9b08      	ldr	r3, [sp, #32]
 8005438:	b11b      	cbz	r3, 8005442 <sqrt+0x76>
 800543a:	f7ff fc7b 	bl	8004d34 <__errno>
 800543e:	9b08      	ldr	r3, [sp, #32]
 8005440:	6003      	str	r3, [r0, #0]
 8005442:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005446:	eeb0 0a48 	vmov.f32	s0, s16
 800544a:	eef0 0a68 	vmov.f32	s1, s17
 800544e:	b00b      	add	sp, #44	; 0x2c
 8005450:	ecbd 8b02 	vpop	{d8}
 8005454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	4640      	mov	r0, r8
 800545e:	4649      	mov	r1, r9
 8005460:	f7fb f9a0 	bl	80007a4 <__aeabi_ddiv>
 8005464:	2e02      	cmp	r6, #2
 8005466:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800546a:	d1e0      	bne.n	800542e <sqrt+0x62>
 800546c:	f7ff fc62 	bl	8004d34 <__errno>
 8005470:	2321      	movs	r3, #33	; 0x21
 8005472:	6003      	str	r3, [r0, #0]
 8005474:	e7df      	b.n	8005436 <sqrt+0x6a>
 8005476:	bf00      	nop
 8005478:	20000070 	.word	0x20000070
 800547c:	080062ac 	.word	0x080062ac

08005480 <__ieee754_pow>:
 8005480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005484:	b091      	sub	sp, #68	; 0x44
 8005486:	ed8d 1b00 	vstr	d1, [sp]
 800548a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800548e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005492:	ea58 0302 	orrs.w	r3, r8, r2
 8005496:	ec57 6b10 	vmov	r6, r7, d0
 800549a:	f000 84be 	beq.w	8005e1a <__ieee754_pow+0x99a>
 800549e:	4b7a      	ldr	r3, [pc, #488]	; (8005688 <__ieee754_pow+0x208>)
 80054a0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80054a4:	429c      	cmp	r4, r3
 80054a6:	463d      	mov	r5, r7
 80054a8:	ee10 aa10 	vmov	sl, s0
 80054ac:	dc09      	bgt.n	80054c2 <__ieee754_pow+0x42>
 80054ae:	d103      	bne.n	80054b8 <__ieee754_pow+0x38>
 80054b0:	b93e      	cbnz	r6, 80054c2 <__ieee754_pow+0x42>
 80054b2:	45a0      	cmp	r8, r4
 80054b4:	dc0d      	bgt.n	80054d2 <__ieee754_pow+0x52>
 80054b6:	e001      	b.n	80054bc <__ieee754_pow+0x3c>
 80054b8:	4598      	cmp	r8, r3
 80054ba:	dc02      	bgt.n	80054c2 <__ieee754_pow+0x42>
 80054bc:	4598      	cmp	r8, r3
 80054be:	d10e      	bne.n	80054de <__ieee754_pow+0x5e>
 80054c0:	b16a      	cbz	r2, 80054de <__ieee754_pow+0x5e>
 80054c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80054c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80054ca:	ea54 030a 	orrs.w	r3, r4, sl
 80054ce:	f000 84a4 	beq.w	8005e1a <__ieee754_pow+0x99a>
 80054d2:	486e      	ldr	r0, [pc, #440]	; (800568c <__ieee754_pow+0x20c>)
 80054d4:	b011      	add	sp, #68	; 0x44
 80054d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054da:	f000 bd99 	b.w	8006010 <nan>
 80054de:	2d00      	cmp	r5, #0
 80054e0:	da53      	bge.n	800558a <__ieee754_pow+0x10a>
 80054e2:	4b6b      	ldr	r3, [pc, #428]	; (8005690 <__ieee754_pow+0x210>)
 80054e4:	4598      	cmp	r8, r3
 80054e6:	dc4d      	bgt.n	8005584 <__ieee754_pow+0x104>
 80054e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80054ec:	4598      	cmp	r8, r3
 80054ee:	dd4c      	ble.n	800558a <__ieee754_pow+0x10a>
 80054f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80054f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80054f8:	2b14      	cmp	r3, #20
 80054fa:	dd26      	ble.n	800554a <__ieee754_pow+0xca>
 80054fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005500:	fa22 f103 	lsr.w	r1, r2, r3
 8005504:	fa01 f303 	lsl.w	r3, r1, r3
 8005508:	4293      	cmp	r3, r2
 800550a:	d13e      	bne.n	800558a <__ieee754_pow+0x10a>
 800550c:	f001 0101 	and.w	r1, r1, #1
 8005510:	f1c1 0b02 	rsb	fp, r1, #2
 8005514:	2a00      	cmp	r2, #0
 8005516:	d15b      	bne.n	80055d0 <__ieee754_pow+0x150>
 8005518:	4b5b      	ldr	r3, [pc, #364]	; (8005688 <__ieee754_pow+0x208>)
 800551a:	4598      	cmp	r8, r3
 800551c:	d124      	bne.n	8005568 <__ieee754_pow+0xe8>
 800551e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005522:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005526:	ea53 030a 	orrs.w	r3, r3, sl
 800552a:	f000 8476 	beq.w	8005e1a <__ieee754_pow+0x99a>
 800552e:	4b59      	ldr	r3, [pc, #356]	; (8005694 <__ieee754_pow+0x214>)
 8005530:	429c      	cmp	r4, r3
 8005532:	dd2d      	ble.n	8005590 <__ieee754_pow+0x110>
 8005534:	f1b9 0f00 	cmp.w	r9, #0
 8005538:	f280 8473 	bge.w	8005e22 <__ieee754_pow+0x9a2>
 800553c:	2000      	movs	r0, #0
 800553e:	2100      	movs	r1, #0
 8005540:	ec41 0b10 	vmov	d0, r0, r1
 8005544:	b011      	add	sp, #68	; 0x44
 8005546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800554a:	2a00      	cmp	r2, #0
 800554c:	d13e      	bne.n	80055cc <__ieee754_pow+0x14c>
 800554e:	f1c3 0314 	rsb	r3, r3, #20
 8005552:	fa48 f103 	asr.w	r1, r8, r3
 8005556:	fa01 f303 	lsl.w	r3, r1, r3
 800555a:	4543      	cmp	r3, r8
 800555c:	f040 8469 	bne.w	8005e32 <__ieee754_pow+0x9b2>
 8005560:	f001 0101 	and.w	r1, r1, #1
 8005564:	f1c1 0b02 	rsb	fp, r1, #2
 8005568:	4b4b      	ldr	r3, [pc, #300]	; (8005698 <__ieee754_pow+0x218>)
 800556a:	4598      	cmp	r8, r3
 800556c:	d118      	bne.n	80055a0 <__ieee754_pow+0x120>
 800556e:	f1b9 0f00 	cmp.w	r9, #0
 8005572:	f280 845a 	bge.w	8005e2a <__ieee754_pow+0x9aa>
 8005576:	4948      	ldr	r1, [pc, #288]	; (8005698 <__ieee754_pow+0x218>)
 8005578:	4632      	mov	r2, r6
 800557a:	463b      	mov	r3, r7
 800557c:	2000      	movs	r0, #0
 800557e:	f7fb f911 	bl	80007a4 <__aeabi_ddiv>
 8005582:	e7dd      	b.n	8005540 <__ieee754_pow+0xc0>
 8005584:	f04f 0b02 	mov.w	fp, #2
 8005588:	e7c4      	b.n	8005514 <__ieee754_pow+0x94>
 800558a:	f04f 0b00 	mov.w	fp, #0
 800558e:	e7c1      	b.n	8005514 <__ieee754_pow+0x94>
 8005590:	f1b9 0f00 	cmp.w	r9, #0
 8005594:	dad2      	bge.n	800553c <__ieee754_pow+0xbc>
 8005596:	e9dd 0300 	ldrd	r0, r3, [sp]
 800559a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800559e:	e7cf      	b.n	8005540 <__ieee754_pow+0xc0>
 80055a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80055a4:	d106      	bne.n	80055b4 <__ieee754_pow+0x134>
 80055a6:	4632      	mov	r2, r6
 80055a8:	463b      	mov	r3, r7
 80055aa:	4610      	mov	r0, r2
 80055ac:	4619      	mov	r1, r3
 80055ae:	f7fa ffcf 	bl	8000550 <__aeabi_dmul>
 80055b2:	e7c5      	b.n	8005540 <__ieee754_pow+0xc0>
 80055b4:	4b39      	ldr	r3, [pc, #228]	; (800569c <__ieee754_pow+0x21c>)
 80055b6:	4599      	cmp	r9, r3
 80055b8:	d10a      	bne.n	80055d0 <__ieee754_pow+0x150>
 80055ba:	2d00      	cmp	r5, #0
 80055bc:	db08      	blt.n	80055d0 <__ieee754_pow+0x150>
 80055be:	ec47 6b10 	vmov	d0, r6, r7
 80055c2:	b011      	add	sp, #68	; 0x44
 80055c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c8:	f000 bc68 	b.w	8005e9c <__ieee754_sqrt>
 80055cc:	f04f 0b00 	mov.w	fp, #0
 80055d0:	ec47 6b10 	vmov	d0, r6, r7
 80055d4:	f7ff fd80 	bl	80050d8 <fabs>
 80055d8:	ec51 0b10 	vmov	r0, r1, d0
 80055dc:	f1ba 0f00 	cmp.w	sl, #0
 80055e0:	d127      	bne.n	8005632 <__ieee754_pow+0x1b2>
 80055e2:	b124      	cbz	r4, 80055ee <__ieee754_pow+0x16e>
 80055e4:	4b2c      	ldr	r3, [pc, #176]	; (8005698 <__ieee754_pow+0x218>)
 80055e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d121      	bne.n	8005632 <__ieee754_pow+0x1b2>
 80055ee:	f1b9 0f00 	cmp.w	r9, #0
 80055f2:	da05      	bge.n	8005600 <__ieee754_pow+0x180>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	2000      	movs	r0, #0
 80055fa:	4927      	ldr	r1, [pc, #156]	; (8005698 <__ieee754_pow+0x218>)
 80055fc:	f7fb f8d2 	bl	80007a4 <__aeabi_ddiv>
 8005600:	2d00      	cmp	r5, #0
 8005602:	da9d      	bge.n	8005540 <__ieee754_pow+0xc0>
 8005604:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005608:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800560c:	ea54 030b 	orrs.w	r3, r4, fp
 8005610:	d108      	bne.n	8005624 <__ieee754_pow+0x1a4>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4610      	mov	r0, r2
 8005618:	4619      	mov	r1, r3
 800561a:	f7fa fde1 	bl	80001e0 <__aeabi_dsub>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	e7ac      	b.n	800557e <__ieee754_pow+0xfe>
 8005624:	f1bb 0f01 	cmp.w	fp, #1
 8005628:	d18a      	bne.n	8005540 <__ieee754_pow+0xc0>
 800562a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800562e:	4619      	mov	r1, r3
 8005630:	e786      	b.n	8005540 <__ieee754_pow+0xc0>
 8005632:	0fed      	lsrs	r5, r5, #31
 8005634:	1e6b      	subs	r3, r5, #1
 8005636:	930d      	str	r3, [sp, #52]	; 0x34
 8005638:	ea5b 0303 	orrs.w	r3, fp, r3
 800563c:	d102      	bne.n	8005644 <__ieee754_pow+0x1c4>
 800563e:	4632      	mov	r2, r6
 8005640:	463b      	mov	r3, r7
 8005642:	e7e8      	b.n	8005616 <__ieee754_pow+0x196>
 8005644:	4b16      	ldr	r3, [pc, #88]	; (80056a0 <__ieee754_pow+0x220>)
 8005646:	4598      	cmp	r8, r3
 8005648:	f340 80fe 	ble.w	8005848 <__ieee754_pow+0x3c8>
 800564c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005650:	4598      	cmp	r8, r3
 8005652:	dd0a      	ble.n	800566a <__ieee754_pow+0x1ea>
 8005654:	4b0f      	ldr	r3, [pc, #60]	; (8005694 <__ieee754_pow+0x214>)
 8005656:	429c      	cmp	r4, r3
 8005658:	dc0d      	bgt.n	8005676 <__ieee754_pow+0x1f6>
 800565a:	f1b9 0f00 	cmp.w	r9, #0
 800565e:	f6bf af6d 	bge.w	800553c <__ieee754_pow+0xbc>
 8005662:	a307      	add	r3, pc, #28	; (adr r3, 8005680 <__ieee754_pow+0x200>)
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	e79f      	b.n	80055aa <__ieee754_pow+0x12a>
 800566a:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <__ieee754_pow+0x224>)
 800566c:	429c      	cmp	r4, r3
 800566e:	ddf4      	ble.n	800565a <__ieee754_pow+0x1da>
 8005670:	4b09      	ldr	r3, [pc, #36]	; (8005698 <__ieee754_pow+0x218>)
 8005672:	429c      	cmp	r4, r3
 8005674:	dd18      	ble.n	80056a8 <__ieee754_pow+0x228>
 8005676:	f1b9 0f00 	cmp.w	r9, #0
 800567a:	dcf2      	bgt.n	8005662 <__ieee754_pow+0x1e2>
 800567c:	e75e      	b.n	800553c <__ieee754_pow+0xbc>
 800567e:	bf00      	nop
 8005680:	8800759c 	.word	0x8800759c
 8005684:	7e37e43c 	.word	0x7e37e43c
 8005688:	7ff00000 	.word	0x7ff00000
 800568c:	080062b0 	.word	0x080062b0
 8005690:	433fffff 	.word	0x433fffff
 8005694:	3fefffff 	.word	0x3fefffff
 8005698:	3ff00000 	.word	0x3ff00000
 800569c:	3fe00000 	.word	0x3fe00000
 80056a0:	41e00000 	.word	0x41e00000
 80056a4:	3feffffe 	.word	0x3feffffe
 80056a8:	2200      	movs	r2, #0
 80056aa:	4b63      	ldr	r3, [pc, #396]	; (8005838 <__ieee754_pow+0x3b8>)
 80056ac:	f7fa fd98 	bl	80001e0 <__aeabi_dsub>
 80056b0:	a355      	add	r3, pc, #340	; (adr r3, 8005808 <__ieee754_pow+0x388>)
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	4604      	mov	r4, r0
 80056b8:	460d      	mov	r5, r1
 80056ba:	f7fa ff49 	bl	8000550 <__aeabi_dmul>
 80056be:	a354      	add	r3, pc, #336	; (adr r3, 8005810 <__ieee754_pow+0x390>)
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	4606      	mov	r6, r0
 80056c6:	460f      	mov	r7, r1
 80056c8:	4620      	mov	r0, r4
 80056ca:	4629      	mov	r1, r5
 80056cc:	f7fa ff40 	bl	8000550 <__aeabi_dmul>
 80056d0:	2200      	movs	r2, #0
 80056d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056d6:	4b59      	ldr	r3, [pc, #356]	; (800583c <__ieee754_pow+0x3bc>)
 80056d8:	4620      	mov	r0, r4
 80056da:	4629      	mov	r1, r5
 80056dc:	f7fa ff38 	bl	8000550 <__aeabi_dmul>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	a14c      	add	r1, pc, #304	; (adr r1, 8005818 <__ieee754_pow+0x398>)
 80056e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056ea:	f7fa fd79 	bl	80001e0 <__aeabi_dsub>
 80056ee:	4622      	mov	r2, r4
 80056f0:	462b      	mov	r3, r5
 80056f2:	f7fa ff2d 	bl	8000550 <__aeabi_dmul>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	2000      	movs	r0, #0
 80056fc:	4950      	ldr	r1, [pc, #320]	; (8005840 <__ieee754_pow+0x3c0>)
 80056fe:	f7fa fd6f 	bl	80001e0 <__aeabi_dsub>
 8005702:	4622      	mov	r2, r4
 8005704:	462b      	mov	r3, r5
 8005706:	4680      	mov	r8, r0
 8005708:	4689      	mov	r9, r1
 800570a:	4620      	mov	r0, r4
 800570c:	4629      	mov	r1, r5
 800570e:	f7fa ff1f 	bl	8000550 <__aeabi_dmul>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4640      	mov	r0, r8
 8005718:	4649      	mov	r1, r9
 800571a:	f7fa ff19 	bl	8000550 <__aeabi_dmul>
 800571e:	a340      	add	r3, pc, #256	; (adr r3, 8005820 <__ieee754_pow+0x3a0>)
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f7fa ff14 	bl	8000550 <__aeabi_dmul>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005730:	f7fa fd56 	bl	80001e0 <__aeabi_dsub>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4604      	mov	r4, r0
 800573a:	460d      	mov	r5, r1
 800573c:	4630      	mov	r0, r6
 800573e:	4639      	mov	r1, r7
 8005740:	f7fa fd50 	bl	80001e4 <__adddf3>
 8005744:	2000      	movs	r0, #0
 8005746:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800574a:	4632      	mov	r2, r6
 800574c:	463b      	mov	r3, r7
 800574e:	f7fa fd47 	bl	80001e0 <__aeabi_dsub>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4620      	mov	r0, r4
 8005758:	4629      	mov	r1, r5
 800575a:	f7fa fd41 	bl	80001e0 <__aeabi_dsub>
 800575e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005760:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005764:	4313      	orrs	r3, r2
 8005766:	4606      	mov	r6, r0
 8005768:	460f      	mov	r7, r1
 800576a:	f040 81eb 	bne.w	8005b44 <__ieee754_pow+0x6c4>
 800576e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005828 <__ieee754_pow+0x3a8>
 8005772:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005776:	2400      	movs	r4, #0
 8005778:	4622      	mov	r2, r4
 800577a:	462b      	mov	r3, r5
 800577c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005780:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005784:	f7fa fd2c 	bl	80001e0 <__aeabi_dsub>
 8005788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800578c:	f7fa fee0 	bl	8000550 <__aeabi_dmul>
 8005790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005794:	4680      	mov	r8, r0
 8005796:	4689      	mov	r9, r1
 8005798:	4630      	mov	r0, r6
 800579a:	4639      	mov	r1, r7
 800579c:	f7fa fed8 	bl	8000550 <__aeabi_dmul>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4640      	mov	r0, r8
 80057a6:	4649      	mov	r1, r9
 80057a8:	f7fa fd1c 	bl	80001e4 <__adddf3>
 80057ac:	4622      	mov	r2, r4
 80057ae:	462b      	mov	r3, r5
 80057b0:	4680      	mov	r8, r0
 80057b2:	4689      	mov	r9, r1
 80057b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057b8:	f7fa feca 	bl	8000550 <__aeabi_dmul>
 80057bc:	460b      	mov	r3, r1
 80057be:	4604      	mov	r4, r0
 80057c0:	460d      	mov	r5, r1
 80057c2:	4602      	mov	r2, r0
 80057c4:	4649      	mov	r1, r9
 80057c6:	4640      	mov	r0, r8
 80057c8:	e9cd 4500 	strd	r4, r5, [sp]
 80057cc:	f7fa fd0a 	bl	80001e4 <__adddf3>
 80057d0:	4b1c      	ldr	r3, [pc, #112]	; (8005844 <__ieee754_pow+0x3c4>)
 80057d2:	4299      	cmp	r1, r3
 80057d4:	4606      	mov	r6, r0
 80057d6:	460f      	mov	r7, r1
 80057d8:	468b      	mov	fp, r1
 80057da:	f340 82f7 	ble.w	8005dcc <__ieee754_pow+0x94c>
 80057de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80057e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80057e6:	4303      	orrs	r3, r0
 80057e8:	f000 81ea 	beq.w	8005bc0 <__ieee754_pow+0x740>
 80057ec:	a310      	add	r3, pc, #64	; (adr r3, 8005830 <__ieee754_pow+0x3b0>)
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057f6:	f7fa feab 	bl	8000550 <__aeabi_dmul>
 80057fa:	a30d      	add	r3, pc, #52	; (adr r3, 8005830 <__ieee754_pow+0x3b0>)
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	e6d5      	b.n	80055ae <__ieee754_pow+0x12e>
 8005802:	bf00      	nop
 8005804:	f3af 8000 	nop.w
 8005808:	60000000 	.word	0x60000000
 800580c:	3ff71547 	.word	0x3ff71547
 8005810:	f85ddf44 	.word	0xf85ddf44
 8005814:	3e54ae0b 	.word	0x3e54ae0b
 8005818:	55555555 	.word	0x55555555
 800581c:	3fd55555 	.word	0x3fd55555
 8005820:	652b82fe 	.word	0x652b82fe
 8005824:	3ff71547 	.word	0x3ff71547
 8005828:	00000000 	.word	0x00000000
 800582c:	bff00000 	.word	0xbff00000
 8005830:	8800759c 	.word	0x8800759c
 8005834:	7e37e43c 	.word	0x7e37e43c
 8005838:	3ff00000 	.word	0x3ff00000
 800583c:	3fd00000 	.word	0x3fd00000
 8005840:	3fe00000 	.word	0x3fe00000
 8005844:	408fffff 	.word	0x408fffff
 8005848:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	da05      	bge.n	800585e <__ieee754_pow+0x3de>
 8005852:	4bd3      	ldr	r3, [pc, #844]	; (8005ba0 <__ieee754_pow+0x720>)
 8005854:	f7fa fe7c 	bl	8000550 <__aeabi_dmul>
 8005858:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800585c:	460c      	mov	r4, r1
 800585e:	1523      	asrs	r3, r4, #20
 8005860:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005864:	4413      	add	r3, r2
 8005866:	9309      	str	r3, [sp, #36]	; 0x24
 8005868:	4bce      	ldr	r3, [pc, #824]	; (8005ba4 <__ieee754_pow+0x724>)
 800586a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800586e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005872:	429c      	cmp	r4, r3
 8005874:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005878:	dd08      	ble.n	800588c <__ieee754_pow+0x40c>
 800587a:	4bcb      	ldr	r3, [pc, #812]	; (8005ba8 <__ieee754_pow+0x728>)
 800587c:	429c      	cmp	r4, r3
 800587e:	f340 815e 	ble.w	8005b3e <__ieee754_pow+0x6be>
 8005882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005884:	3301      	adds	r3, #1
 8005886:	9309      	str	r3, [sp, #36]	; 0x24
 8005888:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800588c:	f04f 0a00 	mov.w	sl, #0
 8005890:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005894:	930c      	str	r3, [sp, #48]	; 0x30
 8005896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005898:	4bc4      	ldr	r3, [pc, #784]	; (8005bac <__ieee754_pow+0x72c>)
 800589a:	4413      	add	r3, r2
 800589c:	ed93 7b00 	vldr	d7, [r3]
 80058a0:	4629      	mov	r1, r5
 80058a2:	ec53 2b17 	vmov	r2, r3, d7
 80058a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80058aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80058ae:	f7fa fc97 	bl	80001e0 <__aeabi_dsub>
 80058b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058b6:	4606      	mov	r6, r0
 80058b8:	460f      	mov	r7, r1
 80058ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058be:	f7fa fc91 	bl	80001e4 <__adddf3>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	2000      	movs	r0, #0
 80058c8:	49b9      	ldr	r1, [pc, #740]	; (8005bb0 <__ieee754_pow+0x730>)
 80058ca:	f7fa ff6b 	bl	80007a4 <__aeabi_ddiv>
 80058ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4630      	mov	r0, r6
 80058d8:	4639      	mov	r1, r7
 80058da:	f7fa fe39 	bl	8000550 <__aeabi_dmul>
 80058de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80058e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80058ea:	2300      	movs	r3, #0
 80058ec:	9302      	str	r3, [sp, #8]
 80058ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80058f2:	106d      	asrs	r5, r5, #1
 80058f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80058f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80058fc:	2200      	movs	r2, #0
 80058fe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005902:	4640      	mov	r0, r8
 8005904:	4649      	mov	r1, r9
 8005906:	4614      	mov	r4, r2
 8005908:	461d      	mov	r5, r3
 800590a:	f7fa fe21 	bl	8000550 <__aeabi_dmul>
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	4630      	mov	r0, r6
 8005914:	4639      	mov	r1, r7
 8005916:	f7fa fc63 	bl	80001e0 <__aeabi_dsub>
 800591a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800591e:	4606      	mov	r6, r0
 8005920:	460f      	mov	r7, r1
 8005922:	4620      	mov	r0, r4
 8005924:	4629      	mov	r1, r5
 8005926:	f7fa fc5b 	bl	80001e0 <__aeabi_dsub>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005932:	f7fa fc55 	bl	80001e0 <__aeabi_dsub>
 8005936:	4642      	mov	r2, r8
 8005938:	464b      	mov	r3, r9
 800593a:	f7fa fe09 	bl	8000550 <__aeabi_dmul>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	4630      	mov	r0, r6
 8005944:	4639      	mov	r1, r7
 8005946:	f7fa fc4b 	bl	80001e0 <__aeabi_dsub>
 800594a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800594e:	f7fa fdff 	bl	8000550 <__aeabi_dmul>
 8005952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005956:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800595a:	4610      	mov	r0, r2
 800595c:	4619      	mov	r1, r3
 800595e:	f7fa fdf7 	bl	8000550 <__aeabi_dmul>
 8005962:	a37b      	add	r3, pc, #492	; (adr r3, 8005b50 <__ieee754_pow+0x6d0>)
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	4604      	mov	r4, r0
 800596a:	460d      	mov	r5, r1
 800596c:	f7fa fdf0 	bl	8000550 <__aeabi_dmul>
 8005970:	a379      	add	r3, pc, #484	; (adr r3, 8005b58 <__ieee754_pow+0x6d8>)
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	f7fa fc35 	bl	80001e4 <__adddf3>
 800597a:	4622      	mov	r2, r4
 800597c:	462b      	mov	r3, r5
 800597e:	f7fa fde7 	bl	8000550 <__aeabi_dmul>
 8005982:	a377      	add	r3, pc, #476	; (adr r3, 8005b60 <__ieee754_pow+0x6e0>)
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	f7fa fc2c 	bl	80001e4 <__adddf3>
 800598c:	4622      	mov	r2, r4
 800598e:	462b      	mov	r3, r5
 8005990:	f7fa fdde 	bl	8000550 <__aeabi_dmul>
 8005994:	a374      	add	r3, pc, #464	; (adr r3, 8005b68 <__ieee754_pow+0x6e8>)
 8005996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599a:	f7fa fc23 	bl	80001e4 <__adddf3>
 800599e:	4622      	mov	r2, r4
 80059a0:	462b      	mov	r3, r5
 80059a2:	f7fa fdd5 	bl	8000550 <__aeabi_dmul>
 80059a6:	a372      	add	r3, pc, #456	; (adr r3, 8005b70 <__ieee754_pow+0x6f0>)
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	f7fa fc1a 	bl	80001e4 <__adddf3>
 80059b0:	4622      	mov	r2, r4
 80059b2:	462b      	mov	r3, r5
 80059b4:	f7fa fdcc 	bl	8000550 <__aeabi_dmul>
 80059b8:	a36f      	add	r3, pc, #444	; (adr r3, 8005b78 <__ieee754_pow+0x6f8>)
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	f7fa fc11 	bl	80001e4 <__adddf3>
 80059c2:	4622      	mov	r2, r4
 80059c4:	4606      	mov	r6, r0
 80059c6:	460f      	mov	r7, r1
 80059c8:	462b      	mov	r3, r5
 80059ca:	4620      	mov	r0, r4
 80059cc:	4629      	mov	r1, r5
 80059ce:	f7fa fdbf 	bl	8000550 <__aeabi_dmul>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4630      	mov	r0, r6
 80059d8:	4639      	mov	r1, r7
 80059da:	f7fa fdb9 	bl	8000550 <__aeabi_dmul>
 80059de:	4642      	mov	r2, r8
 80059e0:	4604      	mov	r4, r0
 80059e2:	460d      	mov	r5, r1
 80059e4:	464b      	mov	r3, r9
 80059e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059ea:	f7fa fbfb 	bl	80001e4 <__adddf3>
 80059ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059f2:	f7fa fdad 	bl	8000550 <__aeabi_dmul>
 80059f6:	4622      	mov	r2, r4
 80059f8:	462b      	mov	r3, r5
 80059fa:	f7fa fbf3 	bl	80001e4 <__adddf3>
 80059fe:	4642      	mov	r2, r8
 8005a00:	4606      	mov	r6, r0
 8005a02:	460f      	mov	r7, r1
 8005a04:	464b      	mov	r3, r9
 8005a06:	4640      	mov	r0, r8
 8005a08:	4649      	mov	r1, r9
 8005a0a:	f7fa fda1 	bl	8000550 <__aeabi_dmul>
 8005a0e:	2200      	movs	r2, #0
 8005a10:	4b68      	ldr	r3, [pc, #416]	; (8005bb4 <__ieee754_pow+0x734>)
 8005a12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005a16:	f7fa fbe5 	bl	80001e4 <__adddf3>
 8005a1a:	4632      	mov	r2, r6
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	f7fa fbe1 	bl	80001e4 <__adddf3>
 8005a22:	9802      	ldr	r0, [sp, #8]
 8005a24:	460d      	mov	r5, r1
 8005a26:	4604      	mov	r4, r0
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	4649      	mov	r1, r9
 8005a30:	f7fa fd8e 	bl	8000550 <__aeabi_dmul>
 8005a34:	2200      	movs	r2, #0
 8005a36:	4680      	mov	r8, r0
 8005a38:	4689      	mov	r9, r1
 8005a3a:	4b5e      	ldr	r3, [pc, #376]	; (8005bb4 <__ieee754_pow+0x734>)
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	4629      	mov	r1, r5
 8005a40:	f7fa fbce 	bl	80001e0 <__aeabi_dsub>
 8005a44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005a48:	f7fa fbca 	bl	80001e0 <__aeabi_dsub>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4630      	mov	r0, r6
 8005a52:	4639      	mov	r1, r7
 8005a54:	f7fa fbc4 	bl	80001e0 <__aeabi_dsub>
 8005a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a5c:	f7fa fd78 	bl	8000550 <__aeabi_dmul>
 8005a60:	4622      	mov	r2, r4
 8005a62:	4606      	mov	r6, r0
 8005a64:	460f      	mov	r7, r1
 8005a66:	462b      	mov	r3, r5
 8005a68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a6c:	f7fa fd70 	bl	8000550 <__aeabi_dmul>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4630      	mov	r0, r6
 8005a76:	4639      	mov	r1, r7
 8005a78:	f7fa fbb4 	bl	80001e4 <__adddf3>
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	460f      	mov	r7, r1
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4640      	mov	r0, r8
 8005a86:	4649      	mov	r1, r9
 8005a88:	f7fa fbac 	bl	80001e4 <__adddf3>
 8005a8c:	9802      	ldr	r0, [sp, #8]
 8005a8e:	a33c      	add	r3, pc, #240	; (adr r3, 8005b80 <__ieee754_pow+0x700>)
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	4604      	mov	r4, r0
 8005a96:	460d      	mov	r5, r1
 8005a98:	f7fa fd5a 	bl	8000550 <__aeabi_dmul>
 8005a9c:	4642      	mov	r2, r8
 8005a9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	f7fa fb9a 	bl	80001e0 <__aeabi_dsub>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	4639      	mov	r1, r7
 8005ab4:	f7fa fb94 	bl	80001e0 <__aeabi_dsub>
 8005ab8:	a333      	add	r3, pc, #204	; (adr r3, 8005b88 <__ieee754_pow+0x708>)
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	f7fa fd47 	bl	8000550 <__aeabi_dmul>
 8005ac2:	a333      	add	r3, pc, #204	; (adr r3, 8005b90 <__ieee754_pow+0x710>)
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	4606      	mov	r6, r0
 8005aca:	460f      	mov	r7, r1
 8005acc:	4620      	mov	r0, r4
 8005ace:	4629      	mov	r1, r5
 8005ad0:	f7fa fd3e 	bl	8000550 <__aeabi_dmul>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4630      	mov	r0, r6
 8005ada:	4639      	mov	r1, r7
 8005adc:	f7fa fb82 	bl	80001e4 <__adddf3>
 8005ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ae2:	4b35      	ldr	r3, [pc, #212]	; (8005bb8 <__ieee754_pow+0x738>)
 8005ae4:	4413      	add	r3, r2
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	f7fa fb7b 	bl	80001e4 <__adddf3>
 8005aee:	4604      	mov	r4, r0
 8005af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005af2:	460d      	mov	r5, r1
 8005af4:	f7fa fcc2 	bl	800047c <__aeabi_i2d>
 8005af8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005afa:	4b30      	ldr	r3, [pc, #192]	; (8005bbc <__ieee754_pow+0x73c>)
 8005afc:	4413      	add	r3, r2
 8005afe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b02:	4606      	mov	r6, r0
 8005b04:	460f      	mov	r7, r1
 8005b06:	4622      	mov	r2, r4
 8005b08:	462b      	mov	r3, r5
 8005b0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b0e:	f7fa fb69 	bl	80001e4 <__adddf3>
 8005b12:	4642      	mov	r2, r8
 8005b14:	464b      	mov	r3, r9
 8005b16:	f7fa fb65 	bl	80001e4 <__adddf3>
 8005b1a:	4632      	mov	r2, r6
 8005b1c:	463b      	mov	r3, r7
 8005b1e:	f7fa fb61 	bl	80001e4 <__adddf3>
 8005b22:	9802      	ldr	r0, [sp, #8]
 8005b24:	4632      	mov	r2, r6
 8005b26:	463b      	mov	r3, r7
 8005b28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b2c:	f7fa fb58 	bl	80001e0 <__aeabi_dsub>
 8005b30:	4642      	mov	r2, r8
 8005b32:	464b      	mov	r3, r9
 8005b34:	f7fa fb54 	bl	80001e0 <__aeabi_dsub>
 8005b38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b3c:	e607      	b.n	800574e <__ieee754_pow+0x2ce>
 8005b3e:	f04f 0a01 	mov.w	sl, #1
 8005b42:	e6a5      	b.n	8005890 <__ieee754_pow+0x410>
 8005b44:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005b98 <__ieee754_pow+0x718>
 8005b48:	e613      	b.n	8005772 <__ieee754_pow+0x2f2>
 8005b4a:	bf00      	nop
 8005b4c:	f3af 8000 	nop.w
 8005b50:	4a454eef 	.word	0x4a454eef
 8005b54:	3fca7e28 	.word	0x3fca7e28
 8005b58:	93c9db65 	.word	0x93c9db65
 8005b5c:	3fcd864a 	.word	0x3fcd864a
 8005b60:	a91d4101 	.word	0xa91d4101
 8005b64:	3fd17460 	.word	0x3fd17460
 8005b68:	518f264d 	.word	0x518f264d
 8005b6c:	3fd55555 	.word	0x3fd55555
 8005b70:	db6fabff 	.word	0xdb6fabff
 8005b74:	3fdb6db6 	.word	0x3fdb6db6
 8005b78:	33333303 	.word	0x33333303
 8005b7c:	3fe33333 	.word	0x3fe33333
 8005b80:	e0000000 	.word	0xe0000000
 8005b84:	3feec709 	.word	0x3feec709
 8005b88:	dc3a03fd 	.word	0xdc3a03fd
 8005b8c:	3feec709 	.word	0x3feec709
 8005b90:	145b01f5 	.word	0x145b01f5
 8005b94:	be3e2fe0 	.word	0xbe3e2fe0
 8005b98:	00000000 	.word	0x00000000
 8005b9c:	3ff00000 	.word	0x3ff00000
 8005ba0:	43400000 	.word	0x43400000
 8005ba4:	0003988e 	.word	0x0003988e
 8005ba8:	000bb679 	.word	0x000bb679
 8005bac:	080062b8 	.word	0x080062b8
 8005bb0:	3ff00000 	.word	0x3ff00000
 8005bb4:	40080000 	.word	0x40080000
 8005bb8:	080062d8 	.word	0x080062d8
 8005bbc:	080062c8 	.word	0x080062c8
 8005bc0:	a3b4      	add	r3, pc, #720	; (adr r3, 8005e94 <__ieee754_pow+0xa14>)
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	4640      	mov	r0, r8
 8005bc8:	4649      	mov	r1, r9
 8005bca:	f7fa fb0b 	bl	80001e4 <__adddf3>
 8005bce:	4622      	mov	r2, r4
 8005bd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bd4:	462b      	mov	r3, r5
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	4639      	mov	r1, r7
 8005bda:	f7fa fb01 	bl	80001e0 <__aeabi_dsub>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005be6:	f7fa ff43 	bl	8000a70 <__aeabi_dcmpgt>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	f47f adfe 	bne.w	80057ec <__ieee754_pow+0x36c>
 8005bf0:	4aa3      	ldr	r2, [pc, #652]	; (8005e80 <__ieee754_pow+0xa00>)
 8005bf2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	f340 810a 	ble.w	8005e10 <__ieee754_pow+0x990>
 8005bfc:	151b      	asrs	r3, r3, #20
 8005bfe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005c02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005c06:	fa4a f303 	asr.w	r3, sl, r3
 8005c0a:	445b      	add	r3, fp
 8005c0c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005c10:	4e9c      	ldr	r6, [pc, #624]	; (8005e84 <__ieee754_pow+0xa04>)
 8005c12:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005c16:	4116      	asrs	r6, r2
 8005c18:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	ea23 0106 	bic.w	r1, r3, r6
 8005c22:	f1c2 0214 	rsb	r2, r2, #20
 8005c26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005c2a:	fa4a fa02 	asr.w	sl, sl, r2
 8005c2e:	f1bb 0f00 	cmp.w	fp, #0
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4620      	mov	r0, r4
 8005c38:	4629      	mov	r1, r5
 8005c3a:	bfb8      	it	lt
 8005c3c:	f1ca 0a00 	rsblt	sl, sl, #0
 8005c40:	f7fa face 	bl	80001e0 <__aeabi_dsub>
 8005c44:	e9cd 0100 	strd	r0, r1, [sp]
 8005c48:	4642      	mov	r2, r8
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c50:	f7fa fac8 	bl	80001e4 <__adddf3>
 8005c54:	2000      	movs	r0, #0
 8005c56:	a378      	add	r3, pc, #480	; (adr r3, 8005e38 <__ieee754_pow+0x9b8>)
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	460d      	mov	r5, r1
 8005c60:	f7fa fc76 	bl	8000550 <__aeabi_dmul>
 8005c64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c68:	4606      	mov	r6, r0
 8005c6a:	460f      	mov	r7, r1
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	4629      	mov	r1, r5
 8005c70:	f7fa fab6 	bl	80001e0 <__aeabi_dsub>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4640      	mov	r0, r8
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	f7fa fab0 	bl	80001e0 <__aeabi_dsub>
 8005c80:	a36f      	add	r3, pc, #444	; (adr r3, 8005e40 <__ieee754_pow+0x9c0>)
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	f7fa fc63 	bl	8000550 <__aeabi_dmul>
 8005c8a:	a36f      	add	r3, pc, #444	; (adr r3, 8005e48 <__ieee754_pow+0x9c8>)
 8005c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c90:	4680      	mov	r8, r0
 8005c92:	4689      	mov	r9, r1
 8005c94:	4620      	mov	r0, r4
 8005c96:	4629      	mov	r1, r5
 8005c98:	f7fa fc5a 	bl	8000550 <__aeabi_dmul>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	f7fa fa9e 	bl	80001e4 <__adddf3>
 8005ca8:	4604      	mov	r4, r0
 8005caa:	460d      	mov	r5, r1
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	4639      	mov	r1, r7
 8005cb4:	f7fa fa96 	bl	80001e4 <__adddf3>
 8005cb8:	4632      	mov	r2, r6
 8005cba:	463b      	mov	r3, r7
 8005cbc:	4680      	mov	r8, r0
 8005cbe:	4689      	mov	r9, r1
 8005cc0:	f7fa fa8e 	bl	80001e0 <__aeabi_dsub>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4620      	mov	r0, r4
 8005cca:	4629      	mov	r1, r5
 8005ccc:	f7fa fa88 	bl	80001e0 <__aeabi_dsub>
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	460f      	mov	r7, r1
 8005cd6:	464b      	mov	r3, r9
 8005cd8:	4640      	mov	r0, r8
 8005cda:	4649      	mov	r1, r9
 8005cdc:	f7fa fc38 	bl	8000550 <__aeabi_dmul>
 8005ce0:	a35b      	add	r3, pc, #364	; (adr r3, 8005e50 <__ieee754_pow+0x9d0>)
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	460d      	mov	r5, r1
 8005cea:	f7fa fc31 	bl	8000550 <__aeabi_dmul>
 8005cee:	a35a      	add	r3, pc, #360	; (adr r3, 8005e58 <__ieee754_pow+0x9d8>)
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f7fa fa74 	bl	80001e0 <__aeabi_dsub>
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	462b      	mov	r3, r5
 8005cfc:	f7fa fc28 	bl	8000550 <__aeabi_dmul>
 8005d00:	a357      	add	r3, pc, #348	; (adr r3, 8005e60 <__ieee754_pow+0x9e0>)
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	f7fa fa6d 	bl	80001e4 <__adddf3>
 8005d0a:	4622      	mov	r2, r4
 8005d0c:	462b      	mov	r3, r5
 8005d0e:	f7fa fc1f 	bl	8000550 <__aeabi_dmul>
 8005d12:	a355      	add	r3, pc, #340	; (adr r3, 8005e68 <__ieee754_pow+0x9e8>)
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f7fa fa62 	bl	80001e0 <__aeabi_dsub>
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	462b      	mov	r3, r5
 8005d20:	f7fa fc16 	bl	8000550 <__aeabi_dmul>
 8005d24:	a352      	add	r3, pc, #328	; (adr r3, 8005e70 <__ieee754_pow+0x9f0>)
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f7fa fa5b 	bl	80001e4 <__adddf3>
 8005d2e:	4622      	mov	r2, r4
 8005d30:	462b      	mov	r3, r5
 8005d32:	f7fa fc0d 	bl	8000550 <__aeabi_dmul>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4640      	mov	r0, r8
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	f7fa fa4f 	bl	80001e0 <__aeabi_dsub>
 8005d42:	4604      	mov	r4, r0
 8005d44:	460d      	mov	r5, r1
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	f7fa fbff 	bl	8000550 <__aeabi_dmul>
 8005d52:	2200      	movs	r2, #0
 8005d54:	e9cd 0100 	strd	r0, r1, [sp]
 8005d58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	4629      	mov	r1, r5
 8005d60:	f7fa fa3e 	bl	80001e0 <__aeabi_dsub>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d6c:	f7fa fd1a 	bl	80007a4 <__aeabi_ddiv>
 8005d70:	4632      	mov	r2, r6
 8005d72:	4604      	mov	r4, r0
 8005d74:	460d      	mov	r5, r1
 8005d76:	463b      	mov	r3, r7
 8005d78:	4640      	mov	r0, r8
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	f7fa fbe8 	bl	8000550 <__aeabi_dmul>
 8005d80:	4632      	mov	r2, r6
 8005d82:	463b      	mov	r3, r7
 8005d84:	f7fa fa2e 	bl	80001e4 <__adddf3>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	4629      	mov	r1, r5
 8005d90:	f7fa fa26 	bl	80001e0 <__aeabi_dsub>
 8005d94:	4642      	mov	r2, r8
 8005d96:	464b      	mov	r3, r9
 8005d98:	f7fa fa22 	bl	80001e0 <__aeabi_dsub>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	2000      	movs	r0, #0
 8005da2:	4939      	ldr	r1, [pc, #228]	; (8005e88 <__ieee754_pow+0xa08>)
 8005da4:	f7fa fa1c 	bl	80001e0 <__aeabi_dsub>
 8005da8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005dac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	da2f      	bge.n	8005e16 <__ieee754_pow+0x996>
 8005db6:	4650      	mov	r0, sl
 8005db8:	ec43 2b10 	vmov	d0, r2, r3
 8005dbc:	f000 f9b4 	bl	8006128 <scalbn>
 8005dc0:	ec51 0b10 	vmov	r0, r1, d0
 8005dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dc8:	f7ff bbf1 	b.w	80055ae <__ieee754_pow+0x12e>
 8005dcc:	4b2f      	ldr	r3, [pc, #188]	; (8005e8c <__ieee754_pow+0xa0c>)
 8005dce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005dd2:	429e      	cmp	r6, r3
 8005dd4:	f77f af0c 	ble.w	8005bf0 <__ieee754_pow+0x770>
 8005dd8:	4b2d      	ldr	r3, [pc, #180]	; (8005e90 <__ieee754_pow+0xa10>)
 8005dda:	440b      	add	r3, r1
 8005ddc:	4303      	orrs	r3, r0
 8005dde:	d00b      	beq.n	8005df8 <__ieee754_pow+0x978>
 8005de0:	a325      	add	r3, pc, #148	; (adr r3, 8005e78 <__ieee754_pow+0x9f8>)
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dea:	f7fa fbb1 	bl	8000550 <__aeabi_dmul>
 8005dee:	a322      	add	r3, pc, #136	; (adr r3, 8005e78 <__ieee754_pow+0x9f8>)
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	f7ff bbdb 	b.w	80055ae <__ieee754_pow+0x12e>
 8005df8:	4622      	mov	r2, r4
 8005dfa:	462b      	mov	r3, r5
 8005dfc:	f7fa f9f0 	bl	80001e0 <__aeabi_dsub>
 8005e00:	4642      	mov	r2, r8
 8005e02:	464b      	mov	r3, r9
 8005e04:	f7fa fe2a 	bl	8000a5c <__aeabi_dcmpge>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	f43f aef1 	beq.w	8005bf0 <__ieee754_pow+0x770>
 8005e0e:	e7e7      	b.n	8005de0 <__ieee754_pow+0x960>
 8005e10:	f04f 0a00 	mov.w	sl, #0
 8005e14:	e718      	b.n	8005c48 <__ieee754_pow+0x7c8>
 8005e16:	4621      	mov	r1, r4
 8005e18:	e7d4      	b.n	8005dc4 <__ieee754_pow+0x944>
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	491a      	ldr	r1, [pc, #104]	; (8005e88 <__ieee754_pow+0xa08>)
 8005e1e:	f7ff bb8f 	b.w	8005540 <__ieee754_pow+0xc0>
 8005e22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e26:	f7ff bb8b 	b.w	8005540 <__ieee754_pow+0xc0>
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	4639      	mov	r1, r7
 8005e2e:	f7ff bb87 	b.w	8005540 <__ieee754_pow+0xc0>
 8005e32:	4693      	mov	fp, r2
 8005e34:	f7ff bb98 	b.w	8005568 <__ieee754_pow+0xe8>
 8005e38:	00000000 	.word	0x00000000
 8005e3c:	3fe62e43 	.word	0x3fe62e43
 8005e40:	fefa39ef 	.word	0xfefa39ef
 8005e44:	3fe62e42 	.word	0x3fe62e42
 8005e48:	0ca86c39 	.word	0x0ca86c39
 8005e4c:	be205c61 	.word	0xbe205c61
 8005e50:	72bea4d0 	.word	0x72bea4d0
 8005e54:	3e663769 	.word	0x3e663769
 8005e58:	c5d26bf1 	.word	0xc5d26bf1
 8005e5c:	3ebbbd41 	.word	0x3ebbbd41
 8005e60:	af25de2c 	.word	0xaf25de2c
 8005e64:	3f11566a 	.word	0x3f11566a
 8005e68:	16bebd93 	.word	0x16bebd93
 8005e6c:	3f66c16c 	.word	0x3f66c16c
 8005e70:	5555553e 	.word	0x5555553e
 8005e74:	3fc55555 	.word	0x3fc55555
 8005e78:	c2f8f359 	.word	0xc2f8f359
 8005e7c:	01a56e1f 	.word	0x01a56e1f
 8005e80:	3fe00000 	.word	0x3fe00000
 8005e84:	000fffff 	.word	0x000fffff
 8005e88:	3ff00000 	.word	0x3ff00000
 8005e8c:	4090cbff 	.word	0x4090cbff
 8005e90:	3f6f3400 	.word	0x3f6f3400
 8005e94:	652b82fe 	.word	0x652b82fe
 8005e98:	3c971547 	.word	0x3c971547

08005e9c <__ieee754_sqrt>:
 8005e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea0:	4955      	ldr	r1, [pc, #340]	; (8005ff8 <__ieee754_sqrt+0x15c>)
 8005ea2:	ec55 4b10 	vmov	r4, r5, d0
 8005ea6:	43a9      	bics	r1, r5
 8005ea8:	462b      	mov	r3, r5
 8005eaa:	462a      	mov	r2, r5
 8005eac:	d112      	bne.n	8005ed4 <__ieee754_sqrt+0x38>
 8005eae:	ee10 2a10 	vmov	r2, s0
 8005eb2:	ee10 0a10 	vmov	r0, s0
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	f7fa fb4a 	bl	8000550 <__aeabi_dmul>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	f7fa f98e 	bl	80001e4 <__adddf3>
 8005ec8:	4604      	mov	r4, r0
 8005eca:	460d      	mov	r5, r1
 8005ecc:	ec45 4b10 	vmov	d0, r4, r5
 8005ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed4:	2d00      	cmp	r5, #0
 8005ed6:	ee10 0a10 	vmov	r0, s0
 8005eda:	4621      	mov	r1, r4
 8005edc:	dc0f      	bgt.n	8005efe <__ieee754_sqrt+0x62>
 8005ede:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005ee2:	4330      	orrs	r0, r6
 8005ee4:	d0f2      	beq.n	8005ecc <__ieee754_sqrt+0x30>
 8005ee6:	b155      	cbz	r5, 8005efe <__ieee754_sqrt+0x62>
 8005ee8:	ee10 2a10 	vmov	r2, s0
 8005eec:	4620      	mov	r0, r4
 8005eee:	4629      	mov	r1, r5
 8005ef0:	f7fa f976 	bl	80001e0 <__aeabi_dsub>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	f7fa fc54 	bl	80007a4 <__aeabi_ddiv>
 8005efc:	e7e4      	b.n	8005ec8 <__ieee754_sqrt+0x2c>
 8005efe:	151b      	asrs	r3, r3, #20
 8005f00:	d073      	beq.n	8005fea <__ieee754_sqrt+0x14e>
 8005f02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005f06:	07dd      	lsls	r5, r3, #31
 8005f08:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005f0c:	bf48      	it	mi
 8005f0e:	0fc8      	lsrmi	r0, r1, #31
 8005f10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005f14:	bf44      	itt	mi
 8005f16:	0049      	lslmi	r1, r1, #1
 8005f18:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8005f1c:	2500      	movs	r5, #0
 8005f1e:	1058      	asrs	r0, r3, #1
 8005f20:	0fcb      	lsrs	r3, r1, #31
 8005f22:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005f26:	0049      	lsls	r1, r1, #1
 8005f28:	2316      	movs	r3, #22
 8005f2a:	462c      	mov	r4, r5
 8005f2c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005f30:	19a7      	adds	r7, r4, r6
 8005f32:	4297      	cmp	r7, r2
 8005f34:	bfde      	ittt	le
 8005f36:	19bc      	addle	r4, r7, r6
 8005f38:	1bd2      	suble	r2, r2, r7
 8005f3a:	19ad      	addle	r5, r5, r6
 8005f3c:	0fcf      	lsrs	r7, r1, #31
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005f44:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005f48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005f4c:	d1f0      	bne.n	8005f30 <__ieee754_sqrt+0x94>
 8005f4e:	f04f 0c20 	mov.w	ip, #32
 8005f52:	469e      	mov	lr, r3
 8005f54:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005f58:	42a2      	cmp	r2, r4
 8005f5a:	eb06 070e 	add.w	r7, r6, lr
 8005f5e:	dc02      	bgt.n	8005f66 <__ieee754_sqrt+0xca>
 8005f60:	d112      	bne.n	8005f88 <__ieee754_sqrt+0xec>
 8005f62:	428f      	cmp	r7, r1
 8005f64:	d810      	bhi.n	8005f88 <__ieee754_sqrt+0xec>
 8005f66:	2f00      	cmp	r7, #0
 8005f68:	eb07 0e06 	add.w	lr, r7, r6
 8005f6c:	da42      	bge.n	8005ff4 <__ieee754_sqrt+0x158>
 8005f6e:	f1be 0f00 	cmp.w	lr, #0
 8005f72:	db3f      	blt.n	8005ff4 <__ieee754_sqrt+0x158>
 8005f74:	f104 0801 	add.w	r8, r4, #1
 8005f78:	1b12      	subs	r2, r2, r4
 8005f7a:	428f      	cmp	r7, r1
 8005f7c:	bf88      	it	hi
 8005f7e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005f82:	1bc9      	subs	r1, r1, r7
 8005f84:	4433      	add	r3, r6
 8005f86:	4644      	mov	r4, r8
 8005f88:	0052      	lsls	r2, r2, #1
 8005f8a:	f1bc 0c01 	subs.w	ip, ip, #1
 8005f8e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005f92:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005f96:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005f9a:	d1dd      	bne.n	8005f58 <__ieee754_sqrt+0xbc>
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	d006      	beq.n	8005fae <__ieee754_sqrt+0x112>
 8005fa0:	1c5c      	adds	r4, r3, #1
 8005fa2:	bf13      	iteet	ne
 8005fa4:	3301      	addne	r3, #1
 8005fa6:	3501      	addeq	r5, #1
 8005fa8:	4663      	moveq	r3, ip
 8005faa:	f023 0301 	bicne.w	r3, r3, #1
 8005fae:	106a      	asrs	r2, r5, #1
 8005fb0:	085b      	lsrs	r3, r3, #1
 8005fb2:	07e9      	lsls	r1, r5, #31
 8005fb4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005fb8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005fbc:	bf48      	it	mi
 8005fbe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005fc2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005fc6:	461c      	mov	r4, r3
 8005fc8:	e780      	b.n	8005ecc <__ieee754_sqrt+0x30>
 8005fca:	0aca      	lsrs	r2, r1, #11
 8005fcc:	3815      	subs	r0, #21
 8005fce:	0549      	lsls	r1, r1, #21
 8005fd0:	2a00      	cmp	r2, #0
 8005fd2:	d0fa      	beq.n	8005fca <__ieee754_sqrt+0x12e>
 8005fd4:	02d6      	lsls	r6, r2, #11
 8005fd6:	d50a      	bpl.n	8005fee <__ieee754_sqrt+0x152>
 8005fd8:	f1c3 0420 	rsb	r4, r3, #32
 8005fdc:	fa21 f404 	lsr.w	r4, r1, r4
 8005fe0:	1e5d      	subs	r5, r3, #1
 8005fe2:	4099      	lsls	r1, r3
 8005fe4:	4322      	orrs	r2, r4
 8005fe6:	1b43      	subs	r3, r0, r5
 8005fe8:	e78b      	b.n	8005f02 <__ieee754_sqrt+0x66>
 8005fea:	4618      	mov	r0, r3
 8005fec:	e7f0      	b.n	8005fd0 <__ieee754_sqrt+0x134>
 8005fee:	0052      	lsls	r2, r2, #1
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	e7ef      	b.n	8005fd4 <__ieee754_sqrt+0x138>
 8005ff4:	46a0      	mov	r8, r4
 8005ff6:	e7bf      	b.n	8005f78 <__ieee754_sqrt+0xdc>
 8005ff8:	7ff00000 	.word	0x7ff00000

08005ffc <finite>:
 8005ffc:	ee10 3a90 	vmov	r3, s1
 8006000:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8006004:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006008:	0fc0      	lsrs	r0, r0, #31
 800600a:	4770      	bx	lr

0800600c <matherr>:
 800600c:	2000      	movs	r0, #0
 800600e:	4770      	bx	lr

08006010 <nan>:
 8006010:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006018 <nan+0x8>
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	00000000 	.word	0x00000000
 800601c:	7ff80000 	.word	0x7ff80000

08006020 <rint>:
 8006020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006022:	ec51 0b10 	vmov	r0, r1, d0
 8006026:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800602a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800602e:	2e13      	cmp	r6, #19
 8006030:	460b      	mov	r3, r1
 8006032:	ee10 4a10 	vmov	r4, s0
 8006036:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800603a:	dc56      	bgt.n	80060ea <rint+0xca>
 800603c:	2e00      	cmp	r6, #0
 800603e:	da2b      	bge.n	8006098 <rint+0x78>
 8006040:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006044:	4302      	orrs	r2, r0
 8006046:	d023      	beq.n	8006090 <rint+0x70>
 8006048:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800604c:	4302      	orrs	r2, r0
 800604e:	4254      	negs	r4, r2
 8006050:	4314      	orrs	r4, r2
 8006052:	0c4b      	lsrs	r3, r1, #17
 8006054:	0b24      	lsrs	r4, r4, #12
 8006056:	045b      	lsls	r3, r3, #17
 8006058:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800605c:	ea44 0103 	orr.w	r1, r4, r3
 8006060:	460b      	mov	r3, r1
 8006062:	492f      	ldr	r1, [pc, #188]	; (8006120 <rint+0x100>)
 8006064:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8006068:	e9d1 6700 	ldrd	r6, r7, [r1]
 800606c:	4602      	mov	r2, r0
 800606e:	4639      	mov	r1, r7
 8006070:	4630      	mov	r0, r6
 8006072:	f7fa f8b7 	bl	80001e4 <__adddf3>
 8006076:	e9cd 0100 	strd	r0, r1, [sp]
 800607a:	463b      	mov	r3, r7
 800607c:	4632      	mov	r2, r6
 800607e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006082:	f7fa f8ad 	bl	80001e0 <__aeabi_dsub>
 8006086:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800608a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800608e:	4639      	mov	r1, r7
 8006090:	ec41 0b10 	vmov	d0, r0, r1
 8006094:	b003      	add	sp, #12
 8006096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006098:	4a22      	ldr	r2, [pc, #136]	; (8006124 <rint+0x104>)
 800609a:	4132      	asrs	r2, r6
 800609c:	ea01 0702 	and.w	r7, r1, r2
 80060a0:	4307      	orrs	r7, r0
 80060a2:	d0f5      	beq.n	8006090 <rint+0x70>
 80060a4:	0852      	lsrs	r2, r2, #1
 80060a6:	4011      	ands	r1, r2
 80060a8:	430c      	orrs	r4, r1
 80060aa:	d00b      	beq.n	80060c4 <rint+0xa4>
 80060ac:	ea23 0202 	bic.w	r2, r3, r2
 80060b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80060b4:	2e13      	cmp	r6, #19
 80060b6:	fa43 f306 	asr.w	r3, r3, r6
 80060ba:	bf0c      	ite	eq
 80060bc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80060c0:	2400      	movne	r4, #0
 80060c2:	4313      	orrs	r3, r2
 80060c4:	4916      	ldr	r1, [pc, #88]	; (8006120 <rint+0x100>)
 80060c6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80060ca:	4622      	mov	r2, r4
 80060cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80060d0:	4620      	mov	r0, r4
 80060d2:	4629      	mov	r1, r5
 80060d4:	f7fa f886 	bl	80001e4 <__adddf3>
 80060d8:	e9cd 0100 	strd	r0, r1, [sp]
 80060dc:	4622      	mov	r2, r4
 80060de:	462b      	mov	r3, r5
 80060e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060e4:	f7fa f87c 	bl	80001e0 <__aeabi_dsub>
 80060e8:	e7d2      	b.n	8006090 <rint+0x70>
 80060ea:	2e33      	cmp	r6, #51	; 0x33
 80060ec:	dd07      	ble.n	80060fe <rint+0xde>
 80060ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80060f2:	d1cd      	bne.n	8006090 <rint+0x70>
 80060f4:	ee10 2a10 	vmov	r2, s0
 80060f8:	f7fa f874 	bl	80001e4 <__adddf3>
 80060fc:	e7c8      	b.n	8006090 <rint+0x70>
 80060fe:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8006102:	f04f 32ff 	mov.w	r2, #4294967295
 8006106:	40f2      	lsrs	r2, r6
 8006108:	4210      	tst	r0, r2
 800610a:	d0c1      	beq.n	8006090 <rint+0x70>
 800610c:	0852      	lsrs	r2, r2, #1
 800610e:	4210      	tst	r0, r2
 8006110:	bf1f      	itttt	ne
 8006112:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006116:	ea20 0202 	bicne.w	r2, r0, r2
 800611a:	4134      	asrne	r4, r6
 800611c:	4314      	orrne	r4, r2
 800611e:	e7d1      	b.n	80060c4 <rint+0xa4>
 8006120:	080062e8 	.word	0x080062e8
 8006124:	000fffff 	.word	0x000fffff

08006128 <scalbn>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	ec55 4b10 	vmov	r4, r5, d0
 800612e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006132:	4606      	mov	r6, r0
 8006134:	462b      	mov	r3, r5
 8006136:	b9aa      	cbnz	r2, 8006164 <scalbn+0x3c>
 8006138:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800613c:	4323      	orrs	r3, r4
 800613e:	d03b      	beq.n	80061b8 <scalbn+0x90>
 8006140:	4b31      	ldr	r3, [pc, #196]	; (8006208 <scalbn+0xe0>)
 8006142:	4629      	mov	r1, r5
 8006144:	2200      	movs	r2, #0
 8006146:	ee10 0a10 	vmov	r0, s0
 800614a:	f7fa fa01 	bl	8000550 <__aeabi_dmul>
 800614e:	4b2f      	ldr	r3, [pc, #188]	; (800620c <scalbn+0xe4>)
 8006150:	429e      	cmp	r6, r3
 8006152:	4604      	mov	r4, r0
 8006154:	460d      	mov	r5, r1
 8006156:	da12      	bge.n	800617e <scalbn+0x56>
 8006158:	a327      	add	r3, pc, #156	; (adr r3, 80061f8 <scalbn+0xd0>)
 800615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615e:	f7fa f9f7 	bl	8000550 <__aeabi_dmul>
 8006162:	e009      	b.n	8006178 <scalbn+0x50>
 8006164:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006168:	428a      	cmp	r2, r1
 800616a:	d10c      	bne.n	8006186 <scalbn+0x5e>
 800616c:	ee10 2a10 	vmov	r2, s0
 8006170:	4620      	mov	r0, r4
 8006172:	4629      	mov	r1, r5
 8006174:	f7fa f836 	bl	80001e4 <__adddf3>
 8006178:	4604      	mov	r4, r0
 800617a:	460d      	mov	r5, r1
 800617c:	e01c      	b.n	80061b8 <scalbn+0x90>
 800617e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006182:	460b      	mov	r3, r1
 8006184:	3a36      	subs	r2, #54	; 0x36
 8006186:	4432      	add	r2, r6
 8006188:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800618c:	428a      	cmp	r2, r1
 800618e:	dd0b      	ble.n	80061a8 <scalbn+0x80>
 8006190:	ec45 4b11 	vmov	d1, r4, r5
 8006194:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006200 <scalbn+0xd8>
 8006198:	f000 f83c 	bl	8006214 <copysign>
 800619c:	a318      	add	r3, pc, #96	; (adr r3, 8006200 <scalbn+0xd8>)
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	ec51 0b10 	vmov	r0, r1, d0
 80061a6:	e7da      	b.n	800615e <scalbn+0x36>
 80061a8:	2a00      	cmp	r2, #0
 80061aa:	dd08      	ble.n	80061be <scalbn+0x96>
 80061ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80061b8:	ec45 4b10 	vmov	d0, r4, r5
 80061bc:	bd70      	pop	{r4, r5, r6, pc}
 80061be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80061c2:	da0d      	bge.n	80061e0 <scalbn+0xb8>
 80061c4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80061c8:	429e      	cmp	r6, r3
 80061ca:	ec45 4b11 	vmov	d1, r4, r5
 80061ce:	dce1      	bgt.n	8006194 <scalbn+0x6c>
 80061d0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80061f8 <scalbn+0xd0>
 80061d4:	f000 f81e 	bl	8006214 <copysign>
 80061d8:	a307      	add	r3, pc, #28	; (adr r3, 80061f8 <scalbn+0xd0>)
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	e7e0      	b.n	80061a2 <scalbn+0x7a>
 80061e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061e4:	3236      	adds	r2, #54	; 0x36
 80061e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80061ee:	4620      	mov	r0, r4
 80061f0:	4629      	mov	r1, r5
 80061f2:	2200      	movs	r2, #0
 80061f4:	4b06      	ldr	r3, [pc, #24]	; (8006210 <scalbn+0xe8>)
 80061f6:	e7b2      	b.n	800615e <scalbn+0x36>
 80061f8:	c2f8f359 	.word	0xc2f8f359
 80061fc:	01a56e1f 	.word	0x01a56e1f
 8006200:	8800759c 	.word	0x8800759c
 8006204:	7e37e43c 	.word	0x7e37e43c
 8006208:	43500000 	.word	0x43500000
 800620c:	ffff3cb0 	.word	0xffff3cb0
 8006210:	3c900000 	.word	0x3c900000

08006214 <copysign>:
 8006214:	ec51 0b10 	vmov	r0, r1, d0
 8006218:	ee11 0a90 	vmov	r0, s3
 800621c:	ee10 2a10 	vmov	r2, s0
 8006220:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006224:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006228:	ea41 0300 	orr.w	r3, r1, r0
 800622c:	ec43 2b10 	vmov	d0, r2, r3
 8006230:	4770      	bx	lr
	...

08006234 <_init>:
 8006234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006236:	bf00      	nop
 8006238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623a:	bc08      	pop	{r3}
 800623c:	469e      	mov	lr, r3
 800623e:	4770      	bx	lr

08006240 <_fini>:
 8006240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006242:	bf00      	nop
 8006244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006246:	bc08      	pop	{r3}
 8006248:	469e      	mov	lr, r3
 800624a:	4770      	bx	lr
